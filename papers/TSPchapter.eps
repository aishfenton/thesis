%!PS-Adobe-2.0
%%Copyright: Copyright (c) 1993 AT&T, All Rights Reserved
%%Version: 3.4
%%DocumentFonts: (atend)
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
/DpostDict 200 dict def
DpostDict begin
%
% Copyright (c) 1993 AT&T, All Rights Reserved
%
% Version 3.4 prologue for troff files.
%

/#copies 1 store
/Prologue (dpost.ps) def
/aspectratio 1 def
/formsperpage 1 def
/landscape false def
/linewidth .3 def
/magnification 1 def
/margin 0 def
/orientation 0 def
/resolution 720 def
/rotation 1 def
/xoffset 0 def
/yoffset 0 def

/roundpage true def
/useclippath true def
/pagebbox [0 0 612 792] def

/R  /Times-Roman def
/I  /Times-Italic def
/B  /Times-Bold def
/BI /Times-BoldItalic def
/H  /Helvetica def
/HI /Helvetica-Oblique def
/HB /Helvetica-Bold def
/HX /Helvetica-BoldOblique def
/CW /Courier def
/CO /Courier def
/CI /Courier-Oblique def
/CB /Courier-Bold def
/CX /Courier-BoldOblique def
/PA /Palatino-Roman def
/PI /Palatino-Italic def
/PB /Palatino-Bold def
/PX /Palatino-BoldItalic def
/Hr /Helvetica-Narrow def
/Hi /Helvetica-Narrow-Oblique def
/Hb /Helvetica-Narrow-Bold def
/Hx /Helvetica-Narrow-BoldOblique def
/KR /Bookman-Light def
/KI /Bookman-LightItalic def
/KB /Bookman-Demi def
/KX /Bookman-DemiItalic def
/AR /AvantGarde-Book def
/AI /AvantGarde-BookOblique def
/AB /AvantGarde-Demi def
/AX /AvantGarde-DemiOblique def
/NR /NewCenturySchlbk-Roman def
/NI /NewCenturySchlbk-Italic def
/NB /NewCenturySchlbk-Bold def
/NX /NewCenturySchlbk-BoldItalic def
/ZD /ZapfDingbats def
/ZI /ZapfChancery-MediumItalic def
/S  /S def
/S1 /S1 def
/GR /Symbol def

/inch {72 mul} bind def
/min {2 copy gt {exch} if pop} bind def

/setup {
	counttomark 2 idiv {def} repeat pop

	landscape {/orientation 90 orientation add def} if
	/scaling 72 resolution div def
	linewidth setlinewidth
	1 setlinecap

	pagedimensions
	xcenter ycenter translate
	orientation rotation mul rotate
	width 2 div neg height 2 div translate
	xoffset inch yoffset inch neg translate
	margin 2 div dup neg translate
	magnification dup aspectratio mul scale
	scaling scaling scale

	addmetrics
	0 0 moveto
} def

/pagedimensions {
	useclippath userdict /gotpagebbox known not and {
		/pagebbox [clippath pathbbox newpath] def
		roundpage currentdict /roundpagebbox known and {roundpagebbox} if
	} if
	pagebbox aload pop
	4 -1 roll exch 4 1 roll 4 copy
	landscape {4 2 roll} if
	sub /width exch def
	sub /height exch def
	add 2 div /xcenter exch def
	add 2 div /ycenter exch def
	userdict /gotpagebbox true put
} def

/landscapepage {
	landscape not {
		0 height scaling div neg translate	% not quite
		90 rotate
	} if
} bind def

/portraitpage {
	landscape {
		width scaling div 0 translate	% not quite
		-90 rotate
	} if
} bind def

/addmetrics {
	/Symbol /S null Sdefs cf
	/Times-Roman /S1 StandardEncoding dup length array copy S1defs cf
} def

/pagesetup {
	/page exch def
	currentdict /pagedict known currentdict page known and {
		page load pagedict exch get cvx exec
	} if
} def

/decodingdefs [
	{counttomark 2 idiv {y moveto show} repeat}
	{neg /y exch def counttomark 2 idiv {y moveto show} repeat}
	{neg moveto {2 index stringwidth pop sub exch div 0 32 4 -1 roll widthshow} repeat}
	{neg moveto {spacewidth sub 0.0 32 4 -1 roll widthshow} repeat}
	{counttomark 2 idiv {y moveto show} repeat}
	{neg setfunnytext}
] def

/setdecoding {/t decodingdefs 3 -1 roll get bind def} bind def

/w {neg moveto show} bind def
/m {neg dup /y exch def moveto} bind def
/done {/lastpage where {pop lastpage} if} def

/f {
	dup /font exch def findfont exch
	dup /ptsize exch def scaling div dup /size exch def scalefont setfont
	linewidth ptsize mul scaling 10 mul div setlinewidth
	/spacewidth ( ) stringwidth pop def
} bind def

/changefont {
	/fontheight exch def
	/fontslant exch def
	currentfont [
		1 0
		fontheight ptsize div fontslant sin mul fontslant cos div
		fontheight ptsize div
		0 0
	] makefont setfont
} bind def

/sf {f} bind def

/cf {
	dup length 2 idiv
	/entries exch def
	/chtab exch def
	/newencoding exch def
	/newfont exch def

	findfont dup length 1 add dict
	/newdict exch def
	{1 index /FID ne {newdict 3 1 roll put}{pop pop} ifelse} forall

	newencoding type /arraytype eq {newdict /Encoding newencoding put} if

	newdict /Metrics entries dict put
	newdict /Metrics get
	begin
		chtab aload pop
		1 1 entries {pop def} for
		newfont newdict definefont pop
	end
} bind def

%
% A few arrays used to adjust reference points and character widths in some
% of the printer resident fonts. If square roots are too high try changing
% the lines describing /radical and /radicalex to,
%
%	/radical	[0 -75 550 0]
%	/radicalex	[-50 -75 500 0]
%
% Move braceleftbt a bit - default PostScript character is off a bit.
%

/Sdefs [
	/bracketlefttp		[201 500]
	/bracketleftbt		[201 500]
	/bracketrighttp		[-81 380]
	/bracketrightbt		[-83 380]
	/braceleftbt		[203 490]
	/bracketrightex		[220 -125 500 0]
	/radical		[0 0 550 0]
	/radicalex		[-50 0 500 0]
	/parenleftex		[-20 -170 0 0]
	/integral		[100 -50 500 0]
	/infinity		[10 -75 730 0]
] def

/S1defs [
	/underscore		[0 80 500 0]
	/endash			[7 90 650 0]
] def
end
%%EndProlog
%%BeginSetup
DpostDict begin
mark
/rotation 1 def
/gotpagebbox true def
/linewidth 0.5 def
/xoffset .3 def
/yoffset 0 def
/#copies 1 store
/magnification 1 def
%%FormsPerPage: 1
/formsperpage 1 def
%%Patch from lp
%%EndPatch from lp
/landscape false def
/resolution 720 def
setup
2 setdecoding
/C /Courier def
end
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
1 pagesetup
20 R f
(The Traveling Salesman Problem:)3 2736 1 1512 1020 t
(A Case Study in Local Optimization)5 2916 1 1422 1278 t
14 R f
(David S. Johnson)2 985 1 2350 1788 t
11 R f
(1)3344 1732 w
14 R f
(Lyle A. McGeoch)2 1014 1 2335 1974 t
11 R f
(2)3358 1918 w
12 B f
(Abstract)2657 2424 w
12 R f
( a chapter that appeared in the book)7 1738(This is a preliminary version of)5 1529 2 970 2685 t
12 I f
(Local Search in)2 769 1 4271 2685 t
(Combinatorial Optimization)1 1388 1 720 2835 t
12 R f
(, E. H. L. Aarts and J. K. Lenstra \(eds.\), John Wiley and)12 2932 1 2108 2835 t
( has been an)3 634( traveling salesman problem \(TSP\))4 1733( The)1 260(Sons, London, 1997, pp. 215-310.)4 1693 4 720 2985 t
( to combinatorial optimization, including clas-)5 2250(early proving ground for many approaches)5 2070 2 720 3135 t
( optimization techniques as well as many of the more recent variants on local)13 3827(sical local)1 493 2 720 3285 t
( as simulated annealing, tabu search, neural networks, and genetic)9 3403(optimization, such)1 917 2 720 3435 t
( adapted to)2 553( chapter discusses how these various approaches have been)8 2935(algorithms. This)1 832 3 720 3585 t
( and evaluates their relative success in this perhaps atypical domain from both a)13 3928(the TSP)1 392 2 720 3735 t
(theoretical and an experimental point of view.)6 2213 1 720 3885 t
13 C f
(November 20, 1995)2 1326 1 2217 4785 t
8 S1 f
(__________________)720 6850 w
5 R f
(1)724 6918 w
8 R f
(Room C239, AT&T Labs, Florham Park, NJ 07932,)7 1668 1 775 6950 t
8 C f
(dsj@research.att.com)2463 6950 w
5 R f
(2)724 7018 w
8 R f
(Department of Mathematics and Computer Science, Amherst College, Amherst, MA 01002,)10 2937 1 775 7050 t
8 C f
(lam@cs.amherst.edu)3732 7050 w
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 72 536 720
%%EndPage: 1 1
%%Page: 2 2
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
2 pagesetup
12 R f
(- 2 -)2 200 1 2780 500 t
16 R f
(TABLE OF CONTENTS)2 1637 1 2061 870 t
12 R f
(1. INTRODUCTION)1 1092 1 780 1356 t
( CONSTRUCTION HEURISTICS)2 1675(2. TOUR)1 515 2 780 1542 t
( Results)1 385(2.1. Theoretical)1 787 2 1030 1728 t
( Important Tour Construction Heuristics)4 1938(2.2. Four)1 467 2 1030 1914 t
( Methodology)1 678(2.3. Experimental)1 888 2 1030 2100 t
( Details)1 371(2.4. Implementation)1 1003 2 1030 2286 t
( Results for Tour Construction Heuristics)5 1988(2.5. Experimental)1 888 2 1030 2472 t
( 3-OPT, AND THEIR VARIANTS)4 1690(3. 2-OPT,)1 546 2 780 2658 t
( Bounds on Local Search Algorithms)5 1785(3.1. Theoretical)1 787 2 1030 2844 t
( Results for 2-Opt and 3-Opt)5 1378(3.2. Experimental)1 888 2 1030 3030 t
( to Make 2-Opt and 3-Opt Run Quickly)7 1897(3.3. How)1 472 2 1030 3216 t
( 2-Opt and 3-Opt)3 823(3.4. Parallel)1 608 2 1030 3402 t
( Simple Local Optimization Algorithms)4 1920(3.5. Other)1 513 2 1030 3588 t
( SEARCH AND THE LIN-KERNIGHAN ALGORITHM)5 2777(4. TABU)1 515 2 780 3774 t
( Tabu Search Algorithms for the TSP)6 1795(4.1. Simple)1 582 2 1030 3960 t
( Lin-Kernighan Algorithm)2 1275(4.2. The)1 426 2 1030 4146 t
( ANNEALING AND ITS VARIANTS)4 1864(5. SIMULATED)1 881 2 780 4332 t
( Baseline Implementation of Simulated Annealing for the TSP)8 3000(5.1. A)1 326 2 1030 4518 t
( Speed-Up Techniques)2 1092(5.2. Key)1 439 2 1030 4704 t
( Potential Improvements)2 1184(5.3. Other)1 513 2 1030 4890 t
( Variants on Annealing)3 1117(5.4. Threshold-Based)1 1060 2 1030 5076 t
( ALGORITHMS AND ITERATED LIN-KERNIGHAN)4 2694(6. GENETIC)1 701 2 780 5262 t
( in the Schema)3 711(6.1. Filling)1 563 2 1030 5448 t
( Iterated Lin-Kernighan: Experimental Results)4 2237(6.2. Production-Mode)1 1088 2 1030 5634 t
( Variants)1 437(6.3. Other)1 513 2 1030 5820 t
( NETWORK ALGORITHMS)2 1441(7. NEURAL)1 674 2 780 6006 t
( Networks Based on Integer Programs)5 1830(7.1. Neural)1 566 2 1030 6192 t
( Neural Networks)2 852(7.2. Geometric)1 747 2 1030 6378 t
(8. CONCLUSION)1 960 1 780 6564 t
(REFERENCES)970 6750 w
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 89 100 467 764
%%EndPage: 2 2
%%Page: 3 3
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
3 pagesetup
12 R f
(- 3 -)2 200 1 2780 500 t
14 B f
(1. INTRODUCTION)1 1297 1 720 870 t
12 R f
( given a set {)4 692(In the traveling salesman problem, or ``TSP,'' we are)8 2681 2 720 1093 t
12 I f
(c)4093 1093 w
9 R f
(1)4161 1117 w
12 R f
(,)4226 1093 w
12 I f
(c)4266 1093 w
9 R f
(2)4334 1117 w
12 R f
(,)4399 1093 w
(. . .)2 150 1 4469 1063 t
(,)4659 1093 w
12 I f
(c)4699 1093 w
9 I f
(N)4767 1117 w
12 R f
(} of)1 203 1 4837 1093 t
12 I f
(cities)720 1243 w
12 R f
(and for each pair {)4 917 1 1011 1243 t
12 I f
(c)1928 1243 w
9 I f
(i)1996 1267 w
12 R f
(,)2041 1243 w
12 I f
(c)2081 1243 w
9 I f
(j)2149 1267 w
12 R f
(} of distinct cities a)4 962 1 2184 1243 t
12 I f
(distance d)1 496 1 3181 1243 t
12 R f
(\()3687 1243 w
12 I f
(c)3737 1243 w
9 I f
(i)3805 1267 w
12 R f
(,)3850 1243 w
12 I f
(c)3890 1243 w
9 I f
(j)3958 1267 w
12 R f
( goal is to find)4 716(\). Our)1 321 2 4003 1243 t
(an ordering)1 550 1 720 1393 t
12 S f
(p)1300 1393 w
12 R f
(of the cities that minimizes the quantity)6 1908 1 1396 1393 t
9 I f
(i)1876 1798 w
9 S f
(=)1923 1798 w
9 R f
(1)1988 1798 w
17 S f
(S)1905 1714 w
9 I f
(N)1859 1558 w
9 S f
(-)1941 1558 w
9 R f
(1)2006 1558 w
12 I f
(d)2061 1678 w
12 R f
(\()2131 1678 w
12 I f
(c)2181 1678 w
9 S f
(p)2249 1702 w
9 R f
(\()2306 1702 w
9 I f
(i)2343 1702 w
9 R f
(\))2375 1702 w
12 R f
(,)2425 1678 w
12 I f
(c)2465 1678 w
9 S f
(p)2533 1702 w
9 R f
(\()2590 1702 w
9 I f
(i)2627 1702 w
9 S f
(+)2674 1702 w
9 R f
(1 \))1 82 1 2739 1702 t
12 R f
(\))2841 1678 w
12 S f
(+)2951 1678 w
12 I f
(d)3077 1678 w
12 R f
(\()3147 1678 w
12 I f
(c)3197 1678 w
9 S f
(p)3265 1702 w
9 R f
(\()3322 1702 w
9 I f
(N)3359 1702 w
9 R f
(\))3426 1702 w
12 R f
(,)3476 1678 w
12 I f
(c)3516 1678 w
9 S f
(p)3584 1702 w
9 R f
(\( 1 \))2 119 1 3641 1702 t
12 R f
(\))3780 1678 w
12 I f
(.)3870 1678 w
12 R f
(This quantity is referred to as the)6 1608 1 720 1999 t
12 I f
(tour length)1 535 1 2361 1999 t
12 R f
( of the tour a salesman)5 1105(, since it is the length)5 1039 2 2896 1999 t
( order specified by the permutation, returning)6 2229(would make when visiting the cities in the)7 2091 2 720 2149 t
( this chapter on the)4 943( shall concentrate in)3 983( We)1 232(at the end to the initial city.)6 1358 4 720 2299 t
12 I f
(symmetric)4273 2299 w
12 R f
(TSP,)4803 2299 w
(in which the distances satisfy)4 1410 1 720 2449 t
12 I f
(d)2160 2449 w
12 R f
(\()2230 2449 w
12 I f
(c)2280 2449 w
9 I f
(i)2348 2473 w
12 R f
(,)2393 2449 w
12 I f
(c)2433 2449 w
9 I f
(j)2501 2473 w
12 R f
(\) =)1 137 1 2546 2449 t
12 I f
(d)2713 2449 w
12 R f
(\()2783 2449 w
12 I f
(c)2833 2449 w
9 I f
(j)2901 2473 w
12 R f
(,)2946 2449 w
12 I f
(c)2986 2449 w
9 I f
(i)3054 2473 w
12 R f
(\) for 1)2 300 1 3099 2449 t
12 S f
(\243)3439 2449 w
12 I f
(i)3545 2449 w
12 R f
(,)3589 2449 w
12 I f
(j)3639 2449 w
12 S f
(\243)3713 2449 w
12 I f
(N)3819 2449 w
12 R f
(.)3899 2449 w
( traveling salesman problem has many applications, from VLSI chip)9 3340(The symmetric)1 730 2 970 2635 t
( 1988] to X-ray crystallography [Bland & Shallcross, 1989], and a)10 3403(fabrication [Korte,)1 917 2 720 2785 t
( is NP-)2 342( It)1 137(long history, for which see Lawler, Lenstra, Rinnooy Kan, and Shmoys [1985].)11 3841 3 720 2935 t
( any algorithm for finding optimal tours must have)8 2481(hard [Garey & Johnson, 1979] and so)6 1839 2 720 3085 t
( time that grows faster than any polynomial \(assuming the widely)10 3294(a worst-case running)2 1026 2 720 3235 t
( P)1 109(believed conjecture that)2 1174 2 720 3385 t
12 S f
(\271)2045 3385 w
12 R f
( either)1 346( leaves researchers with two alternatives:)5 2032(NP\). This)1 509 3 2153 3385 t
(look for heuristics that merely find)5 1725 1 720 3535 t
12 I f
(near)2485 3535 w
12 R f
( but do so quickly, or attempt to)7 1615(-optimal tours,)1 720 2 2705 3535 t
(develop optimization algorithms that work well on ``real-world,'' rather than worst-case)10 4320 1 720 3685 t
(instances.)720 3835 w
( its intrigu-)2 545(Because of its simplicity and applicability \(or perhaps simply because of)10 3525 2 970 4021 t
( for decades served as an initial proving ground for new ideas)11 3134(ing name\), the TSP has)4 1186 2 720 4171 t
( new ideas include most of the local search vari-)9 2364( These)1 351( these alternatives.)2 902(related to both)2 703 4 720 4321 t
( In)1 176( subject for a case study.)5 1261(ants covered in this book, which makes the TSP an ideal)10 2883 3 720 4471 t
( of)1 148(addition, the new ideas include many of the important advances in the related area)13 4172 2 720 4621 t
( local search in perspective, let us)6 1631(optimization algorithms, and to keep our discussions of)7 2689 2 720 4771 t
(begin by noting the impressive recent progress in this latter domain.)10 3272 1 720 4921 t
( of research)2 577( Decades)1 474( is one of the major success stories for optimization.)9 2588(The TSP)1 431 4 970 5107 t
( with the continuing rapid growth in computer)7 2354(into optimization techniques, combined)3 1966 2 720 5257 t
( the past)2 421( Over)1 309( have led to one new record after another.)8 2075(speeds and memory capacities,)3 1515 4 720 5407 t
( nontrivial TSP instance solved to optimality has)7 2520(15 years, the record for the largest)6 1800 2 720 5557 t
( 318 cities [Crowder & Padberg, 1980] to 2392 cities [Padberg & Rinaldi,)12 3600(increased from)1 720 2 720 5707 t
( this last)2 427( Admittedly,)1 652( & Cook, 1994].)3 823( al,)1 72( \302)1 45(1987] to 7397 cities [Applegate, Bixby, Chvat)6 2301 6 720 5857 t
( network of machines of the caliber of a)8 1986(result took roughly 3-4 years of CPU-time on a)8 2334 2 720 6007 t
( \()1 114(SPARCstation 2.)1 836 2 720 6157 t
12 I f
(SPARC)1670 6157 w
12 R f
( SPARC International, Inc. and is licensed)6 2114(is a trademark of)3 853 2 2073 6157 t
( the branch-and-cut technology devel-)4 1867( However,)1 538( Inc.\))1 263(exclusively to Sun Microsystems,)3 1652 4 720 6307 t
( also had a major impact on the low end of)10 2059(oped for these record-setting performances has)5 2261 2 720 6457 t
( a few min-)3 568( with 100 or fewer cities are now routinely solved within)10 2780( Problems)1 520(the scale.)1 452 4 720 6607 t
( instances in this range that take much)7 1890(utes on a workstation \(although there are isolated)7 2430 2 720 6757 t
( typically take only a few hours \(or days\),)8 2109(longer\) and instances in the 1,000-city range)6 2211 2 720 6907 t
( Rinaldi [1991], Gr)3 924(e.g., see Padberg &)3 939 2 720 7057 t
(. .)1 54 1 2583 6985 t
(otschel and Holland [1991], and Applegate, Bixby,)6 2457 1 2583 7057 t
( and Cook [1994].)3 873( al,)1 72(Chvat \302)1 332 3 720 7207 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 54 536 764
%%EndPage: 3 3
%%Page: 4 4
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
4 pagesetup
12 R f
(- 4 -)2 200 1 2780 500 t
( weaken)1 399( they)1 240( First,)1 315(The perspective that these optimization results yield is two-fold.)8 3116 4 970 870 t
( of cities is 1,000 or)5 1021(the appeal of the more costly heuristics, at least when the number)11 3299 2 720 1020 t
( in this survey, we shall thus concentrate on results for instances)11 3273( possible)1 441(less. Where)1 606 3 720 1170 t
( they suggest that the TSP is not a)8 1639( Second,)1 444( cities.)1 316(with significantly more than 1,000)4 1669 4 720 1320 t
12 I f
(typi-)4819 1320 w
(cal)720 1470 w
12 R f
( such problems seem significantly)4 1726(combinatorial optimization problem, since most)4 2396 2 918 1470 t
(harder to solve to optimality.)4 1395 1 720 1620 t
( results that)2 558(Another way in which the TSP may be atypical lies in the high quality of)14 3512 2 970 1806 t
( world of heuristic approaches to the TSP)7 2062( The)1 256( obtained by traditional heuristics.)4 1682(can be)1 320 4 720 1956 t
( addition to the)3 750( In)1 168( classes.)1 402(can be roughly divided into two)5 1567 4 720 2106 t
12 I f
(local search)1 599 1 3645 2106 t
12 R f
(approaches that)1 758 1 4282 2106 t
( different)1 445(are the topic of this book, there are many)8 1988 2 720 2256 t
12 I f
(successive augmentation)1 1192 1 3184 2256 t
12 R f
(heuristics for)1 633 1 4407 2256 t
( heuristics build a solution \(tour\) from scratch by a growth process \(usu-)12 3588( Such)1 309(the TSP.)1 423 3 720 2406 t
( In)1 164( has been constructed.)3 1072(ally a greedy one\) that terminates as soon as a feasible solution)11 3084 3 720 2556 t
( we call such a heuristic a)6 1306(the context of the TSP,)4 1149 2 720 2706 t
12 I f
(tour construction)1 845 1 3217 2706 t
12 R f
(heuristic. Whereas)1 936 1 4104 2706 t
( combinatorial optimiza-)2 1193(the successive augmentation approach performs poorly for many)7 3127 2 720 2856 t
( many tour construction heuristics do surprisingly)6 2466(tion problems, in the case of the TSP)7 1854 2 720 3006 t
( typically get within roughly 10-15)5 1741( best)1 237( The)1 259(well in practice.)2 797 4 720 3156 t
12 I f
(%)3754 3156 w
12 R f
(of optimal in relatively)3 1144 1 3896 3156 t
( ``classical'' local optimization techniques for the TSP yield)8 3085( Furthermore,)1 714(little time.)1 521 3 720 3306 t
( typically getting with 3-4)4 1251(even better results, with the simple 3-Opt heuristic)7 2440 2 720 3456 t
12 I f
(%)4411 3456 w
12 R f
(of optimal)1 499 1 4541 3456 t
( of Lin and Kernighan [1973] typically getting with 1-)9 2679(and the ``variable-opt'' algorithm)3 1641 2 720 3606 t
(2)720 3756 w
12 I f
(%)780 3756 w
12 R f
( to have)2 420( for geometric data the abovementioned algorithms all appear)8 3126(. Moreover,)1 614 3 880 3756 t
(running time growth rates that are)5 1703 1 720 3906 t
12 I f
(o)2467 3906 w
12 R f
(\()2537 3906 w
12 I f
(N)2587 3906 w
9 R f
(2)2682 3858 w
12 R f
( from)1 279(\), i.e., subquadratic, at least in the range)7 2014 2 2747 3906 t
( room for)2 476( successes for traditional approaches leave less)6 2321( These)1 358(100 to 1,000,000 cities.)3 1165 4 720 4056 t
( Never-)1 393( like tabu search, simulated annealing, etc. to make contributions.)9 3159(new approaches)1 768 3 720 4206 t
( something to)2 676(theless, at least one of the new approaches, genetic algorithms, does have)11 3644 2 720 4356 t
(contribute if one is willing to pay a large, although still)10 2652 1 720 4506 t
12 I f
(o)3402 4506 w
12 R f
(\()3472 4506 w
12 I f
(N)3522 4506 w
9 R f
(2)3617 4458 w
12 R f
(\), running time price.)3 1019 1 3682 4506 t
( a hybrid)2 455(In reaching conclusions like the above, this paper must of necessity take)11 3615 2 970 4692 t
( experiments on com-)3 1054( possible, we will report the results of performing)8 2414(approach. Where)1 852 3 720 4842 t
( common test instances are the main ones)7 2008( The)1 248(mon sets of instances on a fixed computer.)7 2064 3 720 4992 t
(used in a forthcoming study by Johnson, Bentley, McGeoch, and Rothberg [1996], and)12 4320 1 720 5142 t
( computer in question is an)5 1325( The)1 251( described in more detail in the next section.)8 2168(they will be)2 576 4 720 5292 t
(SGI Challenge)1 743 1 720 5442 t
9 I f
(TM)1470 5394 w
12 R f
( 150 Mhz MIPS)3 867(machine containing sixteen)2 1382 2 1668 5442 t
9 I f
(TM)3924 5394 w
12 R f
(R4400 processors,)1 919 1 4121 5442 t
( one)1 209(although our running times are for sequential implementations that use only a single)12 4111 2 720 5592 t
( \()1 101(of these processors.)2 946 2 720 5742 t
12 I f
(MIPS)1767 5742 w
12 R f
(is a trademark of MIPS, Inc., and)6 1604 1 2071 5742 t
12 I f
(Challenge)3705 5742 w
12 R f
(is a trademark of)3 811 1 4229 5742 t
( comparison, the MIPS processor can be 10-15 times)8 2548( a point of)3 491( As)1 193(Silicon Graphics, Inc.\))2 1088 4 720 5892 t
( Our)1 253( a SPARCstation 2.)3 956(faster than a SPARCstation 1 and perhaps 3-4 times faster than)10 3111 3 720 6042 t
( implementations of tour generation heuristics and classic)7 2960(baseline experiments cover)2 1360 2 720 6192 t
( by Johnson, Bentley, McGeoch, and Rothberg [1996],)7 2770(local search algorithms written)3 1550 2 720 6342 t
(implementations of simulated annealing written by Johnson, Aragon, McGeoch, and)9 4320 1 720 6492 t
( and GENIUS local search heuristics)5 1808(Schevon [1996], and implementations of the GENI)6 2512 2 720 6642 t
( provided us with their)4 1137(written by Gendreau, Hertz, and Laporte [1992], who graciously)8 3183 2 720 6792 t
(source code.)1 599 1 720 6942 t
( we cover, however, the only information we have is)9 2685(For many of the algorithms)4 1385 2 970 7128 t
( algorithms and)2 785(from published papers that provide only high-level descriptions of the)9 3535 2 720 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 4 4
%%Page: 5 5
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
5 pagesetup
12 R f
(- 5 -)2 200 1 2780 500 t
( papers do not typically provide enough infor-)7 2262( These)1 353( experimental results.)2 1047(summaries of)1 658 4 720 870 t
( compare the algorithms directly to our baseline implementations, and we)10 3548(mation for us to)3 772 2 720 1020 t
( tour quality)2 615( For)1 240( are to make comparisons.)4 1310(are reduced to a process of deduction if we)8 2155 4 720 1170 t
( test)1 232(comparisons, we are often fortunate in that other authors have generally used)11 4088 2 720 1320 t
( to the ones in our own test set.)8 1637(instances that were similar in nature \(if not identical\))8 2683 2 720 1470 t
( bit more difficult, as rules of thumb for relating times)10 2716(Running time comparisons are a)4 1604 2 720 1620 t
( dependent on the actual code, com-)6 1778(between machines are far from exact and are highly)8 2542 2 720 1770 t
( the standard IRIX)3 890( used)1 251( \(We)1 267(pilers, and operating systems used.)4 1681 4 720 1920 t
9 R f
(TM)3816 1872 w
12 R f
(operating system pro-)2 1049 1 3991 1920 t
( papers do not provide enough implementation details)7 2694( many)1 311( Moreover,)1 577(vided by SGI.\))2 738 4 720 2070 t
( in \(or missing from\) their codes,)6 1642(for us to know what sorts of optimizations are present)9 2678 2 720 2220 t
(and some papers are unclear as to whether preprocessing is included in their running)13 4320 1 720 2370 t
( involving results from such papers must thus often)8 2515( Comparisons)1 701( is in ours\).)3 560(times \(as it)2 544 4 720 2520 t
( shall generally try to)4 1055( We)1 234( about the missing details.)4 1287(be based on unverified assumptions)4 1744 4 720 2670 t
(be explicit about any such assumptions we make.)7 2370 1 720 2820 t
( relationship between what is)4 1422(In comparing results, we shall also be interested in the)9 2648 2 970 3006 t
( study and what can be observed empirically.)7 2168(known theoretically about the algorithms we)5 2152 2 720 3156 t
( the other, although)3 953(We shall see that each type of analysis has useful things to say about)13 3367 2 720 3306 t
( far too pessimistic to tell us)6 1366(the worst-case nature of many theoretical results makes them)8 2954 2 720 3456 t
(much about typical algorithmic behavior.)4 1988 1 720 3606 t
( Section 2 we discuss four)5 1283( In)1 165( is organized as follows.)4 1185(The remainder of this chapter)4 1437 4 970 3792 t
( construction heuristics, along with key theoretical results that help charac-)10 3624(important tour)1 696 2 720 3942 t
( identify general complexity-theoretic limitations on what)6 2878(terize their behavior and that)4 1442 2 720 4092 t
( also introduce our experimental methodology)5 2301( We)1 242(any heuristic approach can achieve.)4 1777 3 720 4242 t
( four heuristics from the extensive study by)7 2179(and summarize experimental results for the)5 2141 2 720 4392 t
( that tour construction heuristics)4 1560( Note)1 295(Johnson, Bentley, McGeoch, and Rothberg [1996].)5 2465 3 720 4542 t
( the perspective they provide but)5 1647(are important in the context of this book not only for)10 2673 2 720 4692 t
( can be used to generate the starting points \(initial tours\) needed by)12 3442(also because they)2 878 2 720 4842 t
( 3 describes)2 575( Section)1 424(local search algorithms and their variants.)5 2026 3 720 4992 t
12 I f
(2-Opt)3779 4992 w
12 R f
(and)4093 4992 w
12 I f
(3-Opt)4300 4992 w
12 R f
(, the sim-)2 460 1 4580 4992 t
( the classical local optimization algorithms for the TSP, and it)10 3070(plest and most famous of)4 1250 2 720 5142 t
( them from a theoretical)4 1176(discusses both their empirical behavior and what is known about)9 3144 2 720 5292 t
( results in their own right, these algorithms)7 2116( addition to providing good)4 1349( In)1 168(point of view.)2 687 4 720 5442 t
( building blocks used by many researchers in adapting tabu search,)10 3313(provide the essential)2 1007 2 720 5592 t
( is devoted to adaptations of tabu search)7 1982( 4)1 99( Section)1 430(simulated annealing, etc. to the TSP.)5 1809 4 720 5742 t
( this latter algorithm was)4 1306( Although)1 541(to the TSP and to the Lin-Kernighan algorithm.)7 2473 3 720 5892 t
( to the introduction of tabu search, it embodies many of the)11 2901(invented some 15 years prior)4 1419 2 720 6042 t
( many)1 315(same ideas, combining them with search-space truncation to yield what was for)11 4005 2 720 6192 t
(years the ``champion'' TSP heuristic.)4 1806 1 720 6342 t
( remaining sections is whether the approach under con-)8 2663(A key question in each of the)6 1407 2 970 6528 t
( good Lin-Kernighan already is, this)5 1897( how)1 268( Given)1 385(sideration can beat Lin-Kernighan.)3 1770 4 720 6678 t
( between algo-)2 752(means we will occasionally find ourselves forced to make distinctions)9 3568 2 720 6828 t
(rithms based on tour quality differences as small as 0.1)9 2691 1 720 6978 t
12 I f
(%)3411 6978 w
12 R f
( though such differences)3 1189(. Even)1 340 2 3511 6978 t
( admit that they are unlikely to be of practical)9 2321(may be statistically significant, we must)5 1999 2 720 7128 t
( the intellectual appeal of the ``which is best'' question is hard)11 3036(importance. Nevertheless,)1 1284 2 720 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 5 5
%%Page: 6 6
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
6 pagesetup
12 R f
(- 6 -)2 200 1 2780 500 t
( here may suggest what can happen for other problems,)9 2744(to resist, and observations made)4 1576 2 720 870 t
( 5 surveys the)3 721( Section)1 440( in solution quality may well be much wider.)8 2307(where the ranges)2 852 4 720 1020 t
( adaptations of simulated annealing and its variants to the TSP with)11 3421(results for various)2 899 2 720 1170 t
(special emphasis on the results and conclusions of Johnson, Aragon, McGeoch, and)11 4320 1 720 1320 t
( discusses genetic algorithms and the)5 1816( 6)1 96( Section)1 427(Schevon [1996].)1 799 4 720 1470 t
12 I f
(iterated local optimiza-)2 1145 1 3895 1470 t
(tion)720 1620 w
12 R f
( them, in particular the)4 1249(algorithms that have been derived from)5 2093 2 978 1620 t
12 I f
(Iterated Lin-)1 651 1 4389 1620 t
(Kernighan)720 1770 w
12 R f
( net algorithms that)3 979( 7 surveys the wide variety of neural)7 1849(algorithm. Section)1 934 3 1278 1770 t
( conclude in Section 8 with a summary of how the best)11 2651( We)1 227( the TSP.)2 446(have been applied to)3 996 4 720 1920 t
( and what, if anything,)4 1085(current adaptations of the various approaches compare for the TSP,)9 3235 2 720 2070 t
(this means for other problem domains.)5 1858 1 720 2220 t
( the years, and)3 723(A wealth of algorithmic creativity has been applied to the TSP over)11 3347 2 970 2406 t
( hope at the very least to provide the)8 1749(by covering an extensive slice of it as we do here, we)11 2571 2 720 2556 t
(reader with a useful source of more widely applicable ideas.)9 2888 1 720 2706 t
14 B f
( CONSTRUCTION HEURISTICS)2 2081(2. TOUR)1 580 2 720 3036 t
12 R f
( key parameters: its running time)5 1653(Every TSP heuristic can be evaluated in terms of two)9 2667 2 720 3259 t
( of space limitations, we shall con-)6 1710( Because)1 465( of the tours that it produces.)6 1416(and the quality)2 729 4 720 3409 t
( on the most important)4 1103(centrate here)1 618 2 720 3559 t
12 I f
(undominated)2474 3559 w
12 R f
(heuristics, where a heuristic is undomi-)5 1906 1 3134 3559 t
( Further-)1 464( quickly.)1 431(nated if no competing heuristic both finds better tours and runs more)11 3425 3 720 3709 t
(more, we shall limit our main attention to just four of these, omitting heuristics that only)15 4320 1 720 3859 t
( four tour con-)3 718( The)1 253( such as 2-dimensional ones.)4 1407(work for particular classes of instances,)5 1942 4 720 4009 t
( Greedy, Clarke-Wright, and)3 1394(struction heuristics we cover in detail are Nearest Neighbor,)8 2926 2 720 4159 t
( significance in the context of local search.)7 2147( of these has a particular)5 1241(Christofides. Each)1 932 3 720 4309 t
( three provide plausible mechanisms for generating starting tours in a local)11 3884(The first)1 436 2 720 4459 t
( be learned by evaluating them in this con-)8 2114(search procedure, and interesting lessons can)5 2206 2 720 4609 t
( fourth represents in a sense the best that tour construction heuristics can cur-)13 3853(text. The)1 467 2 720 4759 t
( shall allude briefly to several other tour)7 1956(rently do, and so it is a valuable benchmark. We)9 2364 2 720 4909 t
( in the full picture are referred to more)8 2049(construction heuristics, but readers interested)4 2271 2 720 5059 t
(extensive studies such as those of Bentley [1990a,1992], Reinelt [1994], J)10 3605 1 720 5209 t
(. .)1 54 1 4325 5137 t
(unger, Reinelt,)1 715 1 4325 5209 t
(and Rinaldi [1994], and Johnson, Bentley, McGeoch, and Rothberg [1996].)9 3621 1 720 5359 t
( the general complexity-theoretic limi-)4 1883(We begin in Section 2.1 with a discussion of)8 2187 2 970 5545 t
( 2.2 then presents brief descriptions of our key)8 2281( Section)1 428(tations imposed on all heuristics.)4 1611 3 720 5695 t
( from)1 267(tour construction heuristics and summarizes what is known about their performance)10 4053 2 720 5845 t
( methodological issues involved)3 1551( 2.3 discusses the key)4 1046( Section)1 423(a theoretical point of view.)4 1300 4 720 5995 t
( particular, we discuss the)4 1257( In)1 163( view.)1 296(in evaluating heuristics from an experimental point of)7 2604 4 720 6145 t
( classes we use for)4 925(method we use for measuring tour quality and the particular instance)10 3395 2 720 6295 t
( 2.4 describes some of the key implementa-)7 2174( Section)1 433(our primary experimental testbeds.)3 1713 3 720 6445 t
( heuristics run quickly on instances such as those in our)10 2772(tion details needed to make the)5 1548 2 720 6595 t
( the specific results obtained by Johnson, Bentley,)7 2443( 2.5 then summarizes)3 1034(testbeds. Section)1 843 3 720 6745 t
(McGeoch, and Rothberg [1996] for the heuristics of Section 2.2.)9 3102 1 720 6895 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 86 536 764
%%EndPage: 6 6
%%Page: 7 7
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
7 pagesetup
12 R f
(- 7 -)2 200 1 2780 500 t
14 B f
( Results)1 471(2.1. Theoretical)1 964 2 720 870 t
12 R f
( the behavior of)3 772(Two fundamental complexity-theoretic results constrain)4 2715 2 720 1093 t
12 I f
(any)4242 1093 w
12 R f
(heuristic for)1 590 1 4450 1093 t
( a given heuristic)3 864( For)1 240(the TSP.)1 427 3 720 1243 t
12 I f
(A)2294 1243 w
12 R f
(and TSP instance)2 860 1 2410 1243 t
12 I f
(I)3313 1243 w
12 R f
(, let)1 194 1 3353 1243 t
12 I f
(A)3590 1243 w
12 R f
(\()3673 1243 w
12 I f
(I)3723 1243 w
12 R f
( length of the)3 674(\) denote the)2 593 2 3773 1243 t
(tour produced by)2 830 1 720 1393 t
12 I f
(A)1585 1393 w
12 R f
( \()1 50(and let OPT)2 590 2 1693 1393 t
12 I f
(I)2343 1393 w
12 R f
( first result)2 535( The)1 252( tour.)1 260(\) denote the length of an optimal)6 1600 4 2393 1393 t
(concerns the best performance guarantee that is possible when there are no restrictions on)13 4320 1 720 1543 t
(the types of instances considered.)4 1612 1 720 1693 t
12 B f
(Theorem A [Sahni & Gonzalez, 1976].)5 2031 1 970 1879 t
12 R f
(Assuming P)1 602 1 3077 1879 t
12 S f
(\271)3726 1879 w
12 R f
(NP, no polynomial-time)2 1201 1 3839 1879 t
(TSP heuristic can guarantee)3 1398 1 720 2029 t
12 I f
(A)2166 2029 w
12 R f
(\()2249 2029 w
12 I f
(I)2299 2029 w
12 R f
(\))2349 2029 w
12 I f
(/)2399 2029 w
12 R f
(OPT \()1 276 1 2443 2029 t
12 I f
(I)2729 2029 w
12 R f
(\))2779 2029 w
12 S f
(\243)2867 2029 w
12 R f
(2)2981 2029 w
9 I f
(p)3048 1981 w
9 R f
(\()3100 1981 w
9 I f
(N)3137 1981 w
9 R f
(\))3204 1981 w
12 R f
(for any fixed polynomial)3 1253 1 3292 2029 t
12 I f
(p)4592 2029 w
12 R f
(and all)1 341 1 4699 2029 t
(instances)720 2179 w
12 I f
(I)1191 2179 w
12 R f
(.)1231 2179 w
( applications impose substantial restrictions on the types of)8 3179(Fortunately, most)1 891 2 970 2365 t
( must obey what is called)5 1244( particular, in most applications distances)5 2023( In)1 166(instances allowed.)1 887 4 720 2515 t
(the)720 2665 w
12 I f
(triangle inequality)1 949 1 952 2665 t
12 R f
( all)1 207( says that for)3 783(. This)1 359 3 1901 2665 t
12 I f
(i)3336 2665 w
12 R f
(,)3380 2665 w
12 I f
(j)3430 2665 w
12 R f
(,)3474 2665 w
12 I f
(k)3514 2665 w
12 R f
(, 1)1 176 1 3567 2665 t
12 S f
(\243)3783 2665 w
12 I f
(i)3889 2665 w
12 R f
(,)3933 2665 w
12 I f
(j)3983 2665 w
12 R f
(,)4027 2665 w
12 I f
(k)4067 2665 w
12 S f
(\243)4160 2665 w
12 I f
(N)4266 2665 w
12 R f
(,)4346 2665 w
12 I f
(d)4462 2665 w
12 R f
(\()4532 2665 w
12 I f
(c)4582 2665 w
9 I f
(i)4650 2689 w
12 R f
(,)4695 2665 w
12 I f
(c)4735 2665 w
9 I f
(j)4803 2689 w
12 R f
(\))4848 2665 w
12 S f
(\243)4974 2665 w
12 I f
(d)720 2815 w
12 R f
(\()790 2815 w
12 I f
(c)840 2815 w
9 I f
(i)908 2839 w
12 R f
(,)953 2815 w
12 I f
(c)993 2815 w
9 I f
(k)1061 2839 w
12 R f
(\))1121 2815 w
12 S f
(+)1221 2815 w
12 I f
(d)1337 2815 w
12 R f
(\()1407 2815 w
12 I f
(c)1457 2815 w
9 I f
(k)1525 2839 w
12 R f
(,)1585 2815 w
12 I f
(c)1625 2815 w
9 I f
(j)1693 2839 w
12 R f
( always the shortest route.)4 1256(\), i.e., the direct path between two cities is)8 2046 2 1738 2815 t
(\(Even in real-world situations where the shortest physical route from city)10 3660 1 720 2965 t
12 I f
(c)4424 2965 w
9 I f
(i)4492 2989 w
12 R f
(to city)1 320 1 4572 2965 t
12 I f
(c)4937 2965 w
9 I f
(j)5005 2989 w
12 R f
(must pass through city)3 1153 1 720 3115 t
12 I f
(c)1925 3115 w
9 I f
(k)1993 3139 w
12 R f
(, we typically ignore such details in formulating the corre-)9 2997 1 2043 3115 t
(sponding TSP instance and simply take)5 1979 1 720 3265 t
12 I f
(d)2746 3265 w
12 R f
(\()2816 3265 w
12 I f
(c)2866 3265 w
9 I f
(i)2934 3289 w
12 R f
(,)2979 3265 w
12 I f
(c)3019 3265 w
9 I f
(j)3087 3289 w
12 R f
(\) to be the length of the shortest path)8 1908 1 3132 3265 t
(between)720 3415 w
12 I f
(c)1171 3415 w
9 I f
(i)1239 3439 w
12 R f
(and)1326 3415 w
12 I f
(c)1551 3415 w
9 I f
(j)1619 3439 w
12 R f
( avoids all other)3 835(, not the length of the shortest physical route that)9 2551 2 1654 3415 t
( the)1 211( much of the theoretical work on TSP heuristics is predicated on)11 3451(cities.\) Thus)1 658 3 720 3565 t
( this case the result of Sahni and Gonza-)8 1967( In)1 164( the triangle inequality holds.)4 1424(assumption that)1 765 4 720 3715 t
( no longer applies, and the only known constraint is the following much more)13 3824(lez [1976])1 496 2 720 3865 t
( the deep connection between)4 1531(limited \(and recent\) one, derived as a consequence of)8 2789 2 720 4015 t
( of probabilistically checkable)3 1531(approximation and the characterization of NP in terms)7 2789 2 720 4165 t
(proof systems.)1 702 1 720 4315 t
12 B f
( & Szegedy, 1992].)3 985(Theorem B [Arora, Lund, Motwani, Sudan,)5 2302 2 970 4501 t
12 R f
(Assuming P)1 599 1 4331 4501 t
12 S f
(\271)4974 4501 w
12 R f
(NP, there exists an)3 976 1 720 4651 t
12 S f
(e >)1 169 1 1750 4651 t
12 R f
(0 such that no polynomial-time TSP heuristic can guarantee)8 3071 1 1969 4651 t
12 I f
(A)720 4801 w
12 R f
(\()803 4801 w
12 I f
(I)853 4801 w
12 R f
(\))903 4801 w
12 I f
(/)953 4801 w
12 R f
(OPT \()1 276 1 997 4801 t
12 I f
(I)1283 4801 w
12 R f
(\))1333 4801 w
12 S f
(\243)1403 4801 w
12 R f
(1)1499 4801 w
12 S f
(+ e)1 139 1 1579 4801 t
12 R f
(for all instances)2 762 1 1748 4801 t
12 I f
(I)2540 4801 w
12 R f
(satisfying the triangle inequality.)3 1586 1 2610 4801 t
( imposes only a small limitation on algorithmic per-)8 2592(Compared to Theorem A, this)4 1478 2 970 4987 t
(formance, especially since current proof techniques do not seem capable of showing that)12 4320 1 720 5137 t
(the)720 5287 w
12 S f
(e)906 5287 w
12 R f
( as 1)2 240(in the theorem is even as large)6 1516 2 998 5287 t
12 I f
(/)2764 5287 w
12 R f
( natural theoretical question is thus:)5 1766(100. The)1 466 2 2808 5287 t
( what kinds of performance guarantees can actually be)8 2685(Assuming the triangle inequality,)3 1635 2 720 5437 t
( four tour construction algorithms we)5 1839( The)1 255( heuristics?)1 554(provided by polynomial-time TSP)3 1672 4 720 5587 t
( three all provide a substan-)5 1397( first)1 239( The)1 260(now discuss provide a wide range of guarantees.)7 2424 4 720 5737 t
( fourth)1 329( The)1 251( inequality.)1 547(tially better guarantee than would be possible without the triangle)9 3193 4 720 5887 t
( with respect to this worst-case)5 1486(provides a far better guarantee and is the current champion)9 2834 2 720 6037 t
(measure.)720 6187 w
14 B f
( Important Tour Construction Algorithms)4 2526(2.2. Four)1 575 2 720 6517 t
14 I f
(Nearest Neighbor)1 1002 1 720 6845 t
12 R f
( TSP is the famous)4 925(Perhaps the most natural heuristic for the)6 1996 2 720 7068 t
12 I f
(Nearest Neighbor)1 862 1 3675 7068 t
12 R f
(algorithm)4571 7068 w
( the traveler whose rule of thumb is always to go next)11 2580( this algorithm one mimics)4 1297(\(NN\). In)1 443 3 720 7218 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 53 536 764
%%EndPage: 7 7
%%Page: 8 8
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
8 pagesetup
12 R f
(- 8 -)2 200 1 2780 500 t
( construct an ordering)3 1099( We)1 242(to the nearest as-yet-unvisited location.)4 1952 3 720 870 t
12 I f
(c)4060 870 w
9 S f
(p)4128 894 w
9 R f
(\( 1 \))2 119 1 4185 894 t
12 R f
(,)4324 870 w
(. . .)2 150 1 4394 840 t
(,)4584 870 w
12 I f
(c)4624 870 w
9 S f
(p)4692 894 w
9 R f
(\()4749 894 w
9 I f
(N)4786 894 w
9 R f
(\))4853 894 w
12 R f
(of)4940 870 w
( initial city)2 526(the cities, with the)3 889 2 720 1020 t
12 I f
(c)2166 1020 w
9 S f
(p)2234 1044 w
9 R f
(\( 1 \))2 119 1 2291 1044 t
12 R f
(chosen arbitrarily and in general)4 1559 1 2451 1020 t
12 I f
(c)4041 1020 w
9 S f
(p)4109 1044 w
9 R f
(\()4166 1044 w
9 I f
(i)4203 1044 w
9 S f
(+)4250 1044 w
9 R f
(1 \))1 82 1 4315 1044 t
12 R f
(chosen to be)2 602 1 4438 1020 t
(the city)1 369 1 720 1170 t
12 I f
(c)1130 1170 w
9 I f
(k)1198 1194 w
12 R f
( {)1 100(that minimizes)1 725 2 1289 1170 t
12 I f
(d)2114 1170 w
12 R f
(\()2184 1170 w
12 I f
(c)2234 1170 w
9 S f
(p)2302 1194 w
9 R f
(\()2359 1194 w
9 I f
(i)2396 1194 w
9 R f
(\))2428 1194 w
12 R f
(,)2478 1170 w
12 I f
(c)2518 1170 w
9 I f
(k)2586 1194 w
12 R f
(\) :)1 94 1 2646 1170 t
12 I f
(k)2780 1170 w
12 S f
( p)1 122(= /)1 50 2 2873 1170 t
12 R f
(\()3055 1170 w
12 I f
(j)3125 1170 w
12 R f
( 1)1 100(\) ,)1 90 2 3169 1170 t
12 S f
(\243)3399 1170 w
12 I f
(j)3515 1170 w
12 S f
(\243)3589 1170 w
12 I f
(i)3695 1170 w
12 R f
( corresponding tour)2 965(}. The)1 346 2 3729 1170 t
(traverses the cities in the constructed order, returning to)8 2682 1 720 1320 t
12 I f
(c)3432 1320 w
9 S f
(p)3500 1344 w
9 R f
(\( 1 \))2 119 1 3557 1344 t
12 R f
(after visiting city)2 824 1 3716 1320 t
12 I f
(c)4570 1320 w
9 S f
(p)4638 1344 w
9 R f
(\()4695 1344 w
9 I f
(N)4732 1344 w
9 R f
(\))4799 1344 w
12 R f
(.)4839 1320 w
(The running time for NN as described is)7 1938 1 970 1506 t
12 S f
(Q)2938 1506 w
12 R f
(\()3037 1506 w
12 I f
(N)3087 1506 w
9 R f
(2)3182 1458 w
12 R f
( to instances)2 597( we restrict attention)3 986(\). If)1 210 3 3247 1506 t
( than the general upper)4 1184(satisfying the triangle inequality, NN does substantially better)7 3136 2 720 1656 t
( although it is still far worse than the limit provided by Theorem B.)13 3275(bound of Theorem A,)3 1045 2 720 1806 t
( \()1 50(In particular, we are guaranteed that NN)6 1959 2 720 1956 t
12 I f
(I)2739 1956 w
12 R f
(\))2789 1956 w
12 I f
(/)2839 1956 w
12 R f
(OPT \()1 276 1 2883 1956 t
12 I f
(I)3169 1956 w
12 R f
(\))3219 1956 w
12 S f
(\243)3292 1956 w
12 R f
(\( 0. 5 \) \()4 310 1 3391 1956 t
12 S f
(\351)3711 1956 w
12 R f
(log)3781 1956 w
9 R f
(2)3950 1980 w
12 I f
(N)4015 1956 w
12 S f
(\371 +)1 132 1 4105 1956 t
12 R f
( substan-)1 434( No)1 209(1 \).)1 140 3 4257 1956 t
( instances for which the ratio)5 1497(tially better guarantee is possible, however, as there are)8 2823 2 720 2106 t
(grows as)1 423 1 720 2256 t
12 S f
(Q)1173 2256 w
12 R f
(\( log)1 204 1 1272 2256 t
12 I f
(N)1486 2256 w
12 R f
(\) [Rosenkrantz, Stearns, & Lewis, 1977].)5 1971 1 1576 2256 t
14 I f
(Greedy)720 2586 w
12 R f
(Some authors use the name)4 1375 1 720 2809 t
12 I f
(Greedy)2140 2809 w
12 R f
(for Nearest Neighbor, but it is more appropriately)7 2502 1 2538 2809 t
( In)1 166( ``greedy algorithm'' of matroid theory.)5 1947(reserved for the following special case of the)7 2207 3 720 2959 t
( and)1 220(this heuristic, we view an instance as a complete graph with the cities as vertices)14 4100 2 720 3109 t
(with an edge of length)4 1098 1 720 3259 t
12 I f
(d)1854 3259 w
12 R f
(\()1924 3259 w
12 I f
(c)1974 3259 w
9 I f
(i)2042 3283 w
12 R f
(,)2087 3259 w
12 I f
(c)2127 3259 w
9 I f
(j)2195 3283 w
12 R f
(\) between each pair {)4 1043 1 2240 3259 t
12 I f
(c)3283 3259 w
9 I f
(i)3351 3283 w
12 R f
(,)3396 3259 w
12 I f
(c)3436 3259 w
9 I f
(j)3504 3283 w
12 R f
( tour is then sim-)4 837( A)1 151(} of cities.)2 513 3 3539 3259 t
( edges in which every)4 1054(ply a Hamiltonian cycle in this graph, i.e., a connected collection of)11 3266 2 720 3409 t
( shortest)1 415( build up this cycle one edge at a time, starting with the)12 2795( We)1 237(city has degree 2.)3 873 4 720 3559 t
( where an edge is)4 932(edge, and repeatedly adding the shortest remaining available edge,)8 3388 2 720 3709 t
12 I f
(available)720 3859 w
12 R f
( the tour and if adding it would not create a degree-3 vertex or a)14 3068(if it is not yet in)5 773 2 1199 3859 t
(cycle of length less than)4 1250 1 720 4009 t
12 I f
(N)2022 4009 w
12 R f
( partial tours typically con-)4 1396( view of the intermediate)4 1290(. \(In)1 252 3 2102 4009 t
( the)1 236(structed by this heuristic, it is called)6 2097 2 720 4159 t
12 I f
(multi-fragment)3142 4159 w
12 R f
(heuristic by Bentley)2 1087 1 3953 4159 t
([1990a,1992]\).)720 4309 w
(The Greedy heuristic can be implemented to run in time)9 2829 1 970 4495 t
12 S f
(Q)3844 4495 w
12 R f
(\()3943 4495 w
12 I f
(N)3993 4495 w
9 R f
(2)4088 4447 w
12 R f
(log)4153 4495 w
12 I f
(N)4317 4495 w
12 R f
(\) and is thus)3 633 1 4407 4495 t
( quality may be some-)4 1089( the other hand, its worst-case tour)6 1695( On)1 212(somewhat slower than NN.)3 1324 4 720 4645 t
( Greedy\()1 426( with NN, it can be shown that)7 1488( As)1 196(what better.)1 570 4 720 4795 t
12 I f
(I)3410 4795 w
12 R f
(\))3460 4795 w
12 I f
(/)3510 4795 w
12 R f
(OPT \()1 276 1 3554 4795 t
12 I f
(I)3840 4795 w
12 R f
(\))3890 4795 w
12 S f
(\243)3964 4795 w
12 R f
(\( 0. 5 \) \()4 310 1 4064 4795 t
12 S f
(\351)4384 4795 w
12 R f
(log)4454 4795 w
9 R f
(2)4623 4819 w
12 I f
(N)4688 4795 w
12 S f
(\371 +)1 132 1 4778 4795 t
12 R f
(1 \))1 110 1 4930 4795 t
(for all instances)2 792 1 720 4945 t
12 I f
(I)1557 4945 w
12 R f
( 1984], but the worst)4 1054(obeying the triangle inequality [Ong & Moore,)6 2344 2 1642 4945 t
( log)1 164(examples known for Greedy only make the ratio grow as \()10 2940 2 720 5095 t
12 I f
(N)3834 5095 w
12 R f
(\))3924 5095 w
12 I f
(/)3974 5095 w
12 R f
(\( 3 log log)3 438 1 4018 5095 t
12 I f
(N)4496 5095 w
12 R f
(\) [Frieze,)1 454 1 4586 5095 t
(1979].)720 5245 w
14 I f
(Clarke-Wright)720 5575 w
12 R f
(The)720 5798 w
12 I f
(Clarke-Wright savings heuristic)2 1561 1 944 5798 t
12 R f
( simply CW for short\) is derived)6 1618(\(Clarke-Wright or)1 879 2 2543 5798 t
( terms)1 298( In)1 160(from a more general vehicle routing algorithm due to Clarke and Wright [1964].)12 3862 3 720 5948 t
( in which an arbitrarily chosen city is the)8 1996(of the TSP, we start with a pseudo-tour)7 1903 2 720 6098 t
12 I f
(hub)4653 6098 w
12 R f
(and)4867 6098 w
( other words, we start)4 1061( \(In)1 206( returns to the hub after each visit to another city.)10 2428(the salesman)1 625 4 720 6248 t
(with a multigraph in which every non-hub vertex is connected by two edges to the hub\).)15 4320 1 720 6398 t
( pair of non-hub cities, let the)6 1432(For each)1 419 2 720 6548 t
12 I f
(savings)2603 6548 w
12 R f
(be the amount by which the tour would be)8 2044 1 2996 6548 t
( We)1 226(shortened if the salesman went directly from one city to the other, bypassing the hub.)14 4094 2 720 6698 t
( go through the non-hub city pairs)6 1642( We)1 228(now proceed analogously to the Greedy algorithm.)6 2450 3 720 6848 t
( performing the bypass so long as it does not create a)11 2624(in non-increasing order of savings,)4 1696 2 720 6998 t
( two)1 211(cycle of non-hub vertices or cause a non-hub vertex to become adjacent to more than)14 4109 2 720 7148 t
( only two non-hub)3 959( construction process terminates when)4 1932( The)1 270(other non-hub vertices.)2 1159 4 720 7298 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 8 8
%%Page: 9 9
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
9 pagesetup
12 R f
(- 9 -)2 200 1 2780 500 t
(cities remain connected to the hub, in which case we have a true tour.)13 3338 1 720 870 t
( to run in time)4 763(As with Greedy, this algorithm can be implemented)7 2624 2 970 1056 t
12 S f
(Q)4407 1056 w
12 R f
(\()4506 1056 w
12 I f
(N)4556 1056 w
9 R f
(2)4651 1008 w
12 R f
(log)4716 1056 w
12 I f
(N)4880 1056 w
12 R f
(\).)4970 1056 w
( \(assuming the triangle inequality\) is)5 1858(The best performance guarantee currently known)5 2462 2 720 1206 t
(CW\()720 1356 w
12 I f
(I)963 1356 w
12 R f
(\))1013 1356 w
12 I f
(/)1063 1356 w
12 R f
(OPT \()1 276 1 1107 1356 t
12 I f
(I)1393 1356 w
12 R f
(\))1443 1356 w
12 S f
(\243 \351)1 157 1 1514 1356 t
12 R f
(log)1681 1356 w
9 R f
(2)1850 1380 w
12 I f
(N)1915 1356 w
12 S f
(\371 +)1 132 1 2005 1356 t
12 R f
( Moore,)1 382(1 \(a factor of 2 higher than that for Greedy\) [Ong &)11 2501 2 2157 1356 t
( log)1 164( same \()2 413(1984], but the worst examples known yield the)7 2494 3 720 1506 t
12 I f
(N)3801 1506 w
12 R f
(\))3891 1506 w
12 I f
(/)3941 1506 w
12 R f
(\( 3 log log)3 438 1 3985 1506 t
12 I f
(N)4463 1506 w
12 R f
(\) ratio as)2 487 1 4553 1506 t
(obtained for Greedy [Frieze, 1979].)4 1706 1 720 1656 t
14 I f
(Christofides)720 1986 w
12 R f
( that grow with)3 746(The previous three algorithms all have worst-case ratios)7 2722 2 720 2209 t
12 I f
(N)4223 2209 w
12 R f
(even when the)2 702 1 4338 2209 t
( rule out much better performance, how-)6 2010( B does not)3 580( Theorem)1 505(triangle inequality holds.)2 1225 4 720 2359 t
( observed by)2 647( As)1 210( class of algorithms do perform much better.)7 2257(ever, and in fact a large)5 1206 4 720 2509 t
( and Lewis [1977], there are at least three simple polynomial-time)10 3266(Rosenkrantz, Stearns,)1 1054 2 720 2659 t
(tour generation heuristics,)2 1255 1 720 2809 t
12 I f
(Double Minimum Spanning Tree)3 1583 1 2007 2809 t
12 R f
(,)3590 2809 w
12 I f
(Nearest Insertion)1 841 1 3652 2809 t
12 R f
(, and)1 235 1 4493 2809 t
12 I f
(Near-)4760 2809 w
(est Addition)1 601 1 720 2959 t
12 R f
( is, they)2 420( That)1 301( inequality.)1 563(, that have worst-case ratio 2 under the triangle)8 2435 4 1321 2959 t
(guarantee)720 3109 w
12 I f
(A)1220 3109 w
12 R f
(\()1303 3109 w
12 I f
(I)1353 3109 w
12 R f
(\))1403 3109 w
12 I f
(/)1453 3109 w
12 R f
(OPT \()1 276 1 1497 3109 t
12 I f
(I)1783 3109 w
12 R f
(\))1833 3109 w
12 S f
(\243)1907 3109 w
12 R f
( exist instances with arbitrar-)4 1417(2 under that restriction, and there)5 1616 2 2007 3109 t
(ily large values of)3 868 1 720 3259 t
12 I f
(N)1619 3259 w
12 R f
( do not dis-)3 548( We)1 227(that show that this upper bound cannot be improved.)8 2535 3 1730 3259 t
( detail since they are all dominated in practice by NN, Greedy, and)12 3220(cuss these heuristics in)3 1100 2 720 3409 t
(CW, despite the fact that their worst-case performance is so much better.)11 3501 1 720 3559 t
( constant worst-case performance ratio is not)6 2210(One tour construction heuristic with a)5 1860 2 970 3745 t
( current cham-)2 716( is the algorithm of Christofides [1976], the)7 2156( This)1 283(so dominated, however.)2 1165 4 720 3895 t
( of just 3)3 452(pion as far as performance guarantee is concerned, having a worst-case ratio)11 3754 2 720 4045 t
12 I f
(/)4936 4045 w
12 R f
(2)4980 4045 w
( even for Euclidean instances)4 1515( bound is tight,)3 807( \(This)1 342(assuming the triangle inequality.)3 1656 4 720 4195 t
( First,)1 314( as follows.)2 555( Christofides heuristic proceeds)3 1523( The)1 247( & Nemhauser, 1978].\))3 1113( ejols)1 183([Cornu \302)1 385 7 720 4345 t
(we construct a minimum spanning tree)5 1872 1 720 4495 t
12 I f
(T)2623 4495 w
12 R f
( that the length of such)5 1099( Note)1 293( set of cities.)3 609(for the)1 318 4 2721 4495 t
(a tree can be no longer than OPT\()7 1636 1 720 4645 t
12 I f
(I)2366 4645 w
12 R f
( deleting an edge from an optimal tour yields a)9 2275(\), since)1 349 2 2416 4645 t
( compute a minimum-length matching)4 1878( we)1 178( Next,)1 332(spanning tree.)1 683 4 720 4795 t
12 I f
(M)3829 4795 w
12 R f
(on the vertices of odd)4 1073 1 3967 4795 t
(degree in)1 448 1 720 4945 t
12 I f
(T)1203 4945 w
12 R f
( simple argument that assuming the triangle inequality)7 2661( can be shown by a)5 940(. It)1 169 3 1270 4945 t
(this matching will be no longer than OPT\()7 2104 1 720 5095 t
12 I f
(I)2834 5095 w
12 R f
(\))2884 5095 w
12 I f
(/)2934 5095 w
12 R f
(2. Combining)1 702 1 2978 5095 t
12 I f
(M)3719 5095 w
12 R f
(with)3858 5095 w
12 I f
(T)4111 5095 w
12 R f
(we obtain a con-)3 823 1 4217 5095 t
( graph must contain an Euler)5 1440( This)1 285( degree.)1 390(nected graph in which every vertex has even)7 2205 4 720 5245 t
( through each edge exactly once, and such a cycle can be eas-)12 2965(tour, i.e., a cycle that passes)5 1355 2 720 5395 t
( be constructed by)3 937( traveling salesman tour of no greater length can then)9 2731( A)1 165(ily found.)1 487 4 720 5545 t
( \(A)1 186(traversing this cycle while taking shortcuts to avoid multiply visited vertices.)10 3709 2 720 5695 t
12 I f
(shortcut)4645 5695 w
12 R f
( the triangle)2 611( By)1 218( path between two cities by a direct edge between the two.)11 2998(replaces a)1 493 4 720 5845 t
(inequality the direct route cannot be longer than the path it replaces.\))11 3312 1 720 5995 t
( Christofides algorithm provide a better worst-case guarantee than)8 3210(Not only does the)3 860 2 970 6181 t
( tour construction heuristic, it also tends to find better tours in)11 3032(any other currently known)3 1288 2 720 6331 t
( time cost is sub-)4 853( running)1 412( Its)1 189(practice, assuming care is taken in the choice of shortcuts.)9 2866 4 720 6481 t
( those for Nearest Neighbor, Greedy, and Clarke-Wright.)7 2809(stantial, however, compared to)3 1511 2 720 6631 t
( primarily because the best algorithms currently available for its matching step)11 3978(This is)1 342 2 720 6781 t
(take time)1 452 1 720 6931 t
12 S f
(Q)1209 6931 w
12 R f
(\()1308 6931 w
12 I f
(N)1358 6931 w
9 R f
(3)1453 6883 w
12 R f
( the)1 183(\) [Edmonds,1965], [Gabow, 1973], [Lawler, 1976], whereas none of)8 3339 2 1518 6931 t
(other three algorithms takes more than)5 1854 1 720 7081 t
12 I f
(O)2604 7081 w
12 R f
(\()2700 7081 w
12 I f
(N)2750 7081 w
9 R f
(2)2845 7033 w
12 R f
(log)2910 7081 w
12 I f
(N)3074 7081 w
12 R f
( theory this running time gap)5 1399( In)1 161(\) time.)1 316 3 3164 7081 t
( modification of the Christofides algorithm with the same)8 2857( A)1 158(can be reduced somewhat:)3 1305 3 720 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 9 9
%%Page: 10 10
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
10 pagesetup
12 R f
(- 10 -)2 260 1 2750 500 t
(worst-case guarantee and an)3 1388 1 720 870 t
12 I f
(O)2149 870 w
12 R f
(\()2245 870 w
12 I f
(N)2295 870 w
9 R f
(2. 5)1 120 1 2390 822 t
12 R f
( by using a scaling-)4 983(\) running time can be obtained)5 1527 2 2530 870 t
( algorithm and halting once the matching is guaranteed to be no longer)12 3555(based matching)1 765 2 720 1020 t
(than 1)1 298 1 720 1170 t
12 S f
(+)1038 1170 w
12 R f
(\( 1)1 110 1 1124 1170 t
12 I f
(/ N)1 124 1 1244 1170 t
12 R f
( far as we know, however, this)6 1477( As)1 195( 1991].)1 342(\) times optimal [Gabow & Tarjan,)5 1648 4 1378 1170 t
( competition from local)3 1170(approach has never been implemented, and as we shall see, the)10 3150 2 720 1320 t
( strong that the programming effort needed to do so)9 2706(search algorithms is sufficiently)3 1614 2 720 1470 t
(would not be justified.)3 1083 1 720 1620 t
14 B f
( Methodology)1 820(2.3. Experimental)1 1096 2 720 1950 t
14 I f
(The Held-Karp Lower Bound)3 1646 1 720 2278 t
12 R f
( often not allowed the)4 1104(When evaluating the empirical performance of heuristics, we are)8 3216 2 720 2501 t
( we did in the above theoretical)6 1520(luxury of comparing to the precise optimal tour length, as)9 2800 2 720 2651 t
(results, since for large instances we typically do not)8 2544 1 720 2801 t
12 I f
(know)3302 2801 w
12 R f
( a)1 91( As)1 201(the optimal tour length.)3 1155 3 3593 2801 t
( become the practice to compare)5 1717(consequence, when studying large instances it has)6 2603 2 720 2951 t
( optimal tour)2 671(heuristic results to something we can compute: the lower bound on the)11 3649 2 720 3101 t
(length due to Held and Karp [1970,1971].)6 2013 1 720 3251 t
( standard linear programming relaxation of the TSP.)7 2518(This bound is the solution to the)6 1552 2 970 3437 t
( moderate size it can be computed exactly using linear programming,)10 3512(For instances of)2 808 2 720 3587 t
( one is confronted with a non-trivial computation:)7 2424(although if one goes about this directly)6 1896 2 720 3737 t
( in)1 139(the number of constraints in the linear program is exponential)9 3114 2 720 3887 t
12 I f
(N)4018 3887 w
12 R f
( more practical)2 751(. A)1 191 2 4098 3887 t
( a sequence of restricted linear programs \(LP's\), each involving only)10 3350(approach is to solve)3 970 2 720 4037 t
( con-)1 256(a subset of the constraints, and to use a separation subroutine to identify violated)13 4064 2 720 4187 t
( approach has been implemented)4 1634( This)1 289( be included in the next LP.)6 1415(straints that need to)3 982 4 720 4337 t
( and Cook [1994] using the)5 1396( atal,)1 159( \302)1 45( [1994] and by Applegate, Bixby, Chv)6 1942(both by Reinelt)2 778 5 720 4487 t
( for the bound have been)5 1294( values)1 357( Exact)1 353(Simplex method to solve the linear programs.)6 2316 4 720 4637 t
( instances as large as 33,810 cities [Johnson, McGeoch, & Roth-)10 3110(computed in this way for)4 1210 2 720 4787 t
( larger instances,)2 831( For)1 237( testbeds up to this size.)5 1194(berg, 1996], including all instances in our)6 2058 4 720 4937 t
( the lower)2 520(we settle for an approximation to the Held-Karp bound \(a lower bound on)12 3800 2 720 5087 t
( Held-Karp papers)2 923(bound\) computed by an iterative technique proposed in the original)9 3397 2 720 5237 t
( up by a variety of algorithmic tricks [Helbig-Hansen & Krarup, 1974], [Held,)12 3885(and sped)1 435 2 720 5387 t
( expect, based)2 704( We)1 240( Rothberg, 1996].)2 875(Wolfe, & Crowder, 1974], [Johnson, McGeoch, &)6 2501 4 720 5537 t
( known, that for those)4 1191(on results for instances where the true Held-Karp bound is)9 3129 2 720 5687 t
( must rely on this approximation, it is within 0.01)9 2395(instances in our test beds where we)6 1694 2 720 5837 t
12 I f
(%)4809 5837 w
12 R f
(or)4940 5837 w
( Held-Karp bound itself appears to)5 1724( is more important, the)4 1146( What)1 333(less of the true bound.)4 1117 4 720 5987 t
( a worst-case)2 632( From)1 324( optimal tour length.)3 993(provide a consistently good approximation to the)6 2371 4 720 6137 t
( 2)1 70( the Held-Karp bound can never be smaller than \()9 2493(point of view,)2 699 3 720 6287 t
12 I f
(/)3992 6287 w
12 R f
(3 \)OPT\()1 376 1 4036 6287 t
12 I f
(I)4422 6287 w
12 R f
(\), assuming)1 568 1 4472 6287 t
( practice, it is)3 676( In)1 169( Williamson, 1990].)2 981(the triangle inequality [Wolsey, 1980], [Shmoys &)6 2494 4 720 6437 t
( shall)1 267( We)1 235( does not hold.)3 735(typically far better than this, even when the triangle inequality)9 3083 4 720 6587 t
(see just how much better in the next section, where we discuss our main testbeds.)14 3912 1 720 6737 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 101 536 764
%%EndPage: 10 10
%%Page: 11 11
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
11 pagesetup
12 R f
(- 11 -)2 260 1 2750 500 t
14 I f
(Standard Test Instances)2 1347 1 720 870 t
12 R f
( most part be)3 670(When we talk about experimental results in this chapter, we shall for the)12 3650 2 720 1093 t
( on instances that not only obey the triangle inequality but also are)12 3230(talking about behavior)2 1090 2 720 1243 t
( plane)1 301(geometric in nature, typically ones in which the cities correspond to points in the)13 4019 2 720 1393 t
( under a standard metric such as the Euclidean or rectilinear)10 2966(and distances are computed)3 1354 2 720 1543 t
( recent)1 334( of the applications of the symmetric TSP are of this sort, and most)13 3352(norm. Many)1 634 3 720 1693 t
( such instances.)2 765(published studies have concentrated on them, using two main sources of)10 3555 2 720 1843 t
( instances, where the cities have)5 1601(The first source consists simply of randomly generated)7 2719 2 720 1993 t
(their locations chosen uniformly in the unit square, with distances computed under the)12 4320 1 720 2143 t
( called)1 321( second source is a database of instances)7 1965( The)1 249(Euclidean metric.)1 851 4 720 2293 t
12 C f
(TSPLIB)4140 2293 w
12 R f
(collected)4606 2293 w
(by Reinelt [1991] and available via anonymous ftp from)8 3064 1 720 2443 t
12 C f
(softlib.rice.edu)3858 2443 w
12 R f
(.)5010 2443 w
12 C f
(TSPLIB)720 2593 w
12 R f
( as many as 85,900 cities, including many from printed)9 2721(contains instances with)2 1130 2 1189 2593 t
( real)1 233(circuit board and VLSI applications, as well as geographical instances based on)11 4087 2 720 2743 t
( exam-)1 340( For)1 237( are surprisingly consistent between the two instance sources.)8 3034(cities. Results)1 709 4 720 2893 t
( 24)1 155(ple, NN averages less than)4 1300 2 720 3043 t
12 I f
(%)2175 3043 w
12 R f
(above the Held-Karp lower bound on random Euclidean)7 2730 1 2310 3043 t
(instances with)1 701 1 720 3193 t
12 I f
(N)1467 3193 w
12 R f
( selection of 15 of the)5 1130(ranging from 10,000 to 1,000,000, while for a)7 2317 2 1593 3193 t
(largest 2-dimensional instances from Version 1.2 of)6 2657 1 720 3343 t
12 C f
(TSPLIB)3434 3343 w
12 R f
(\(including all 11 with)3 1118 1 3922 3343 t
12 I f
(N)720 3493 w
12 S f
(>)850 3493 w
12 R f
( NN averaged roughly 26)4 1218(3 , 000\),)2 360 2 966 3493 t
12 I f
(%)2544 3493 w
12 R f
(above.)2674 3493 w
(We should mention that many papers covering geometric instances of the above two)12 4070 1 970 3679 t
( deal-)1 271( Researchers)1 640( use the Held-Karp bound as their standard of comparison.)9 2817(types do not)2 592 4 720 3829 t
(ing with)1 408 1 720 3979 t
12 C f
(TSPLIB)1168 3979 w
12 R f
(instances often restrict attention to those for which optimal solutions)9 3400 1 1640 3979 t
( the exact)2 494( Fortunately,)1 662( tour lengths.)2 666(are known, comparing their results to the optimal)7 2498 4 720 4129 t
( to translate from one)4 1045(Held-Karp bounds are known for all of these instances, so it is easy)12 3275 2 720 4279 t
( over all 89 instances in)5 1264( average gap)2 657( The)1 272(sort of comparison to the other.)5 1640 4 720 4429 t
12 C f
(TSPLIB)4608 4429 w
12 R f
(\(solved or unsolved\) is 0.82)4 1355 1 720 4579 t
12 I f
(%)2075 4579 w
12 R f
( with all but two of the gaps being less than 1.76)11 2386(or less,)1 345 2 2209 4579 t
12 I f
(%)4940 4579 w
12 R f
([Johnson, McGeoch, & Rothberg, 1996].)4 1967 1 720 4729 t
( Euclidean instances)2 1001(More difficult to deal with are those papers that study random)10 3069 2 970 4915 t
(and compare their results only to the expected optimal tour length or, more precisely, to)14 4320 1 720 5065 t
( the estimated expected values were correct, the natural varia-)9 3040( if)1 111( Even)1 313(estimates thereof.)1 856 4 720 5215 t
( means that the expected value is not a totally reli-)10 2469(tion between instances of a given size)6 1851 2 720 5365 t
( about 0.7)2 483( \(Adding)1 463( any specific instance.)3 1070(able estimate for the optimal tour length of)7 2077 4 720 5515 t
12 I f
(%)4813 5515 w
12 R f
(to)4946 5515 w
( a much more reliable estimate)5 1520(the Held-Karp lower bound for that instance would yield)8 2800 2 720 5665 t
( the estimates used are typically)5 1579( Furthermore,)1 700( Rothberg, 1996].\))2 905([Johnson, McGeoch, &)2 1136 4 720 5815 t
( Hammersley [1959])2 1002( is known from work of Beardwood, Halton, and)8 2379( It)1 139(far from correct.)2 800 4 720 5965 t
( optimal tour length to)4 1110(that for these instances the ratio of the)7 1883 2 720 6122 t
13 S f
(\326` `)1 172 1 3751 6122 t
12 I f
(N)3833 6122 w
12 R f
(approaches a constant)2 1069 1 3971 6122 t
12 I f
(C)720 6272 w
9 I f
(OPT)815 6296 w
12 R f
(as)1047 6272 w
12 I f
(N)1199 6272 w
12 S f
(\256 \245)1 247 1 1319 6272 t
12 R f
( the most frequently quoted estimates for this constant, .749 by)10 3238(, but)1 236 2 1566 6272 t
( Recent)1 408( al. and .765 by Stein [1977], are both significant overestimates.)10 3229(Beardwood et)1 683 3 720 6422 t
( Percus and Martin [1996] and Johnson, McGeoch, and Rothberg [1996])10 3590(experiments of)1 730 2 720 6572 t
( many claims of closeness to opti-)6 1692( Thus)1 309(suggest that the actual limit is more like .7124.)8 2319 3 720 6722 t
(mality are too optimistic by 5)5 1468 1 720 6872 t
12 I f
(%)2188 6872 w
12 R f
( reinterpret such claims in)4 1282(or more, and we will have to)6 1431 2 2327 6872 t
( for the HK bound, derived)5 1319( doing so, we shall rely on the following formula)9 2378( In)1 163(this light.)1 460 4 720 7022 t
( Let)1 232(empirically by Johnson, McGeoch, and Rothberg [1996].)6 2817 2 720 7172 t
12 I f
(C)3811 7172 w
9 I f
(HK)3906 7196 w
12 R f
(\()4051 7172 w
12 I f
(N)4101 7172 w
12 R f
(\) be the expected)3 849 1 4191 7172 t
(ratio of the Held-Karp bound to)5 1599 1 720 7329 t
13 S f
(\326` `)1 172 1 2364 7329 t
12 I f
(N)2446 7329 w
12 R f
(for)2591 7329 w
12 I f
(N)2776 7329 w
12 R f
( for)1 186( Then)1 322( Euclidean instances.)2 1043(-city random)1 633 4 2856 7329 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 42 536 764
%%EndPage: 11 11
%%Page: 12 12
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
12 pagesetup
12 R f
(- 12 -)2 260 1 2750 500 t
12 I f
(N)720 870 w
12 S f
(\263)840 870 w
12 R f
(100,)946 870 w
12 I f
(C)1473 1143 w
9 I f
(HK)1568 1167 w
12 R f
(\()1713 1143 w
12 I f
(N)1763 1143 w
12 R f
(\))1853 1143 w
12 S f
(~)1953 1143 w
12 I f
(.)2069 1143 w
12 R f
(70805)2109 1143 w
12 S f
(+)2469 1143 w
12 I f
(N)2705 1239 w
9 I f
(.)2800 1191 w
9 R f
(5)2830 1191 w
12 I f
(.)2625 1071 w
12 R f
(52229)2665 1071 w
12 S1 f
(_ ______)1 376 1 2607 1107 t
12 S f
(+)3055 1143 w
12 I f
(N)3371 1227 w
12 R f
(1. 31572)1 400 1 3211 1071 t
12 S1 f
(_ _______)1 436 1 3193 1107 t
12 S f
(-)3701 1143 w
12 I f
(N)3944 1239 w
9 R f
(1. 5)1 120 1 4039 1191 t
12 R f
(3. 07474)1 400 1 3857 1071 t
12 S1 f
(_ _______)1 436 1 3839 1107 t
12 R f
( Beardwood et al. holds for the)6 1490(As this formula suggests, a result analogous to that of)9 2580 2 970 1476 t
( to)1 165(Held-Karp lower bound, with the ratio of the expected Held-Karp bound)10 3902 2 720 1633 t
13 S f
(\326` `)1 172 1 4858 1633 t
12 I f
(N)4940 1633 w
12 R f
(approaching a constant)2 1115 1 720 1783 t
12 I f
(C)1869 1783 w
9 I f
(HK)1964 1807 w
12 S f
(<)2149 1783 w
12 I f
(C)2265 1783 w
9 I f
(OPT)2360 1807 w
12 R f
(as)2574 1783 w
12 I f
(N)2708 1783 w
12 S f
(\256 \245)1 247 1 2828 1783 t
12 R f
( Similar)1 420([Goemans & Bertsimas, 1991].)3 1511 2 3109 1783 t
(results \(with constants bigger than)4 1783 1 720 1933 t
12 I f
(C)2566 1933 w
9 I f
(OPT)2661 1957 w
12 R f
( many TSP heuristics,)3 1152(\) may also hold for)4 1047 2 2841 1933 t
( this question has been successfully analyzed does)7 2490(although the only heuristic for which)5 1830 2 720 2083 t
( the)1 177( For)1 227( up to this expectation.)4 1093(not quite live)2 638 4 720 2233 t
12 I f
(Spacefilling Curve)1 899 1 2885 2233 t
12 R f
(heuristic of Platzman and)3 1226 1 3814 2233 t
(Bartholdi [1989],)1 844 1 720 2383 t
12 I f
(limsup)1604 2383 w
9 I f
(N)1940 2407 w
9 S f
(\256 \245)1 162 1 2007 2407 t
12 I f
(E)2189 2383 w
12 R f
([)2272 2383 w
12 I f
(A)2322 2383 w
12 R f
(\()2405 2383 w
12 I f
(L)2455 2383 w
9 I f
(N)2537 2407 w
12 R f
(\) ])1 90 1 2617 2383 t
12 I f
(/ N)1 124 1 2717 2383 t
9 R f
(1)2856 2335 w
9 I f
(/)2908 2335 w
9 R f
(2)2940 2335 w
12 R f
(and)3035 2383 w
12 I f
(liminf)3248 2383 w
9 I f
(N)3545 2407 w
9 S f
(\256 \245)1 162 1 3612 2407 t
12 I f
(E)3794 2383 w
12 R f
([)3877 2383 w
12 I f
(A)3927 2383 w
12 R f
(\()4010 2383 w
12 I f
(L)4060 2383 w
9 I f
(N)4142 2407 w
12 R f
(\) ])1 90 1 4222 2383 t
12 I f
(/ N)1 124 1 4322 2383 t
9 R f
(1)4461 2335 w
9 I f
(/)4513 2335 w
9 R f
(2)4545 2335 w
12 R f
(are both)1 400 1 4640 2383 t
(constants, but they are)3 1102 1 720 2533 t
12 I f
(different)1861 2533 w
12 R f
( difference)1 524( \(The)1 294( so there is no true limit.)6 1223(constants, and)1 690 4 2309 2533 t
(between the constants is less than 0.02)6 1853 1 720 2683 t
12 I f
(%)2573 2683 w
12 R f
(, however.\))1 542 1 2673 2683 t
( we shall also consider)4 1196(In addition to the geometric instances mentioned above,)7 2874 2 970 2869 t
( instances in)2 629( are)1 194( These)1 364(another testbed that is frequently encountered in the literature.)8 3133 4 720 3019 t
( randomly from the uni-)4 1216(which the distances between cities are all independent, chosen)8 3104 2 720 3169 t
( these)1 280( Although)1 517(form distribution on [0,1].)3 1270 3 720 3319 t
12 I f
(random distance matrix)2 1152 1 2819 3319 t
12 R f
(instances do not have)3 1037 1 4003 3319 t
( practical relevance, they are interesting from a theoretical point of view.)11 3688(any apparent)1 632 2 720 3469 t
(One can prove that the expected length of an optimal tour is bounded, independently of)14 4320 1 720 3619 t
12 I f
(N)720 3769 w
12 R f
( mechanical arguments suggest that it approaches a limiting value of)10 3484(, and statistical)2 756 2 800 3769 t
( value agrees closely with the experimental)6 2214( This)1 297( 1989].)1 364( ezard,)1 244( \302)1 45(2.0415... [Krauth & M)3 1156 6 720 3919 t
( these instances do not typi-)5 1410( Since)1 341(results of Johnson, McGeoch, and Rothberg [1996].)6 2569 3 720 4069 t
( offer a strikingly different challenge to our heuris-)8 2459(cally obey the triangle inequality, they)5 1861 2 720 4219 t
( the optimal tour length, better)5 1550( Held-Karp bound remains a good estimate of)7 2310(tics. The)1 460 3 720 4369 t
( the difference between it and the optimal)7 2076(even than it was for the geometric case since)8 2244 2 720 4519 t
(tour length appears to be approaching 0 as)7 2059 1 720 4669 t
12 I f
(N)2813 4669 w
12 S f
(\256 \245)1 247 1 2933 4669 t
12 R f
( performance of heuristics, how-)4 1580(. The)1 280 2 3180 4669 t
( example, the expected percentage excess over the)7 2412( For)1 227( degrade markedly.)2 923(ever, appears to)2 758 4 720 4819 t
(Held-Karp bound for NN can be proved to grow as)9 2473 1 720 4969 t
12 S f
(Q)3226 4969 w
12 R f
(\( log)1 204 1 3325 4969 t
12 I f
(N)3539 4969 w
12 R f
( is)1 115(\) for such instances, which)4 1296 2 3629 4969 t
(clearly much worse than the 24-26)5 1699 1 720 5119 t
12 I f
(%)2419 5119 w
12 R f
(\(independent of)1 764 1 2556 5119 t
12 I f
(N)3356 5119 w
12 R f
(\) observed for random Euclidean)4 1604 1 3436 5119 t
(instances.)720 5269 w
( above two classes of random instances, our testbeds consist of instances for)12 3722(For the)1 348 2 970 5455 t
(which)720 5612 w
12 I f
(N)1074 5612 w
12 R f
(is a power of)3 716 1 1215 5612 t
13 S f
(\326` ``)1 212 1 1992 5612 t
12 R f
( contain several)2 816( They)1 337( rounded to the nearest integer.)5 1643(10 ,)1 170 4 2074 5612 t
( all instances)2 638(instances of each size, and the results we report are typically averages over)12 3682 2 720 5762 t
( of random Euclidean instances range from 21)7 2337( numbers)1 462( The)1 264(of a given size and type.)5 1257 4 720 5912 t
(instances with)1 698 1 720 6062 t
12 I f
(N)1461 6062 w
12 S f
(=)1591 6062 w
12 R f
(100 to one each for)4 978 1 1707 6062 t
12 I f
(N)2728 6062 w
12 R f
( use of fewer)3 661( The)1 259(= 316,228 and 1,000,000.)3 1269 3 2851 6062 t
(instances for larger values of)4 1400 1 720 6212 t
12 I f
(N)2153 6212 w
12 R f
( the normalized variation)3 1212(is made possible by the fact that)6 1562 2 2266 6212 t
( instances of the same size declines with)7 2031(in behavior between random)3 1406 2 720 6362 t
12 I f
(N)4200 6362 w
12 R f
([Steele, 1981].)1 717 1 4323 6362 t
( \()1 50(More specifically, the probability that OPT)5 2173 2 720 6519 t
12 I f
(I)2953 6519 w
12 R f
(\))3003 6519 w
12 I f
(/)3053 6519 w
13 S f
(\326` `)1 172 1 3097 6519 t
12 I f
(N)3179 6519 w
12 R f
( value by)2 476(differs from its expected)3 1236 2 3328 6519 t
(more than)1 496 1 720 6669 t
12 I f
(t)1258 6669 w
12 R f
(is at most)2 487 1 1334 6669 t
12 I f
(Ke)1864 6669 w
9 S f
(-)2012 6621 w
9 I f
(t)2077 6621 w
6 R f
(2)2112 6573 w
9 I f
(N / K)2 159 1 2156 6621 t
12 R f
(for some fixed constant)3 1171 1 2368 6669 t
12 I f
(K)3582 6669 w
12 R f
([Rhee & Talagrand, 1988].)3 1335 1 3705 6669 t
( in the testbed is not enough to guarantee high precision esti-)11 3088(The number of instances)3 1232 2 720 6819 t
( For)1 233( the distinctions we wish to make.)6 1670(mates of average case behavior, but is enough for)8 2417 3 720 6969 t
( just)1 211(random distance matrices there is even less need for precision, and we typically use)13 4109 2 720 7119 t
(two instances each for all the sizes considered, from 100 to 31,623 cities.)12 3515 1 720 7269 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 12 12
%%Page: 13 13
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
13 pagesetup
12 R f
(- 13 -)2 260 1 2750 500 t
( make based on the above testbeds carry over to)9 2378(Many of the observations we shall)5 1692 2 970 870 t
( other)1 279( a more complete study that covers a variety of these)10 2560( For)1 230(other classes of instances.)3 1251 4 720 1020 t
(classes, see Johnson, Bentley, McGeoch, and Rothberg [1996].)7 3027 1 720 1170 t
14 B f
( Details)1 447(2.4. Implementation)1 1235 2 720 1500 t
12 R f
( at)1 125(As observed in Section 2.2, all our tour construction heuristics would seem to require)13 4195 2 720 1723 t
(least)720 1873 w
12 S f
(Q)975 1873 w
12 R f
(\()1074 1873 w
12 I f
(N)1124 1873 w
9 R f
(2)1219 1825 w
12 R f
(\) time for an arbitrary instance, since in general every edge is a potential can-)14 3756 1 1284 1873 t
(didate for membership in the tour and there are)8 2287 1 720 2023 t
12 I f
(N)3040 2023 w
12 R f
(\()3130 2023 w
12 I f
(N)3180 2023 w
12 S f
(-)3290 2023 w
12 R f
(1 \))1 110 1 3376 2023 t
12 I f
(/)3496 2023 w
12 R f
( This)1 278(2 edges to be considered.)4 1222 2 3540 2023 t
( the first two)3 651(is not necessarily the case, however, for geometric instances like those in)11 3669 2 720 2173 t
( cities correspond to points in the plane or some higher)10 2859(classes of our testbed, where)4 1461 2 720 2323 t
( two cities is a function of the coordi-)8 1844(dimensional space and where the distance between)6 2476 2 720 2473 t
( possible to rule out large classes of edges)8 2025( such instances it may be)5 1199( For)1 227(nates of the cities.)3 869 4 720 2623 t
(quickly, by exploiting the geometry of the situation with appropriate data structures.)11 4053 1 720 2773 t
(In particular, for points in the plane it is possible in)10 2545 1 970 2959 t
12 I f
(O)3553 2959 w
12 R f
(\()3649 2959 w
12 I f
(N)3699 2959 w
12 R f
(log)3789 2959 w
12 I f
(N)3953 2959 w
12 R f
( construct a)2 572(\) time to)2 425 2 4043 2959 t
(data structure that allows us to answer all subsequent nearest neighbor queries in average)13 4320 1 720 3109 t
(time much less than)3 984 1 720 3259 t
12 S f
(Q)1742 3259 w
12 R f
(\()1841 3259 w
12 I f
(N)1891 3259 w
12 R f
( such data structure is the)5 1259( One)1 267(\) per query.)2 572 3 1981 3259 t
12 I f
(k)4117 3259 w
12 R f
(-)4170 3259 w
12 I f
(d)4210 3259 w
12 R f
(tree of Bentley)2 732 1 4308 3259 t
( of NN, Greedy, and Clarke-Wright)5 1883([1975,1990b], exploited in the implementations)4 2437 2 720 3409 t
( Bentley, McGeoch, and Roth-)4 1481(described in Bentley [1990a], Bentley [1992] and Johnson,)7 2839 2 720 3559 t
( triangulation, exploited in implementations of)5 2367( is the Delaunay)3 855( Another)1 479(berg [1996].)1 619 4 720 3709 t
( by Reinelt [1992,1994] and J)5 1528(approximate versions of these algorithms)4 2061 2 720 3859 t
(. .)1 54 1 4309 3787 t
(unger, Reinelt,)1 731 1 4309 3859 t
( implementations using)2 1125( the case of the)4 724( In)1 161(and Rinaldi [1994].)2 940 4 720 4009 t
12 I f
(k)3700 4009 w
12 R f
(-)3753 4009 w
12 I f
(d)3793 4009 w
12 R f
(trees, on which we shall)4 1157 1 3883 4009 t
( neighbors typi-)2 792(concentrate here, the number of operations required for finding nearest)9 3528 2 720 4159 t
(cally averages around)2 1058 1 720 4309 t
12 S f
(Q)1813 4309 w
12 R f
(\( log)1 204 1 1912 4309 t
12 I f
(N)2126 4309 w
12 R f
( large instances, the actual)4 1285(\). \(For)1 342 2 2216 4309 t
12 I f
(time)3878 4309 w
12 R f
(to do the computa-)3 920 1 4120 4309 t
( faster on our machine than does the operation count, due to increasing num-)13 3801(tion grows)1 519 2 720 4459 t
(bers of cache misses and other memory hierarchy effects.\))8 2798 1 720 4609 t
( It)1 135( up substantially.)2 822(Using such a data structure, all four of our heuristics can be sped)12 3113 3 970 4795 t
( and Clarke-)2 635( Greedy)1 433(is relatively easy to see how this is done for Nearest Neighbor.)11 3252 3 720 4945 t
( \(and related\) queries to stock and update a)8 2101(Wright are sped up by using nearest-neighbor)6 2219 2 720 5095 t
( degree 2 in the)4 752(priority queue that maintains an entry for each city that does not yet have)13 3568 2 720 5245 t
( entry for city)3 676( The)1 252(current tour.)1 600 3 720 5395 t
12 I f
(c)2284 5395 w
9 I f
(i)2352 5419 w
12 R f
(is a triple)2 461 1 2423 5395 t
12 S f
(<)2920 5395 w
12 I f
(c)3006 5395 w
9 I f
(i)3074 5419 w
12 R f
(,)3119 5395 w
12 I f
(c)3159 5395 w
9 I f
(j)3227 5419 w
12 R f
(,)3272 5395 w
12 I f
(d)3312 5395 w
12 R f
(\()3382 5395 w
12 I f
(c)3432 5395 w
9 I f
(i)3500 5419 w
12 R f
(,)3545 5395 w
12 I f
(c)3585 5395 w
9 I f
(j)3653 5419 w
12 R f
(\))3698 5395 w
12 S f
(>)3758 5395 w
12 R f
(, where)1 358 1 3824 5395 t
12 I f
(c)4218 5395 w
9 I f
(j)4286 5419 w
12 R f
(is)4357 5395 w
12 I f
(c)4474 5395 w
9 I f
(i)4542 5419 w
12 R f
('s nearest)1 463 1 4577 5395 t
(neighbor \(in the case of Clarke-Wright, its neighbor yielding maximum savings\).)10 3902 1 720 5545 t
( similar priority-queue-based approach can be used to compute)8 3143(For Christofides, a)2 927 2 970 5731 t
(the minimum spanning tree, although computing the minimum-length matching on the)10 4320 1 720 5881 t
( this we use the fast geometric matching)7 1976( For)1 232(odd-degree vertices remains the bottleneck.)4 2112 3 720 6031 t
( this fast code the largest)5 1353(code of Applegate and Cook [1993], although even with)8 2967 2 720 6181 t
( our implemen-)2 748( addition,)1 457( In)1 162(instances we can feasibly handle involve only 100,000 cities.)8 2953 4 720 6331 t
( shortcutting mechanism in its)4 1521(tation of Christofides uses a slightly more sophisticated)7 2799 2 720 6481 t
( simply traversing the Euler tour and skipping past previously vis-)10 3242( of)1 135( instead)1 406(final stage:)1 537 4 720 6631 t
( biggest)1 391(ited cities, we choose the shortcut for each multiply-visited city that yields the)12 3929 2 720 6781 t
( 5)1 101( innovation yields an improvement of roughly)6 2272( This)1 284(reduction in tour length.)3 1193 4 720 6931 t
12 I f
(%)4570 6931 w
12 R f
(in tour)1 329 1 4711 6931 t
( and it is crucial if Christofides is to maintain its)10 2404(length for random geometric instances,)4 1916 2 720 7081 t
( we would have liked to find the)7 1565( \(Ideally,)1 466(undominated status.)1 965 3 720 7231 t
12 I f
(best)3748 7231 w
12 R f
( of doing)2 440(possible way)1 626 2 3974 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 13 13
%%Page: 14 14
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
14 pagesetup
12 R f
(- 14 -)2 260 1 2750 500 t
(the shortcuts, but that task is NP-hard [Papadimitriou & Vazirani, 1984].\))10 3538 1 720 870 t
( In)1 161( with our random distance matrix instances.)6 2107(Different implementation issues arise)3 1802 3 970 1056 t
( an idea of algorith-)4 952( would like to get)4 850( We)1 228(particular, there is the problem of storing them.)7 2290 4 720 1206 t
(mic behavior on large instances of this type, but a 10,000-city instance would take)13 4320 1 720 1356 t
( chosen not to store)4 967( have thus)2 505( We)1 235(roughly 200 megabytes, at one 32-bit word per edge.)8 2613 4 720 1506 t
(instances directly, but instead to generate them on the fly using a subroutine that given)14 4222 1 720 1656 t
12 I f
(i)4976 1656 w
12 R f
(,)5010 1656 w
12 I f
(j)720 1806 w
12 R f
( a seed)2 340(, and)1 241 2 754 1806 t
12 I f
(s)1372 1806 w
12 R f
(unique to the instance, computes)4 1601 1 1456 1806 t
12 I f
(d)3094 1806 w
12 R f
(\()3164 1806 w
12 I f
(c)3214 1806 w
9 I f
(i)3282 1830 w
12 R f
(,)3327 1806 w
12 I f
(c)3367 1806 w
9 I f
(j)3435 1830 w
12 R f
( For)1 234(\) in a reproducible fashion.)4 1326 2 3480 1806 t
( con-)1 257( allowing us to)3 751( By)1 213(details, see Johnson, Bentley, McGeoch, and Rothberg [1996].)7 3099 4 720 1956 t
(sider instances whose edge sets are too large to store in main memory, this scheme influ-)15 4320 1 720 2106 t
(ences the algorithm implementations we use.)5 2165 1 720 2256 t
(For NN we can still use the straightforward)7 2197 1 970 2442 t
12 S f
(Q)3214 2442 w
12 R f
(\()3313 2442 w
12 I f
(N)3363 2442 w
9 R f
(2)3458 2394 w
12 R f
( Greedy)1 399( For)1 244(\) implementation.)1 874 3 3523 2442 t
(and CW, however, we cannot use the straightforward)7 2653 1 720 2592 t
12 S f
(Q)3417 2592 w
12 R f
(\()3516 2592 w
12 I f
(N)3566 2592 w
9 R f
(2)3661 2544 w
12 R f
(log)3726 2592 w
12 I f
(N)3890 2592 w
12 R f
(\) implementations, as)2 1060 1 3980 2592 t
( sort all)2 372(these would require us to)4 1224 2 720 2742 t
12 S f
(Q)2351 2742 w
12 R f
(\()2450 2742 w
12 I f
(N)2500 2742 w
9 R f
(2)2595 2694 w
12 R f
(\) edges, and paging costs would be prohibitive if)8 2380 1 2660 2742 t
( for these algorithms we mimic the corre-)7 2029( Thus)1 305( memory.)1 466(the edges cannot all fit in main)6 1520 4 720 2892 t
(sponding geometric implementations, replacing the)4 2514 1 720 3042 t
12 I f
(k)3275 3042 w
12 R f
(-)3328 3042 w
12 I f
(d)3368 3042 w
12 R f
(data structure by one consisting)4 1571 1 3469 3042 t
( the 20 nearest neighbors for each city, computed in overall time)11 3120(of sorted lists of)3 789 2 720 3192 t
12 S f
(Q)4661 3192 w
12 R f
(\()4760 3192 w
12 I f
(N)4810 3192 w
9 R f
(2)4905 3144 w
12 R f
(\).)4970 3192 w
(To find the nearest legal neighbor of city)7 1994 1 720 3342 t
12 I f
(c)2748 3342 w
9 I f
(i)2816 3366 w
12 R f
( down the list for)4 842(, we then can simply search)5 1347 2 2851 3342 t
12 I f
(c)720 3492 w
9 I f
(i)788 3516 w
12 R f
( if no)2 258(. Only)1 332 2 823 3492 t
12 I f
(c)1445 3492 w
9 I f
(j)1513 3516 w
12 R f
(on the list is such that the edge {)8 1585 1 1580 3492 t
12 I f
(c)3165 3492 w
9 I f
(i)3233 3516 w
12 R f
(,)3278 3492 w
12 I f
(c)3318 3492 w
9 I f
(j)3386 3516 w
12 R f
( the current tour)3 774(} can be added to)4 845 2 3421 3492 t
( to a full)3 444(do we resort)2 617 2 720 3642 t
12 S f
(Q)1824 3642 w
12 R f
(\()1923 3642 w
12 I f
(N)1973 3642 w
12 R f
( did not implement Christo-)4 1391( We)1 239(\) search of all possibilities.)4 1347 3 2063 3642 t
(fides for this last class of instances, for reasons we explain below.)11 3168 1 720 3792 t
14 B f
( Results for Tour Construction Heuristics)5 2485(2.5. Experimental)1 1096 2 720 4122 t
12 R f
( we summarize the results obtained by Johnson, Bentley, McGeoch, and)10 3616(In this section)2 704 2 720 4345 t
( Euclidean instances)2 991(Rothberg [1996] for our four tour construction heuristics on random)9 3329 2 720 4495 t
( Table)1 304( 1 covers tour quality, and)5 1255( Table)1 333(and random distance matrices, as described above.)6 2428 4 720 4645 t
( do not)2 338( times)1 295( Running)1 477(2 covers running times in seconds on our SGI Challenge machine.)10 3210 4 720 4795 t
( time needed to read in the instance or write out the resulting tour, which were)15 3788(include the)1 532 2 720 4945 t
( overall time and could have been reduced almost to negligibility)10 3177(only a small part of the)5 1143 2 720 5095 t
( for instances from)3 944( Results)1 428( and output routines.)3 1028(by clever coding of the input)5 1445 4 720 5245 t
12 C f
(TSPLIB)4608 5245 w
12 R f
( times for instances of)4 1067( Running)1 475( random Euclidean instances:)3 1415(were similar to those for the)5 1363 4 720 5395 t
( quality for NN and Greedy being slightly)7 2138(similar size were comparable, with the tour)6 2182 2 720 5545 t
( quality for CW and Christo-)5 1386(worse on average than for the random instances, and the tour)10 2934 2 720 5695 t
(fides being slightly better.)3 1258 1 720 5845 t
(The results presented are averages taken over all the instances in our testbed of each)14 4070 1 970 6031 t
( NN and CW we in addition average over 10 or more random choices of)14 3563( For)1 235(given size.)1 522 3 720 6181 t
( the accuracy of the least significant dig-)7 1974( Nevertheless,)1 713(the starting city for each instance.)5 1633 3 720 6331 t
( be viewed with some skepticism, and it is probably)9 2609(its in the numbers reported should)5 1711 2 720 6481 t
( picture rather than from any particular value in)8 2291(safer to draw conclusions from the overall)6 2029 2 720 6631 t
( which are based)3 823( is especially so for the random distance matrix results,)9 2719( This)1 282(the tables.)1 496 4 720 6781 t
(on fewer instances of each size.)5 1519 1 720 6931 t
( the four algorithms seems to approach a)7 2051(For random Euclidean instances, each of)5 2019 2 970 7117 t
( tours exceed the)3 879(relatively small limiting value for the average percent by which its)10 3441 2 720 7267 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 14 14
%%Page: 15 15
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
15 pagesetup
12 R f
(- 15 -)2 260 1 2750 500 t
10 S f
(_ ______________________________________________________________________)1 3510 1 1125 875 t
11 R f
(Average Percent Excess over the Held-Karp Lower Bound)7 2571 1 1594 1025 t
10 S f
(_ ______________________________________________________________________)1 3510 1 1125 1075 t
10 I f
(N)1183 1225 w
10 R f
(= 10)1 335 1 1325 1225 t
7 R f
(2)1665 1185 w
10 R f
(10)1887 1225 w
7 R f
(2. 5)1 93 1 1992 1185 t
10 R f
(10)2272 1225 w
7 R f
(3)2377 1185 w
10 R f
(10)2599 1225 w
7 R f
(3. 5)1 93 1 2704 1185 t
10 R f
(10)2984 1225 w
7 R f
(4)3089 1185 w
10 R f
(10)3311 1225 w
7 R f
(4. 5)1 93 1 3416 1185 t
10 R f
(10)3696 1225 w
7 R f
(5)3801 1185 w
10 R f
(10)4023 1225 w
7 R f
(5. 5)1 93 1 4128 1185 t
10 R f
(10)4408 1225 w
7 R f
(6)4513 1185 w
10 S f
(_ ______________________________________________________________________)1 3510 1 1125 1275 t
10 R f
(Random Euclidean Instances)2 1159 1 2478 1425 t
10 S f
(_ ______________________________________________________________________)1 3510 1 1125 1475 t
10 R f
( \261 \261)2 712(CHR 9.5 9.9 9.7 9.8 9.9 9.8 9.9)7 2698 2 1175 1625 t
( 10.7 11.3 11.8 11.9 12.0 12.1 12.1 12.2)8 2848(CW 9.2)1 562 2 1175 1745 t
( 18.8 17.0 16.8 16.6 14.7 14.9 14.5 14.2)8 2848(GR 19.5)1 562 2 1175 1865 t
( 26.2 26.0 25.5 24.3 24.0 23.6 23.4 23.3)8 2848(NN 25.6)1 562 2 1175 1985 t
10 S f
(_ ______________________________________________________________________)1 3510 1 1125 2005 t
10 R f
(Random Distance Matrices)2 1087 1 2514 2155 t
10 S f
(_ ______________________________________________________________________)1 3510 1 1125 2205 t
10 R f
( \261 \261 \261)3 1068( 160 170 200 250 280)5 1780(GR 100)1 562 3 1175 2325 t
( \261 \261 \261)3 1068( 180 240 300 360 410)5 1780(NN 130)1 562 3 1175 2445 t
( \261 \261 \261)3 1068( 1800 3200 5620)3 1068( 520 980)2 712(CW 270)1 562 4 1175 2565 t
10 S f
( \347)1 -3510(_ ______________________________________________________________________)1 3510 2 1125 2615 t
(\347)1125 2575 w
(\347)1125 2475 w
(\347)1125 2375 w
(\347)1125 2275 w
(\347)1125 2175 w
(\347)1125 2075 w
(\347)1125 1975 w
(\347)1125 1875 w
(\347)1125 1775 w
(\347)1125 1675 w
(\347)1125 1575 w
(\347)1125 1475 w
(\347)1125 1375 w
(\347)1125 1275 w
(\347)1125 1175 w
(\347)1125 1075 w
(\347)1125 975 w
(\347)1456 2615 w
(\347)1456 2575 w
(\347)1456 2475 w
(\347)1456 2375 w
(\347)1456 2275 w
(\347)1456 2175 w
(\347)1456 2075 w
(\347)1456 1975 w
(\347)1456 1875 w
(\347)1456 1775 w
(\347)1456 1675 w
(\347)1456 1575 w
(\347)1456 1475 w
(\347)1456 1375 w
(\347)4635 2615 w
(\347)4635 2575 w
(\347)4635 2475 w
(\347)4635 2375 w
(\347)4635 2275 w
(\347)4635 2175 w
(\347)4635 2075 w
(\347)4635 1975 w
(\347)4635 1875 w
(\347)4635 1775 w
(\347)4635 1675 w
(\347)4635 1575 w
(\347)4635 1475 w
(\347)4635 1375 w
(\347)4635 1275 w
(\347)4635 1175 w
(\347)4635 1075 w
(\347)4635 975 w
11 B f
(Table 1.)1 381 1 1724 2855 t
11 R f
(Tour quality for tour generation heuristics.)5 1874 1 2161 2855 t
10 S f
(_ ______________________________________________________________________________)1 3906 1 927 3142 t
11 R f
(Running Time in Seconds on a 150 Mhz SGI Challenge)9 2462 1 1649 3292 t
10 S f
(_ ______________________________________________________________________________)1 3906 1 927 3342 t
10 I f
(N)985 3492 w
10 R f
(= 10)1 357 1 1127 3492 t
7 R f
(2)1489 3452 w
10 R f
(10)1755 3492 w
7 R f
(2. 5)1 93 1 1860 3452 t
10 R f
(10)2184 3492 w
7 R f
(3)2289 3452 w
10 R f
(10)2555 3492 w
7 R f
(3. 5)1 93 1 2660 3452 t
10 R f
(10)2984 3492 w
7 R f
(4)3089 3452 w
10 R f
(10)3355 3492 w
7 R f
(4. 5)1 93 1 3460 3452 t
10 R f
(10)3784 3492 w
7 R f
(5)3889 3452 w
10 R f
(10)4155 3492 w
7 R f
(5. 5)1 93 1 4260 3452 t
10 R f
(10)4584 3492 w
7 R f
(6)4689 3452 w
10 S f
(_ ______________________________________________________________________________)1 3906 1 927 3542 t
10 R f
(Random Euclidean Instances)2 1159 1 2478 3692 t
10 S f
(_ ______________________________________________________________________________)1 3906 1 927 3742 t
10 R f
( \261 \261)2 800( 23009)1 400( 801.9)1 400(CHR 0.03 0.12 0.53 3.57 41.9)5 2206 4 977 3892 t
( 173 670)2 800( 31)1 400( 1.4 6.5)2 800( 0.03 0.11 0.35)3 1200(CW 0.00)1 606 5 977 4012 t
( 380)1 400( 23 90)2 800( 1.1 5.5)2 800( 0.02 0.08 0.29)3 1200(GR 0.00)1 606 5 977 4132 t
( 120)1 400( 20)1 400( 6)1 400( 0.3 1.2)2 800( 0.01 0.03 0.09)3 1200(NN 0.00)1 606 6 977 4252 t
10 S f
(_ ______________________________________________________________________________)1 3906 1 927 4272 t
10 R f
(Random Distance Matrices)2 1087 1 2514 4422 t
10 S f
(_ ______________________________________________________________________________)1 3906 1 927 4472 t
10 R f
( \261 \261 \261)3 1200( 1400)1 400( 107)1 400( 9.3)1 400( 0.12 0.98)2 800(GR 0.02)1 606 6 977 4592 t
( \261 \261 \261)3 1200( 730)1 400( 73)1 400( 7.2)1 400( 0.07 0.69)2 800(NN 0.01)1 606 6 977 4712 t
( \261 \261 \261)3 1200( 2740)1 400( 236)1 400( 0.24 2.23 22.0)3 1200(CW 0.03)1 606 5 977 4832 t
10 S f
( \347)1 -3906(_ ______________________________________________________________________________)1 3906 2 927 4882 t
(\347)927 4842 w
(\347)927 4742 w
(\347)927 4642 w
(\347)927 4542 w
(\347)927 4442 w
(\347)927 4342 w
(\347)927 4242 w
(\347)927 4142 w
(\347)927 4042 w
(\347)927 3942 w
(\347)927 3842 w
(\347)927 3742 w
(\347)927 3642 w
(\347)927 3542 w
(\347)927 3442 w
(\347)927 3342 w
(\347)927 3242 w
(\347)1258 4882 w
(\347)1258 4842 w
(\347)1258 4742 w
(\347)1258 4642 w
(\347)1258 4542 w
(\347)1258 4442 w
(\347)1258 4342 w
(\347)1258 4242 w
(\347)1258 4142 w
(\347)1258 4042 w
(\347)1258 3942 w
(\347)1258 3842 w
(\347)1258 3742 w
(\347)1258 3642 w
(\347)4833 4882 w
(\347)4833 4842 w
(\347)4833 4742 w
(\347)4833 4642 w
(\347)4833 4542 w
(\347)4833 4442 w
(\347)4833 4342 w
(\347)4833 4242 w
(\347)4833 4142 w
(\347)4833 4042 w
(\347)4833 3942 w
(\347)4833 3842 w
(\347)4833 3742 w
(\347)4833 3642 w
(\347)4833 3542 w
(\347)4833 3442 w
(\347)4833 3342 w
(\347)4833 3242 w
11 B f
(Table 2.)1 381 1 1674 5122 t
11 R f
(Running times for tour generation heuristics.)5 1974 1 2111 5122 t
12 R f
( Christofides\) being slightly)3 1355(Held-Karp lower bound, with the best of these limits \(that for)10 2965 2 720 5404 t
(under 10)1 429 1 720 5554 t
12 I f
(%)1149 5554 w
12 R f
( result for Christofides would be more like 15)8 2246(. \(The)1 322 2 1249 5554 t
12 I f
(%)3817 5554 w
12 R f
(if we had not used the)5 1087 1 3953 5554 t
( all the heuristics)3 883( For)1 248( previous section.\))2 927(greedy shortcutting method mentioned in the)5 2262 4 720 5704 t
(except Christofides, results for)3 1516 1 720 5854 t
12 I f
(N)2279 5854 w
12 S f
(=)2409 5854 w
12 R f
( of how good the)4 861(100 are relatively poor predictors)4 1654 2 2525 5854 t
(solutions will be when)3 1146 1 720 6004 t
12 I f
(N)1916 6004 w
12 R f
( is especially true for Greedy, whose average)7 2299( This)1 294(is large.)1 401 3 2046 6004 t
(excess drops from 19.5 to 14.2)5 1553 1 720 6154 t
12 I f
(%)2273 6154 w
12 R f
(as one goes from)3 859 1 2418 6154 t
12 I f
(N)3321 6154 w
12 S f
(=)3451 6154 w
12 R f
(100 to)1 318 1 3537 6154 t
12 I f
(N)3899 6154 w
12 S f
(=)4029 6154 w
12 R f
( to)1 138( As)1 207(1 , 000 , 000.)4 550 3 4145 6154 t
( for Christofides is growing faster than)6 1930(running times, the time)3 1148 2 720 6304 t
12 I f
(N)3839 6304 w
9 R f
(2)3934 6256 w
12 R f
(, as expected, but the)4 1051 1 3989 6304 t
( would require that the)4 1096(rest have running times that grow subquadratically \(quadratic time)8 3224 2 720 6454 t
(running time go up by a factor of 10 each time)10 2326 1 720 6611 t
12 I f
(N)3085 6611 w
12 R f
( factor of)2 460(went up by a)3 643 2 3204 6611 t
13 S f
(\326` ``)1 212 1 4347 6611 t
12 R f
( which it)2 441(10 ,)1 170 2 4429 6611 t
( based on actual operation counts, the running times should be more)11 3404( Indeed,)1 429(does not\).)1 487 3 720 6761 t
(like)720 6911 w
12 S f
(Q)935 6911 w
12 R f
(\()1034 6911 w
12 I f
(N)1084 6911 w
12 R f
(log)1174 6911 w
12 I f
(N)1338 6911 w
12 R f
( to grow sig-)3 626(\), although memory hierarchy effects cause the running times)8 2986 2 1428 6911 t
(nificantly faster than this once)4 1517 1 720 7061 t
12 I f
(N)2282 7061 w
12 S f
(>)2412 7061 w
12 R f
( the slowest of NN, Greedy, and)6 1629( so,)1 182( Even)1 321(10 , 000.)2 380 4 2528 7061 t
(CW takes only about 10 minutes on the million-city instance.)9 2955 1 720 7211 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 54 536 764
%%EndPage: 15 15
%%Page: 16 16
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
16 pagesetup
12 R f
(- 16 -)2 260 1 2750 500 t
( time growth)2 621( Running)1 477( different.)1 477(The story for random distance matrices is markedly)7 2495 4 970 870 t
( impor-)1 364( More)1 326( all at least quadratic \(somewhat worse for Greedy and CW\).)10 2977(rates are now)2 653 4 720 1020 t
( of)1 137(tantly, the percentage excesses are no longer bounded by small constants independent)11 4183 2 720 1170 t
12 I f
(N)720 1320 w
12 R f
( with)1 247(, but rather they grow)4 1053 2 800 1320 t
12 I f
(N)2133 1320 w
12 R f
(for all the algorithms, starting at figures of 100)8 2281 1 2246 1320 t
12 I f
(%)4527 1320 w
12 R f
(or more)1 380 1 4660 1320 t
(for)720 1470 w
12 I f
(N)904 1470 w
12 S f
(=)1034 1470 w
12 R f
( and Greedy, the growth rate appears to be proportional to log)11 3133( NN)1 216(100. For)1 451 3 1150 1470 t
12 I f
(N)4960 1470 w
12 R f
( these three)2 553( Clarke-Wright, the best of)4 1308( For)1 231(\(the theoretically correct growth rate for NN\).)6 2228 4 720 1620 t
( substantially worse, more like)4 1506(algorithms on Euclidean instances, the growth rate is)7 2594 2 720 1777 t
13 S f
(\326` `)1 172 1 4858 1777 t
12 I f
(N)4940 1777 w
12 R f
( had it been)3 590( Christofides,)1 690( of the triangle inequality\).)4 1331(\(presumably because of the failure)4 1709 4 720 1927 t
( that the expected length of an)6 1508(implemented, would likely have been even worse: Recall)7 2812 2 720 2077 t
(optimal tour is bounded, independent of)5 1924 1 720 2227 t
12 I f
(N)2674 2227 w
12 R f
( the other hand, each time Christofides has)7 2050(. On)1 236 2 2754 2227 t
( in the final stage of its operation, the edge added in making the short-)14 3426(to make a shortcut)3 894 2 720 2377 t
( be expected to)3 774(cut will be more-or-less random \(whatever conditioning there is might)9 3546 2 720 2527 t
(make it)1 369 1 720 2677 t
12 I f
(longer)1130 2677 w
12 R f
( its expected length would be roughly 0.5 \(or)8 2255( this,)1 246( Given)1 364(than average\).)1 690 4 1485 2677 t
( typically the)2 659( Since)1 342( if one is picking the best of two possible shortcuts\).)10 2660(perhaps 0.25,)1 659 4 720 2827 t
(number of shortcuts that need to be made is proportional to)10 2896 1 720 2977 t
12 I f
(N)3651 2977 w
12 R f
(, this suggests that the per-)5 1309 1 3731 2977 t
(centage excess for Christofides would itself grow linearly with)8 3018 1 720 3127 t
12 I f
(N)3768 3127 w
12 R f
(.)3848 3127 w
14 B f
( 3-OPT, AND THEIR VARIANTS)4 2067(3. 2-OPT,)1 614 2 720 3457 t
12 R f
( algorithms for the TSP based on simple)7 2012(In this section, we consider local improvement)6 2308 2 720 3680 t
(tour modifications \()2 969 1 720 3830 t
12 I f
(exchange heuristics)1 957 1 1689 3830 t
12 R f
( an algo-)2 432( Such)1 306(in the terminology of Chapter 1\).)5 1620 3 2682 3830 t
( \()1 74(rithm is specified in terms of a class of operations)9 2424 2 720 3980 t
12 I f
(exchanges)3218 3980 w
12 R f
(or)3751 3980 w
12 I f
(moves)3885 3980 w
12 R f
(\) that can be used)4 856 1 4184 3980 t
( then repeatedly per-)3 990( a feasible tour, the algorithm)5 1422( Given)1 354(to convert one tour into another.)5 1554 4 720 4130 t
(forms operations from the given class, so long as each reduces the length of the current)15 4320 1 720 4280 t
( an improvement \(a)3 941(tour, until a tour is reached for which no operation yields)10 2761 2 720 4430 t
12 I f
(locally opti-)1 587 1 4453 4430 t
(mal)720 4580 w
12 R f
( we can view this as a)6 1058(tour\). Alternatively,)1 991 2 932 4580 t
12 I f
(neighborhood search)1 1027 1 3013 4580 t
12 R f
(process, where each)2 967 1 4073 4580 t
( associated neighborhood of)3 1360(tour has an)2 535 2 720 4730 t
12 I f
(adjacent)2648 4730 w
12 R f
(tours, i.e., those that can be reached in a)8 1945 1 3095 4730 t
( continually moves to a better neighbor until no better neighbors)10 3254(single move, and one)3 1066 2 720 4880 t
(exist.)720 5030 w
( The)1 253( algorithms, the most famous are 2-Opt and 3-Opt.)8 2487(Among simple local search)3 1330 3 970 5216 t
( first proposed by Croes [1958], although the basic move had already)11 3323(2-Opt algorithm was)2 997 2 720 5366 t
( deletes two edges, thus breaking the tour)7 2094( move)1 311( This)1 288(been suggested by Flood [1956].)4 1627 4 720 5516 t
( Figure 1.)2 476( See)1 239( the other possible way.)4 1162(into two paths, and then reconnects those paths in)8 2443 4 720 5666 t
( is a schematic; if distances were as shown in the figure, the particu-)13 3304(Note that this picture)3 1016 2 720 5816 t
(lar)720 5966 w
12 I f
(2-change)887 5966 w
12 R f
(depicted here would be counterproductive and so would not be performed.)10 3667 1 1373 5966 t
( edges of the current)4 984(In 3-Opt [Bock, 1958], [Lin, 1965], the exchange replaces up to three)11 3336 2 720 6116 t
(tour. See Figure 2.)3 891 1 720 6266 t
(In Section 3.1 we shall describe what is known theoretically about these algorithms)12 4070 1 970 6452 t
( 3.2 then presents experimental results from John-)7 2433( Section)1 425( average case.)2 676(in the worst and)3 786 4 720 6602 t
( [1996] that show that the algorithms perform)7 2377(son, Bentley, McGeoch, and Rothberg)4 1943 2 720 6752 t
( our geo-)2 453(much better in practice than the theoretical bounds might indicate \(at least for)12 3867 2 720 6902 t
( the key implementation details that make)6 2019( 3.3 sketches some of)4 1031( Section)1 421(metric instances\).)1 849 4 720 7052 t
( the question of how local optimization)6 1915( 3.4 then considers)3 919( Section)1 427(these results possible.)2 1059 4 720 7202 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 55 536 764
%%EndPage: 16 16
%%Page: 17 17
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
17 pagesetup
12 R f
(- 17 -)2 260 1 2750 500 t
cleartomark
saveobj restore
end
%%BeginDocument: ../vtsp/Fig4.1.ps
%ps_include: begin
save
/ed {exch def} def
{} /showpage ed
{} /copypage ed
{} /erasepage ed
{} /letter ed
currentdict /findfont known systemdict /findfont known and {
	/findfont systemdict /findfont get def
} if
36 dict dup /PS-include-dict-dw ed begin
/context ed
count array astore /o-stack ed
%ps_include: variables begin
/llx 133.349 def
/lly 589.701 def
/urx 422.534 def
/ury 743.44 def
/w 0 def
/o 0 def
/s 0 def
/cx 2880 def
/cy -1920 def
/sx 4320 def
/sy 1800 def
/ax 0.5 def
/ay 0.5 def
/rot 0 def
%ps_include: variables end
{llx lly urx ury} /bbox ed
{newpath 2 index exch 2 index exch dup 6 index exch
 moveto 3 {lineto} repeat closepath} /boxpath ed
{dup mul exch dup mul add sqrt} /len ed
{2 copy gt {exch} if pop} /min ed
{2 copy lt {exch} if pop} /max ed
{transform round exch round exch A itransform} /nice ed
{6 array} /n ed
n defaultmatrix n currentmatrix n invertmatrix n concatmatrix /A ed
urx llx sub 0 A dtransform len /Sx ed
0 ury lly sub A dtransform len /Sy ed
llx urx add 2 div lly ury add 2 div A transform /Cy ed /Cx ed
rot dup sin abs /S ed cos abs /C ed
Sx S mul Sy C mul add /H ed
Sx C mul Sy S mul add /W ed
sy H div /Scaley ed
sx W div /Scalex ed
s 0 eq {Scalex Scaley min dup /Scalex ed /Scaley ed} if
sx Scalex W mul sub 0 max ax 0.5 sub mul cx add /cx ed
sy Scaley H mul sub 0 max ay 0.5 sub mul cy add /cy ed
urx llx sub 0 A dtransform exch atan rot exch sub /rot ed
n currentmatrix initgraphics setmatrix
cx cy translate
Scalex Scaley scale
rot rotate
Cx neg Cy neg translate
A concat
bbox boxpath clip newpath
w 0 ne {gsave bbox boxpath 1 setgray fill grestore} if
end
gsave
%ps_include: inclusion begin
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
  } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
  } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def

initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 173.374 68.395 159.935 76.358 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 75.697 159.150 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 67.597 172.650 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 62.197 188.850 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 75.697 234.751 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 67.597 221.250 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 62.197 205.050 0.000 0.000 1.350 1.350 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 189.440 62.927 173.374 68.328 Line
/ArrowType{ } def
/SD {[1.000 2.000 ] 0 setdash} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.199 205.720 62.927 189.586 62.927 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 221.922 68.328 205.788 62.927 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 235.429 76.355 221.844 68.182 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 255.552 100.721 247.589 87.282 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 86.497 246.901 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 99.997 255.001 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 116.197 260.401 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 162.098 246.901 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 148.597 255.001 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 132.397 260.401 0.000 0.000 1.350 1.350 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 261.020 116.787 255.620 100.721 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 261.020 133.067 261.020 116.933 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 255.620 149.269 261.020 133.135 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 247.592 162.776 255.766 149.191 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 139.698 100.721 147.661 87.282 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 86.497 147.000 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 99.997 138.900 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 116.197 133.500 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 162.098 147.000 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 148.597 138.900 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 132.397 133.500 0.000 0.000 1.350 1.350 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 134.230 116.787 139.630 100.721 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 134.230 133.067 134.230 116.933 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 139.630 149.269 134.230 133.135 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 147.658 162.776 139.484 149.191 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 173.374 181.549 159.935 173.586 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 172.898 159.150 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 180.998 172.650 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 186.398 188.850 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 172.898 234.751 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 180.998 221.250 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 186.398 205.050 0.000 0.000 1.350 1.350 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 189.440 187.018 173.374 181.617 Line
/ArrowType{ } def
/SD {[1.000 2.000 ] 0 setdash} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.199 205.720 187.018 189.586 187.018 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 221.922 181.617 205.788 187.018 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 235.429 173.589 221.844 181.763 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 159.810 76.405 147.639 87.148 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 247.558 87.148 235.388 76.405 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 235.388 173.544 247.558 162.801 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 159.810 173.544 147.639 162.801 Line
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 188.298 186.406 0.000 0.000 14.000 7.500 rect
gsave
190.156 195.298 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(a) -2.743 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 188.298 202.523 0.000 0.000 14.000 7.500 rect
gsave
206.274 195.298 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(b) -2.626 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 48.559 186.277 0.000 0.000 14.000 6.893 rect
gsave
189.724 55.559 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(c) -2.872 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 48.559 202.523 0.000 0.000 14.000 7.500 rect
gsave
206.274 55.559 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(d) -2.626 4.000 S
grestore
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 334.007 68.395 320.569 76.358 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 75.697 319.783 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 67.597 333.283 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 62.197 349.484 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 75.697 395.384 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 67.597 381.884 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 62.197 365.684 0.000 0.000 1.350 1.350 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 350.074 62.927 334.007 68.328 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 382.555 68.328 366.421 62.927 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 396.062 76.355 382.477 68.182 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 416.186 100.721 408.223 87.282 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 86.497 407.534 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 99.997 415.634 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 116.197 421.034 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 162.098 407.534 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 148.597 415.634 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 1.570 132.397 421.034 0.000 0.000 1.350 1.350 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 421.654 116.787 416.253 100.721 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 421.654 133.067 421.654 116.933 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 416.253 149.269 421.654 133.135 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 408.226 162.776 416.399 149.191 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 300.332 100.721 308.295 87.282 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 86.497 307.633 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 99.997 299.533 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 116.197 294.133 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 162.098 307.633 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 148.597 299.533 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 -1.570 132.397 294.133 0.000 0.000 1.350 1.350 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 294.863 116.787 300.264 100.721 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 294.863 133.067 294.863 116.933 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 300.264 149.269 294.863 133.135 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 308.292 162.776 300.118 149.191 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 334.007 181.549 320.569 173.586 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 172.898 319.783 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 180.998 333.283 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 186.398 349.484 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 172.898 395.384 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 180.998 381.884 0.000 0.000 1.350 1.350 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.300 0 186.398 365.684 0.000 0.000 1.350 1.350 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 350.074 187.018 334.007 181.617 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 382.555 181.617 366.421 187.018 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 396.062 173.589 382.477 181.763 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 320.443 76.405 308.273 87.148 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 408.192 87.148 396.021 76.405 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 396.021 173.544 408.192 162.801 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 320.443 173.544 308.273 162.801 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 366.413 187.018 350.167 62.861 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 350.246 187.073 366.413 62.861 Line
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 187.762 345.716 0.000 0.000 14.000 7.500 rect
gsave
349.466 194.762 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(a) -2.433 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 188.298 363.910 0.000 0.000 14.000 7.500 rect
gsave
367.660 195.298 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(b) -3.239 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 48.559 345.522 0.000 0.000 14.000 6.893 rect
gsave
348.969 55.559 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(c) -2.627 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 48.559 363.246 0.000 0.000 14.000 7.500 rect
gsave
366.996 55.559 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(d) -2.903 4.000 S
grestore
restore
end
%ps_include: inclusion end
grestore
PS-include-dict-dw begin
o 0 ne {gsave A defaultmatrix /A ed llx lly nice urx ury nice
	initgraphics 0.1 setlinewidth boxpath stroke grestore} if
clear o-stack aload pop
context end restore
%ps_include: end
%%EndDocument
DpostDict begin
/saveobj save def
mark
11 B f
(Figure 1.)1 422 1 1099 3082 t
11 R f
(A 2-Opt move: original tour on the left and resulting tour on the right.)13 3083 1 1577 3082 t
cleartomark
saveobj restore
end
%%BeginDocument: Fig4.2r.ps
%ps_include: begin
save
/ed {exch def} def
{} /showpage ed
{} /copypage ed
{} /erasepage ed
{} /letter ed
currentdict /findfont known systemdict /findfont known and {
	/findfont systemdict /findfont get def
} if
36 dict dup /PS-include-dict-dw ed begin
/context ed
count array astore /o-stack ed
%ps_include: variables begin
/llx 57 def
/lly 617 def
/urx 493 def
/ury 757 def
/w 0 def
/o 0 def
/s 0 def
/cx 2880 def
/cy -4429 def
/sx 4320 def
/sy 1800 def
/ax 0.5 def
/ay 0.5 def
/rot 0 def
%ps_include: variables end
{llx lly urx ury} /bbox ed
{newpath 2 index exch 2 index exch dup 6 index exch
 moveto 3 {lineto} repeat closepath} /boxpath ed
{dup mul exch dup mul add sqrt} /len ed
{2 copy gt {exch} if pop} /min ed
{2 copy lt {exch} if pop} /max ed
{transform round exch round exch A itransform} /nice ed
{6 array} /n ed
n defaultmatrix n currentmatrix n invertmatrix n concatmatrix /A ed
urx llx sub 0 A dtransform len /Sx ed
0 ury lly sub A dtransform len /Sy ed
llx urx add 2 div lly ury add 2 div A transform /Cy ed /Cx ed
rot dup sin abs /S ed cos abs /C ed
Sx S mul Sy C mul add /H ed
Sx C mul Sy S mul add /W ed
sy H div /Scaley ed
sx W div /Scalex ed
s 0 eq {Scalex Scaley min dup /Scalex ed /Scaley ed} if
sx Scalex W mul sub 0 max ax 0.5 sub mul cx add /cx ed
sy Scaley H mul sub 0 max ay 0.5 sub mul cy add /cy ed
urx llx sub 0 A dtransform exch atan rot exch sub /rot ed
n currentmatrix initgraphics setmatrix
cx cy translate
Scalex Scaley scale
rot rotate
Cx neg Cy neg translate
A concat
bbox boxpath clip newpath
w 0 ne {gsave bbox boxpath 1 setgray fill grestore} if
end
gsave
%ps_include: inclusion begin
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/RR1 {
pbox top get pbox bottom get sub abs
pbox left get pbox right get sub abs
2 copy lt {
Min
2 div dup dup dup
pbox left get add pbox left 3 -1 roll put
pbox right get exch sub pbox right 3 -1 roll put
pbox left get pbox bottom get moveto
pbox right get 0 3 -1 roll 90 -90 arcn
pbox left get 0 3 -1 roll -90 90 arcn closepath
} {
Min
2 div dup dup dup
pbox bottom get exch sub pbox bottom 3 -1 roll put
pbox top get add pbox top 3 -1 roll put
pbox left get pbox bottom get moveto
pbox left get add pbox top get
2 index
180 0 arc
dup pbox left get add pbox bottom get
3 -1 roll 0 180 arc
closepath
} ifelse
} bind def
/RR2 { 
dup dup dup dup dup dup dup dup 
pbox top get add pbox top 3 -1 roll put 
pbox left get add pbox left 3 -1 roll put 
pbox bottom get exch sub pbox bottom 3 -1 roll put 
pbox right get exch sub pbox right 3 -1 roll put 
pbox bottom get add pbox left get exch moveto 
pbox right get pbox bottom get 3 -1 roll 90 0 arcn 
pbox right get pbox top get 3 -1 roll  0 270 arcn 
pbox left get pbox top get 3 -1 roll  270 180 arcn 
pbox left get pbox bottom get 3 -1 roll 180 90 arcn closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/A1 {msave
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 5 -1 roll -90 add 5 -1 roll -90 add arcn
mrestore} bind def
/A2 {msave 0 0 moveto A1 closepath mrestore} def


/BitMap {
 /buffer ^1 string def
 ^2 ^5 2 div add 792 ^3 sub ^6 2 div add translate
 ^4 57.3 mul rotate
  0 ^5 2 div sub 0 ^6 2 div sub translate
 ^5 ^6 scale
 ^5 ^6 ^7 [^5 0 0 -^6 0 ^6] {currentfile buffer readhexstring pop} image
}bind def 
/note {
gsave pbox astore pop
0 792 translate 1 -1 scale CTM currentmatrix pop exch translate
pbox right get pbox left get sub 2 div
pbox bottom get pbox top get sub 2 div
translate 57.3 mul rotate setlinewidth
noteBody aload pop moveto
noteBody length 2 div 1 sub cvi{lineto}repeat
dogEar aload pop moveto
dogEar length 2 div 1 sub cvi{lineto}repeat
0.992 0.975 0.507 setrgbcolor gsave fill grestore
gsave newpath
stickem aload pop moveto
stickem length 2 div 1 sub cvi{lineto}repeat
0.760 0.760 0.760 setrgbcolor fill 
grestore
0 0 0 setrgbcolor stroke
noteShadow aload pop moveto
noteShadow length 2 div 1 sub cvi{lineto}repeat
dogEarShadow aload pop moveto
dogEarShadow length 2 div 1 sub cvi{lineto}repeat
0 0 0 setrgbcolor gsave stroke grestore fill
grestore
}bind def


 /redTbl4   [0 0 1 1 1 1 2 2 3 3 3 4 4 4 5 5] def
 /greenTbl4 [0 1 1 2 2 3 3 4 4 5 6 6 7 7 7 8] def
 /blueTbl4  [0 0 0 0 1 1 1 1 1 1 1 1 1 2 2 2] def
 /RGB4toGray4 {
	currentfile RGBBuf readhexstring pop pop
	/i 0 def
	/j 0 def
	grayBuf length {
		RGBBuf i get dup
		-4 bitshift redTbl4 exch get
		exch 15 and greenTbl4 exch get add
		RGBBuf i 1 add  get dup
		-4 bitshift blueTbl4 exch get 3 -1 roll add  4 bitshift
		exch 15 and redTbl4 exch get
		RGBBuf i 2 add  get dup
		-4 bitshift greenTbl4 exch get 3 -1 roll add
		exch 15 and blueTbl4 exch get add or
		grayBuf j 3 -1 roll put
		/i i 3 add def
		/j j 1 add def
	} repeat
	grayBuf
} bind def
/RGB8toGray8 {
	currentfile RGBBuf readhexstring pop pop
	/i 0 def
	/j 0 def
	grayBuf length {
		RGBBuf i get 0.33 mul
		RGBBuf i 1 add get 0.55 mul add
		RGBBuf i 2 add get 0.12 mul add round cvi
		grayBuf j 3 -1 roll put
		/i i 3 add def
		/j j 1 add def
	} repeat
	grayBuf
} bind def
/RGB24toGray8 {RGB8toGray8} bind def
 /redTbl2   [0 0 1 1] def
 /greenTbl2 [0 1 1 2] def
 /blueTbl2  [0 0 0 0] def
 /RGB2toGray2 {
	currentfile RGBBuf readhexstring pop pop
	/i 0 def
	/j 0 def
	grayBuf length {
		RGBBuf i get dup dup dup
		-6 bitshift redTbl2 exch get
		exch -4 bitshift 3 and
		greenTbl2 exch get add
		exch -2 bitshift 3 and
		blueTbl2 exch get add
		6 bitshift exch 3 and
		redTbl2 exch get
		RGBBuf i 1 add  get dup dup dup
		-6 bitshift greenTbl2 exch get
		exch -4 bitshift 3 and
		blueTbl2 exch get add
		4 -1 roll add
		4 bitshift 4 -1 roll or
		3 1 roll -2 bitshift 3 and
		redTbl2 exch get exch 3 and
		greenTbl2 exch get add
		RGBBuf i 2 add  get dup dup dup
		-6 bitshift blueTbl2 exch get
		5 -1 roll add
		2 bitshift 5 -1 roll or
		4 1 roll -4 bitshift 3 and
		redTbl2 exch get
		exch -2 bitshift 3 and
		greenTbl2 exch get add
		exch 3 and
		greenTbl2 exch get add or
		grayBuf j 3 -1 roll put
		/i i 3 add def
		/j j 1 add def
	} repeat
	grayBuf
} bind def
/RGB1toGray1 {
	currentfile RGBBuf readhexstring pop pop
	/i 0 def
	/j 0 def
	grayBuf length {
		RGBBuf i get dup dup
		1 bitshift 128 and exch
		3 bitshift 64 and or exch
		5 bitshift 32 and or
		RGBBuf i 1 add get dup
		-1 bitshift 16 and exch
		1 bitshift 8 and or or
		RGBBuf i 2 add get dup dup
		-5 bitshift 4 and exch
		-3 bitshift 2 and or exch
		-1 bitshift 1 and or or
		/i i 3 add def
		/j j 1 add def
	} repeat
	grayBuf
} bind def
/RGB16toGray8 {RGB8toGray8} bind def
/ScalePoint {
	0 0
	4 -2 roll
	0 0 1 1
	8 4 roll GetBoxesRatio scale
} bind def
/PointDict 4 dict def
PointDict begin
/XPoint {
		-.5 .5 moveto
		.5 -.5 lineto
		.5 .5 moveto
		-.5 -.5 lineto
	} bind def
	/DiamondPoint {
		0.0 .5 moveto
		.5 0.0 lineto
		0.0 -0.5 lineto
		-.5 0.0 lineto
		closepath
	} bind def
	/PlusPoint {
		0.0 .5 moveto
		0.0 -.5 lineto
		-.5 0.0 moveto
		.5 0.0 lineto
	} bind def
	/SquarePoint {
		-.5 .5 moveto
		.5 .5 lineto
		.5 -.5 lineto
		-.5 -.5 lineto
		closepath
	} bind def
end
/DrawPoint {
	gsave
		[] 0 setdash
		0 setlinecap
		translate
		msave
			ScalePoint
			PointDict exch get exec
		mrestore
		1.0 setlinewidth stroke
	grestore
} bind def
/Subscriber { 
 msave 
 R PC PF LC SS newpath
 mrestore 
} bind def 
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


/rampdelta {
/len 0 3 -1 roll add def
/i2 0 3 -1 roll add def
/i1 0 3 -1 roll add def
/nRampSteps len cellPenW div cvi 1 add dup 512 gt {pop 512} if def
/rampPenW len nRampSteps div def
rampColors i1 get aload pop c1 astore pop
rampColors i2 get aload pop c2 astore pop
c2 0 get c1 0 get sub nRampSteps div d 0 3 -1 roll put
c2 1 get c1 1 get sub nRampSteps div d 1 3 -1 roll put
c2 2 get c1 2 get sub nRampSteps div d 2 3 -1 roll put
d aload pop
} bind def
/adddelta {
d astore pop
 mycurrentrgbcolor c1 copy pop
c1 0 get d 0 get add c2 0 3 -1 roll put
c1 1 get d 1 get add c2 1 3 -1 roll put
c1 2 get d 2 get add c2 2 3 -1 roll put
c2 aload pop setrgbcolor
c2 mycurrentrgbcolor copy pop
} bind def
/rampline {
segbox ulx get rampPenW add segbox ulx 3 -1 roll put
segbox llx get rampPenW add segbox llx 3 -1 roll put
segbox ulx get segbox uly get moveto
segbox llx get segbox lly get lineto
delta aload pop adddelta stroke
}bind def
/slantrampseg {
gsave newpath
segbox ulx get segbox urx get sub abs
rampdelta delta astore pop
segbox ulx get rampPenW .5 mul sub segbox ulx 3 -1 roll put
segbox llx get rampPenW .5 mul sub segbox llx 3 -1 roll put
rampColors exch get aload mycurrentrgbcolor copy pop setrgbcolor
rampPenW setlinewidth nRampSteps {rampline} repeat
grestore
}bind def
/flipramp {
rampColors 0 get rampColors 3 get rampColors 0 3 -1 roll put rampColors 3 3 -1 roll put
rampColors 1 get rampColors 2 get rampColors 1 3 -1 roll put rampColors 2 3 -1 roll put
} bind def
/leftrbox {
rbox segbox copy pop	
rbox urx get rbox ulx get sub
flipRatio mul dup 
segbox ulx get add segbox urx 3 -1 roll put
segbox llx get add segbox lrx 3 -1 roll put
} bind def
/rightrbox {
rbox segbox copy pop	
rbox urx get rbox ulx get sub
flipRatio mul dup 
segbox ulx get add segbox ulx 3 -1 roll put
segbox llx get add segbox llx 3 -1 roll put
} bind def
/drawslantramp {
segbox urx get segbox ulx get sub 3 div dup dup dup dup dup dup dup dup dup
segbox ulx get add segbox urx 3 -1 roll put
segbox llx get add segbox lrx 3 -1 roll put
segbox aload pop
0 0 1 slantrampseg
segbox astore pop
segbox ulx get add segbox ulx 3 -1 roll put
segbox llx get add segbox llx 3 -1 roll put
segbox urx get add segbox urx 3 -1 roll put
segbox lrx get add segbox lrx 3 -1 roll put
segbox aload pop
1 1 2 slantrampseg
segbox astore pop
segbox ulx get add segbox ulx 3 -1 roll put
segbox llx get add segbox llx 3 -1 roll put
segbox urx get add segbox urx 3 -1 roll put
segbox lrx get add segbox lrx 3 -1 roll put
2 2 3 slantrampseg
}bind def
/tan {
dup sin exch cos div
}bind def
/rampbox {
pbox top get dup rbox uly 3 -1 roll put rbox ury 3 -1 roll put
pbox left get dup rbox ulx 3 -1 roll put rbox llx 3 -1 roll put
pbox bottom get dup rbox lly 3 -1 roll put rbox lry 3 -1 roll put
pbox right get dup rbox urx 3 -1 roll put rbox lrx 3 -1 roll put
}bind def
/LoadSegBox {
4 copy
segbox llx 6 -1 roll put
segbox lly 5 -1 roll put
segbox lrx 4 -1 roll put
segbox lry 6 -1 roll put
segbox urx 5 -1 roll put
segbox ury 3 -1 roll put
segbox ulx 4 -1 roll put
segbox uly 3 -1 roll put
} bind def
/TransToCenter {
gsave
flattenpath
pathbbox
grestore
2 index
sub 2.0 div exch
3 index sub 2.0 div
4 -1 roll add
3 1 roll add
translate
} bind def
/RotRampGrad {
gsave
TransToCenter
-1.0 mul 180.0 add rotate
flattenpath
pathbbox 
clip
newpath
LoadSegBox
flipRatio 1 lt dup{flipramp}if flipRatio 0 gt and
{
/flipRatio 1.0 flipRatio sub def
segbox rbox copy pop leftrbox drawslantramp flipramp rightrbox drawslantramp
}
{drawslantramp} ifelse
grestore
} bind def
/bbg {
pbox exch get
} bind def
/DR {		% Directional ramp
/workingMatrix mstore def
objectCord setmatrix
flipramp
gsave
flattenpath pathbbox
grestore
pbox bottom 3 -1 roll put pbox right 3 -1 roll put pbox top 3 -1 roll put pbox left 3 -1 roll put
rampAngle RotRampGrad
RF
workingMatrix setmatrix
}bind def
/ramparc {
gsave
circum rampdelta delta astore pop
/rampPenW 60.0 nRampSteps div def
/ang1 exch rampAngle sub def 
/ang2 rampPenW ang1 add def 
rampColors exch get aload mycurrentrgbcolor copy pop setrgbcolor 1 setlinewidth
nRampSteps {ramparcseg}repeat
grestore
}bind def
/ramparcseg {
newpath
rampcenter aload pop moveto
rampcenter aload pop rampradius ang2 ang1 arcn fill
/ang1 ang2 def 
/ang2 ang2 rampPenW add def
delta aload pop adddelta
}bind def
/GetRadius {
rbox urx get rbox llx get sub 2 div rampcenter 0 get abs add dup mul
rbox lly get rbox ury get sub 2 div rampcenter 1 get abs add dup mul
add sqrt
} bind def
/circularRamp {
rampbox
/rampradius GetRadius def
CalcCrcm
flipramp
0 0 0 1 ramparc
1 60 1 2 ramparc
2 120 2 3 ramparc
flipramp
0 180 0 1 ramparc
1 240 1 2 ramparc
2 300 2 3 ramparc
}bind def
/GetCircumf {
2.0 mul 3.1415926 mul
} bind def
/CalcCrcm {
rampradius GetCircumf
/circum exch 6.0 div def
} bind def
/CR {
gsave
clip
MTC currentmatrix pop
CTM setmatrix
flattenpath
pathbbox pbox bottom 3 -1 roll put pbox right 3 -1 roll put pbox top 3 -1 roll put pbox left 3 -1 roll put
pbox left get pbox right get sub abs 2 div 
pbox left get add rampcenter 0 get add rampcenter 0 3 -1 roll put
pbox top get pbox bottom get sub abs 2 div
pbox top get add rampcenter 1 get add rampcenter 1 3 -1 roll put
circularRamp
MTC setmatrix
grestore
RF
}bind def
/SBR {
gsave
clip
/workingMatrix mstore def
objectCord setmatrix
flattenpath
/BaseBox pathbbox 4 array astore def
/len BaseBox 2 get BaseBox 0 get sub dup mul
BaseBox 3 get BaseBox 1 get sub dup mul
add sqrt
12.0 div
def
/EndBox
BaseBox aload pop
3 -1 roll sub
3 1 roll
exch sub
/dbx exch def
/dby exch def
BaseBox aload pop pop pop
/blly exch def
/bllx exch def
sbox 0 get 100.0 div dby mul blly add
sbox 1 get 100.0 div dbx mul bllx add
sbox 2 get 100.0 div dby mul blly add
sbox 3 get 100.0 div dbx mul bllx add
exch
4 -2 roll
exch
4 -2 roll
4 array astore
def
BaseBox EndBox ShapeBurst
workingMatrix setmatrix
grestore
} bind def
/GetBoxCenter {
2 index
sub 2.0 div
3 -1 roll add
3 1 roll
1 index sub
2.0 div add
exch
} bind def
/GetInterBox {
/boxInter exch def
4 1 7 {
-1 roll
7 index
} for
sub boxInter mul
8 -1 roll add
7 1 roll
sub boxInter mul
7 -1 roll add
6 1 roll
sub boxInter mul
6 -1 roll add
5 1 roll
sub boxInter mul
5 -1 roll add
4 1 roll
} bind def
/GetBoxCenterDeltas {
GetBoxCenter
6 2 roll
GetBoxCenter
3 -1 roll exch sub
3 1 roll sub
exch
} bind def
/GetBoxCornerDeltas {
pop pop
4 2 roll pop pop
3 -1 roll sub
3 1 roll exch sub
exch
} bind def
/getpath {
/k 0 def
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{}pathforall
/pfa k array def
/k 0 def
{{moveto} 3 array astore pfa k 3 -1 roll put /k k 1 add def}
{{lineto} 3 array astore pfa k 3 -1 roll put /k k 1 add def}
{{curveto} 7 array astore pfa k 3 -1 roll put /k k 1 add def}
{}pathforall
}bind def
/ShapeBurst {
getpath
newpath
/SBERect exch 4 array copy def
/SBBRect exch 4 array copy def
/interRect1 SBBRect aload pop SBERect aload pop .3333333 GetInterBox 4 array astore def
/interRect2 SBBRect aload pop SBERect aload pop .6666666 GetInterBox 4 array astore def
0 0 1 SBBRect interRect1 ShapeBurstSeg
msave
interRect1 0 get interRect1 1 get translate
SBBRect aload pop interRect1 aload pop GetBoxesRatio scale
SBBRect 0 get -1.0 mul SBBRect 1 get -1.0 mul translate
1 1 2 interRect1 interRect2 ShapeBurstSeg
mrestore
msave
interRect2 0 get interRect2 1 get translate
SBBRect aload pop interRect2 aload pop GetBoxesRatio scale
SBBRect 0 get -1.0 mul SBBRect 1 get -1.0 mul translate
2 2 3 interRect2 SBERect ShapeBurstSeg
mrestore
} bind def
/ShapeBurstSeg {
/sbr1 exch 4 array copy def
/sbr0 exch 4 array copy def
/blx sbr0 0 get def
/bly sbr0 1 get def
len rampdelta delta astore pop
sbr0 aload pop sbr1 aload pop GetBoxesRatio
/ratioY exch def
/ratioX exch def
sbr0 aload pop sbr1 aload pop GetBoxCornerDeltas
/dlly exch nRampSteps div def
/dllx exch nRampSteps div def
/scaleStepX 1.0 ratioX sub nRampSteps div def
/scaleStepY 1.0 ratioY sub nRampSteps div def
/currentScaleX 1.0 scaleStepX sub def
/currentScaleY 1.0 scaleStepY sub def
/translationX blx dllx add def
/translationY bly dlly add def
/currentScaleX 1.0  def
/currentScaleY 1.0  def
/translationX blx def
/translationY bly def
rampColors exch get aload mycurrentrgbcolor copy pop setrgbcolor
nRampSteps {
msave
translationX translationY translate
currentScaleX currentScaleY scale
blx -1.0 mul bly -1.0 mul translate
pfa {aload pop exec} forall fill
delta aload pop adddelta
/translationX translationX dllx add def
/translationY translationY dlly add def
/currentScaleX currentScaleX scaleStepX sub def
/currentScaleY currentScaleY scaleStepY sub def
mrestore
} repeat
msave
translationX translationY translate
currentScaleX currentScaleY scale
blx -1.0 mul bly -1.0 mul translate
pfa {aload pop exec} forall fill
mrestore
} bind def
initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 98.773 155.101 85.335 147.140 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 146.449 84.550 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 154.550 98.050 0.000 0.000 1.347 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 159.949 114.250 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 146.449 160.148 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 154.550 146.648 0.000 0.000 1.347 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 159.949 130.449 0.000 0.000 1.351 1.351 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 114.839 160.570 98.773 155.167 Line
/ArrowType{ } def
/SD {[2.000 2.000 ] 0 setdash} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.199 131.121 160.570 114.984 160.570 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 147.320 155.167 131.187 160.570 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 160.828 147.140 147.242 155.316 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 180.953 122.777 172.988 136.214 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 135.644 172.300 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 122.144 180.398 0.000 0.000 1.347 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 105.945 185.800 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 60.046 172.300 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 73.542 180.398 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 89.746 185.800 0.000 0.000 1.351 1.347 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 186.417 106.710 181.019 122.777 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 186.417 90.429 186.417 106.562 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 181.019 74.230 186.417 90.363 Line
/ArrowType{ } def
/SD {[2.000 2.000 ] 0 setdash} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.199 172.992 60.722 181.164 74.308 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 65.097 122.777 73.062 136.214 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 135.648 72.390 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 122.152 64.296 0.000 0.000 1.347 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 105.949 58.890 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 60.050 72.390 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 73.550 64.292 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 89.750 58.890 0.000 0.000 1.351 1.351 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 59.628 106.710 65.031 122.777 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 59.628 90.429 59.628 106.562 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 65.031 74.230 59.628 90.363 Line
/ArrowType{ } def
/SD {[2.000 2.000 ] 0 setdash} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.199 73.058 60.722 64.886 74.308 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 98.773 41.949 85.335 49.910 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 49.250 84.550 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 41.152 98.050 0.000 0.000 1.347 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 35.750 114.250 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 49.250 160.148 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 41.152 146.648 0.000 0.000 1.347 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 35.750 130.449 0.000 0.000 1.351 1.351 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 114.839 36.480 98.773 41.882 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 131.121 36.480 114.984 36.480 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 147.320 41.882 131.187 36.480 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 160.828 49.910 147.242 41.734 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 85.210 147.093 73.039 136.347 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 172.957 136.347 160.785 147.093 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 160.785 49.953 172.957 60.695 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 85.210 49.953 73.039 60.695 Line
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 161.246 110.949 0.000 0.000 12.000 10.312 rect
gsave
116.105 167.246 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) plain F
0.000 0.000 0.000 setrgbcolor 
(a) -4.025 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 161.941 128.031 0.000 0.000 12.000 10.312 rect
gsave
133.187 167.941 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(b) -3.943 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 65.425 183.425 0.000 0.000 12.000 9.636 rect
gsave
188.244 71.425 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(c) -3.549 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 50.746 176.214 0.000 0.000 12.000 10.312 rect
gsave
181.371 56.746 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(d) -3.760 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 48.617 65.781 0.000 0.000 12.000 9.636 rect
gsave
70.599 54.617 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(e) -4.193 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 64.855 57.906 0.000 0.000 12.000 7.644 rect
gsave
61.728 70.855 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(f) -3.068 4.000 S
grestore
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 249.941 155.101 236.503 147.140 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 146.449 235.718 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 154.550 249.218 0.000 0.000 1.347 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 159.949 265.417 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 146.449 311.316 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 154.550 297.816 0.000 0.000 1.347 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 159.949 281.617 0.000 0.000 1.351 1.351 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 266.007 160.570 249.941 155.167 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 298.488 155.167 282.355 160.570 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 311.996 147.140 298.410 155.316 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 332.117 122.777 324.156 136.214 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 135.644 323.468 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 122.144 331.566 0.000 0.000 1.347 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 105.945 336.968 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 60.046 323.468 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 73.542 331.566 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 89.746 336.968 0.000 0.000 1.351 1.347 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 337.585 106.710 332.187 122.777 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 337.585 90.429 337.585 106.562 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 332.187 74.230 337.585 90.363 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 216.265 122.777 224.230 136.214 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 135.648 223.558 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 122.152 215.464 0.000 0.000 1.347 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 105.949 210.058 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 60.050 223.558 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 73.550 215.460 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 89.750 210.058 0.000 0.000 1.351 1.351 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 210.796 106.710 216.199 122.777 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 210.796 90.429 210.796 106.562 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 216.199 74.230 210.796 90.363 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 249.941 41.949 236.503 49.910 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 49.250 235.718 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 41.152 249.218 0.000 0.000 1.347 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 35.750 265.417 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 49.250 311.316 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 41.152 297.816 0.000 0.000 1.347 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 35.750 281.617 0.000 0.000 1.351 1.351 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 266.007 36.480 249.941 41.882 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 298.488 41.882 282.355 36.480 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 311.996 49.910 298.410 41.734 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 236.378 147.093 224.207 136.347 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 324.125 136.347 311.953 147.093 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 311.953 49.953 324.125 60.695 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 236.378 49.953 224.207 60.695 Line
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 161.246 262.183 0.000 0.000 12.000 10.312 rect
gsave
267.339 167.246 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(a) -3.791 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 162.636 280.859 0.000 0.000 12.000 10.312 rect
gsave
286.015 168.636 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(b) -4.115 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 65.773 334.515 0.000 0.000 12.000 9.640 rect
gsave
339.335 71.773 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(c) -3.459 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 50.753 326.417 0.000 0.000 12.000 10.312 rect
gsave
331.574 56.753 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(d) -4.556 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 67.421 208.773 0.000 0.000 12.000 7.648 rect
gsave
212.597 73.421 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(f) -3.201 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 50.921 216.730 0.000 0.000 12.000 9.636 rect
gsave
221.548 56.921 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(e) -4.244 4.000 S
grestore
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 282.328 36.433 266.121 36.433 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 324.023 60.765 266.023 160.601 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 224.402 60.699 282.324 160.777 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 332.128 74.316 216.261 74.316 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 398.328 155.101 384.890 147.140 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 146.449 384.105 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 154.550 397.605 0.000 0.000 1.347 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 159.949 413.804 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 146.449 459.707 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 154.550 446.207 0.000 0.000 1.347 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 159.949 430.007 0.000 0.000 1.351 1.347 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 414.394 160.570 398.328 155.167 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 446.878 155.167 430.742 160.570 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 460.382 147.140 446.800 155.316 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 480.507 122.777 472.542 136.214 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 135.640 471.855 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 122.148 479.957 0.000 0.000 1.347 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 105.941 485.355 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 60.042 471.855 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 73.546 479.957 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 4.712 89.742 485.355 0.000 0.000 1.351 1.351 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 485.976 106.710 480.574 122.777 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 485.976 90.429 485.976 106.562 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 480.574 74.230 485.976 90.363 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 364.656 122.777 372.617 136.214 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 135.648 371.949 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 122.152 363.851 0.000 0.000 1.347 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 105.949 358.449 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 60.050 371.949 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 73.550 363.847 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 1.570 89.750 358.449 0.000 0.000 1.351 1.347 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 359.187 106.710 364.585 122.777 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 359.187 90.429 359.187 106.562 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 364.585 74.230 359.187 90.363 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 398.328 41.949 384.890 49.910 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 49.250 384.105 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 41.152 397.605 0.000 0.000 1.347 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 35.750 413.804 0.000 0.000 1.351 1.351 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 49.250 459.707 0.000 0.000 1.351 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 41.152 446.207 0.000 0.000 1.347 1.347 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.300 0 35.750 430.007 0.000 0.000 1.351 1.347 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 414.394 36.480 398.328 41.882 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 446.878 41.882 430.742 36.480 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 460.382 49.910 446.800 41.734 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 384.765 147.093 372.597 136.347 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 472.515 136.347 460.343 147.093 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 460.343 49.953 472.515 60.695 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 384.765 49.953 372.597 60.695 Line
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 161.246 410.574 0.000 0.000 12.000 10.312 rect
gsave
415.730 167.246 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(a) -4.400 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 162.636 429.679 0.000 0.000 12.000 10.312 rect
gsave
434.835 168.636 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(b) -4.295 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 64.648 482.824 0.000 0.000 12.000 9.640 rect
gsave
487.644 70.648 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(c) -4.150 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 50.664 475.140 0.000 0.000 12.000 10.312 rect
gsave
480.296 56.664 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(d) -3.834 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 65.757 358.070 0.000 0.000 12.000 7.644 rect
gsave
361.892 71.757 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(f) -2.904 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
1 0 50.218 364.246 0.000 0.000 12.000 9.640 rect
gsave
369.066 56.218 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
0.000 0.000 0.000 setrgbcolor 
(e) -3.728 4.000 S
grestore
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 430.718 36.433 414.507 36.433 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 430.695 160.601 364.656 74.179 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 472.519 60.765 414.519 160.601 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
0.300 372.585 60.683 480.687 74.246 Line
restore
end
%ps_include: inclusion end
grestore
PS-include-dict-dw begin
o 0 ne {gsave A defaultmatrix /A ed llx lly nice urx ury nice
	initgraphics 0.1 setlinewidth boxpath stroke grestore} if
clear o-stack aload pop
context end restore
%ps_include: end
%%EndDocument
DpostDict begin
/saveobj save def
mark
11 B f
(Figure 2.)1 422 1 801 5441 t
11 R f
(Two possible 3-Opt moves: original tour on the left and resulting tours on the right.)14 3680 1 1279 5441 t
12 R f
( Section)1 393( Finally,)1 434( 2- and 3-Opt might be sped up by the use of parallelism.)12 2765(algorithms like)1 728 4 720 5738 t
( consid-)1 390(3.5 briefly surveys other ``simple'' local optimization algorithms that have been)10 3930 2 720 5888 t
(ered in the literature.)3 1002 1 720 6038 t
14 B f
( Bounds on Local Search Algorithms)5 2199(3.1. Theoretical)1 964 2 720 6368 t
14 I f
(Worst-Case Results)1 1102 1 720 6628 t
12 R f
( via an arbitrary)3 827(The first question to address concerns the quality of tours obtainable)10 3493 2 720 6851 t
( arbitrary instances, such algorithms are)5 2002( For)1 244( for the TSP.)3 665(local optimization algorithm)2 1409 4 720 7001 t
( If P)2 209(constrained by Theorems A and B of Section 2.1, but something stronger can be said:)14 4111 2 720 7151 t
12 S f
(\271)720 7301 w
12 R f
( per move can guarantee)4 1264(NP, no local search algorithm that takes polynomial time)8 2936 2 840 7301 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 17 17
%%Page: 18 18
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
18 pagesetup
12 R f
(- 18 -)2 260 1 2750 500 t
12 I f
(A)720 870 w
12 R f
(\()803 870 w
12 I f
(I)853 870 w
12 R f
(\))903 870 w
12 I f
(/)953 870 w
12 R f
(OPT \()1 276 1 997 870 t
12 I f
(I)1283 870 w
12 R f
(\))1333 870 w
12 S f
(\243)1423 870 w
12 I f
(C)1529 870 w
12 R f
(for any constant)2 774 1 1639 870 t
12 I f
(C)2443 870 w
12 R f
( allowed)1 411(, even if an exponential number of moves is)8 2106 2 2523 870 t
( the unlikely event that P = NP, one can still say)11 2455( In)1 173([Papadimitriou & Steiglitz, 1977].)3 1692 3 720 1020 t
( on)1 153(that no local search algorithm with polynomial-size neighborhoods that do not depend)11 4167 2 720 1170 t
( of the inter-city distances can be guaranteed to find)9 2538(the values)1 490 2 720 1320 t
12 I f
(optimal)3783 1320 w
12 R f
(solutions in poly-)2 854 1 4186 1320 t
( restriction on algorithms is)4 1390( latter)1 293( This)1 289(nomial time [Weiner, Savage,& Bagchi, 1973].)5 2348 4 720 1470 t
( for example still allows 2-)5 1309(stronger than simply requiring polynomial time per move, but)8 3011 2 720 1620 t
(Opt, 3-Opt, and any)3 959 1 720 1770 t
12 I f
(k)1710 1770 w
12 R f
(-Opt algorithm for fixed)3 1169 1 1763 1770 t
12 I f
(k)2963 1770 w
12 R f
(, where)1 353 1 3016 1770 t
12 I f
(k)3400 1770 w
12 R f
(-Opt is the natural generalization)4 1587 1 3453 1770 t
(of 2- and 3-Opt to allow exchanges of as many as)10 2480 1 720 1920 t
12 I f
(k)3240 1920 w
12 R f
( the specific cases of 2-)5 1169(edges. For)1 539 2 3332 1920 t
(Opt, 3-Opt and)2 753 1 720 2070 t
12 I f
(k)1518 2070 w
12 R f
(-Opt with)1 479 1 1571 2070 t
12 I f
(k)2095 2070 w
12 S f
(<)2198 2070 w
12 R f
(3)2314 2070 w
12 I f
(N /)1 124 1 2384 2070 t
12 R f
( and)1 219( Papadimitriou)1 759( much worse.)2 675(8, the situation is)3 869 4 2518 2070 t
( but)1 189(Steiglitz [1978] have shown that there exist instances that have a single optimal tour)13 4131 2 720 2220 t
( tours, each of which is longer than optimal by an)10 2560(exponentially many locally optimal)3 1760 2 720 2370 t
(exponential factor.)1 901 1 720 2520 t
( tri-)1 184(The Papadimitriou and Steiglitz results mentioned above do not apply when the)11 3886 2 970 2706 t
( as)1 140( if it does hold, however, 2- and 3-Opt can fare poorly,)11 2748( Even)1 317(angle inequality holds.)2 1115 4 720 2856 t
( an)1 171( Assuming)1 576( indicate.)1 469(the following results of Chandra, Karloff, and Tovey [1994])8 3104 4 720 3006 t
( starting tour, the best performance guarantee possible)7 2639(adversary is allowed to choose the)5 1681 2 720 3156 t
( 1)1 70(for 2-Opt is a ratio of at least \()8 1567 2 720 3313 t
12 I f
(/)2367 3313 w
12 R f
(4 \))1 110 1 2411 3313 t
13 S f
(\326` `)1 172 1 2541 3313 t
12 I f
(N)2623 3313 w
12 R f
( 1)1 70( \()1 84(, and for 3-Opt it is at least)7 1381 3 2723 3313 t
12 I f
(/)4268 3313 w
12 R f
(4 \))1 110 1 4312 3313 t
12 I f
(N)4442 3313 w
9 R f
(1)4537 3265 w
9 I f
(/)4589 3265 w
9 R f
(6)4621 3265 w
12 R f
(. More)1 364 1 4676 3313 t
( best performance guarantee for)4 1538(generally, the)1 658 2 720 3463 t
12 I f
(k)2949 3463 w
12 R f
(-Opt assuming the triangle inequality is at)6 2038 1 3002 3463 t
( 1)1 70(least \()1 309 2 720 3613 t
12 I f
(/)1109 3613 w
12 R f
(4 \))1 110 1 1153 3613 t
12 I f
(N)1283 3613 w
9 R f
(1)1378 3565 w
9 I f
(/)1430 3565 w
9 R f
(2)1462 3565 w
9 I f
(k)1514 3565 w
12 R f
( can yield a ratio)4 877( the ``positive'' side, none of these algorithms)7 2345(. On)1 254 3 1564 3613 t
12 I f
(worse)720 3770 w
12 R f
(than 4)1 311 1 1051 3770 t
13 S f
(\326` `)1 172 1 1372 3770 t
12 I f
(N)1454 3770 w
12 R f
( better if we restrict attention to instances)7 2080( situation is somewhat)3 1116(. The)1 290 3 1554 3770 t
(where cities are points in)4 1238 1 720 3920 t
12 B f
(R)1997 3920 w
9 I f
(d)2090 3872 w
12 R f
(for some fixed)2 719 1 2184 3920 t
12 I f
(d)2942 3920 w
12 R f
( computed according to)3 1161(and distances are)2 838 2 3041 3920 t
( case, no)2 434( this)1 215( In)1 170(some norm for that space.)4 1285 4 720 4070 t
12 I f
(k)2863 4070 w
12 R f
(-Opt algorithm has worst-case performance)4 2124 1 2916 4070 t
(ratio worse than)2 792 1 720 4220 t
12 I f
(O)1551 4220 w
12 R f
(\( log)1 204 1 1647 4220 t
12 I f
(N)1861 4220 w
12 R f
(\), although the ratio can grow as quickly as)8 2144 1 1951 4220 t
12 S f
(Q)4135 4220 w
12 R f
(\( log)1 204 1 4234 4220 t
12 I f
(N /)1 124 1 4448 4220 t
12 R f
(log log)1 318 1 4582 4220 t
12 I f
(N)4910 4220 w
12 R f
(\))5000 4220 w
(even for)1 396 1 720 4370 t
12 B f
(R)1146 4370 w
9 R f
(2)1239 4322 w
12 R f
(under the Euclidean norm.)3 1274 1 1324 4370 t
( results hold only if we let an adversary choose our starting)11 2973(All these lower bound)3 1097 2 970 4556 t
( picks a bad solution that is already)7 1827(tours for us \(in which case, the adversary simply)8 2493 2 720 4706 t
( better worst-case)2 893( practice, of course, we can obtain significantly)7 2426( In)1 182(locally optimal\).)1 819 4 720 4856 t
( example, if)2 579( For)1 231( heuristic to generate our starting tours.)6 1912(behavior simply by using a good)5 1598 4 720 5006 t
( never be worse than)4 1044(we use Christofides to generate our starting tours, then 2-Opt will)10 3276 2 720 5156 t
( the above bounds)3 909(3/2 times optimal assuming the triangle inequality, much better than)9 3411 2 720 5306 t
( is not clear, however that)5 1271( It)1 140(would allow even for two-dimensional Euclidean instances.)6 2909 3 720 5456 t
( For)1 237( consistent improvement over its starting tour.)6 2278(either 2- or 3-Opt can guarantee any)6 1805 3 720 5606 t
( and Nemhauser [1978] for Christofides)5 1963( ejols)1 183( \302)1 45( Cornu)1 339(example, the worst-case instances of)4 1790 5 720 5756 t
( 2-Optimal, and the worst-case examples of)6 2254(are such that resulting starting tours are)6 2066 2 720 5906 t
( the resulting)2 649(Rosenkrantz, Stearns, and Lewis [1977] for Nearest Insertion are such that)10 3671 2 720 6056 t
(starting tours are)2 809 1 720 6206 t
12 I f
(k)1559 6206 w
12 R f
(-optimal for all)2 730 1 1612 6206 t
12 I f
(k)2372 6206 w
12 S f
(\243)2465 6206 w
12 I f
(N /)1 124 1 2571 6206 t
12 R f
(4.)2705 6206 w
( concerns how long)3 957(Another important question about local optimization algorithms)6 3113 2 970 6392 t
( 2-)1 142( For)1 239( a locally optimal solution.)4 1337(a sequence of moves they can make before reaching)8 2602 4 720 6542 t
(Opt and 3-Opt, this number can be quite large \(even assuming the triangle inequality)13 4320 1 720 6692 t
( that 2-)2 345( [1975] has shown that there exist instances and starting tours such)11 3242(holds\). Lueker)1 733 3 720 6842 t
(Opt will make)2 688 1 720 6992 t
12 S f
(Q)1438 6992 w
12 R f
(\( 2)1 110 1 1537 6992 t
9 I f
(N /)1 92 1 1654 6944 t
9 R f
(2)1753 6944 w
12 R f
( similar result has been proved for 3-Opt)7 1960( A)1 147(\) moves before halting.)3 1115 3 1818 6992 t
( extended to)2 619(by Chandra, Karloff, and Tovey [1994] and)6 2193 2 720 7142 t
12 I f
(k)3578 7142 w
12 R f
(-Opt for any fixed)3 918 1 3631 7142 t
12 I f
(k)4595 7142 w
12 R f
(. These)1 392 1 4648 7142 t
( pick the starting tour as well as the)8 1920(results again assume we allow an adversary to)7 2400 2 720 7292 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 46 536 764
%%EndPage: 18 18
%%Page: 19 19
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
19 pagesetup
12 R f
(- 19 -)2 260 1 2750 500 t
( for sufficiently large)3 1022(instance. However,)1 953 2 720 870 t
12 I f
(k)2726 870 w
12 R f
(even finding a good starting tour may not help)8 2231 1 2809 870 t
( that for)2 407( [1989] has shown)3 919(much. Krentel)1 729 3 720 1020 t
12 I f
(k)2818 1020 w
12 R f
(sufficiently large, the problem of finding a)6 2126 1 2914 1020 t
(locally optimal solution under the)4 1678 1 720 1170 t
12 I f
(k)2440 1170 w
12 R f
(-Opt neighborhood structure is ``PLS-complete'' as)5 2547 1 2493 1170 t
( means)1 343( This)1 280( \(see Chapter 2\).)3 811(defined by Johnson, Papadimitriou, and Yannakakis [1988])6 2886 4 720 1320 t
( overall time to find a locally optimal tour by)9 2189(that the)1 361 2 720 1470 t
12 I f
(any)3302 1470 w
12 R f
(method cannot be polynomially)3 1533 1 3507 1470 t
( value of)2 446( A)1 159( polynomial time.)2 880(bounded unless all PLS problems can be solved in)8 2513 4 720 1620 t
12 I f
(k)4761 1620 w
12 S f
(=)4864 1620 w
12 R f
(8)4980 1620 w
( reduced to)2 555(appears to suffice for Krentel's result, and this might conceivably be)10 3415 2 720 1770 t
12 I f
(k)4731 1770 w
12 S f
(=)4834 1770 w
12 R f
(6,)4950 1770 w
( the)1 190(but further reductions would require substantially new ideas [Krentel, 1994] and so)11 4130 2 720 1920 t
(question of PLS completeness for 2- and 3-Opt remains open.)9 2970 1 720 2070 t
(Another)970 2256 w
12 I f
(caveat)1404 2256 w
12 R f
(about some of the above results, in particular those of Lueker and)11 3282 1 1758 2256 t
(Chandra et al., is that they also assume that the adversary is able to choose the improving)16 4320 1 720 2406 t
( the terminology of Chapter 2, the adver-)7 1983( In)1 162( one exists.)2 542(move to be made when more than)6 1633 4 720 2556 t
( if the algorithm can make its own choices,)8 2075( Even)1 307( rule.'')1 328(sary gets to choose the ``pivoting)5 1610 4 720 2706 t
( [1995] has shown that given an)6 1594( Fischer)1 424( can be hard.)3 642(however, making the best choices)4 1660 4 720 2856 t
( and a tour, the problem of finding the closest locally optimal tour is)13 3361(instance of the TSP)3 959 2 720 3006 t
(NP-hard, even if that local optima is only a polynomial number of moves away.)13 3836 1 720 3156 t
( on the numbers of moves)5 1290(At present, we do not know any nontrivial upper bounds)9 2780 2 970 3342 t
( is one interesting related result, how-)6 1814( There)1 339( to reach local optimality.)4 1234(that may be needed)3 933 4 720 3492 t
( we restrict our attention to 2-dimensional instances, and consider only 2-)11 3611(ever. Suppose)1 709 2 720 3642 t
(Opt moves that remove)3 1128 1 720 3792 t
12 I f
(crossings)1879 3792 w
12 R f
( two edges that inter-)4 1015(, i.e. those that delete from the tour)7 1691 2 2334 3792 t
( the triangle inequality, such moves cannot cause the)8 2558( By)1 203(sect at a common internal point.)5 1559 3 720 3942 t
( Such)1 300( decrease\).)1 512(length of the tour to increase \(under the Euclidean norm, the length must)12 3508 3 720 4092 t
( be improving moves)3 1046( there can)2 482( \(Indeed,)1 464(a move may introduce new crossings, however.)6 2328 4 720 4242 t
( and)1 203( as shown by van Leeuwen)5 1299( Nevertheless,)1 711(that increase the total number of crossings.\))6 2107 4 720 4392 t
( most)1 270(Schoone [1980], at)2 918 2 720 4542 t
12 I f
(N)1943 4542 w
9 R f
(3)2038 4494 w
12 R f
( the)1 182( Thus)1 305(uncrossing moves suffice to remove all crossings.)6 2425 3 2128 4542 t
( moves are allowed will perform at)6 1736(restricted version of 2-Opt in which only uncrossing)7 2584 2 720 4692 t
(most)720 4842 w
12 I f
(O)988 4842 w
12 R f
(\()1084 4842 w
12 I f
(N)1134 4842 w
9 R f
(3)1229 4794 w
12 R f
( where)1 326( exist)1 261( \(Examples)1 577(\) moves for any 2-dimensional instance.)5 1945 4 1294 4842 t
12 S f
(Q)4437 4842 w
12 R f
(\()4536 4842 w
12 I f
(N)4586 4842 w
9 R f
(2)4681 4794 w
12 R f
(\) such)1 294 1 4746 4842 t
(moves are required.\))2 990 1 720 4992 t
(To complete our discussion of running times, we need to consider the time per move)14 4070 1 970 5178 t
( includes the time needed to)5 1431( This)1 292(as well as the number of moves.)6 1653 3 720 5328 t
12 I f
(find)4143 5328 w
12 R f
(an improving)1 662 1 4378 5328 t
( the time needed to)4 931(move \(or verify that none exists\), together with)7 2292 2 720 5478 t
12 I f
(perform)3977 5478 w
12 R f
( In)1 164(the move.)1 478 2 4398 5478 t
(the worst-case, 2- and 3-Opt require)5 1758 1 720 5628 t
12 S f
(W)2513 5628 w
12 R f
(\()2615 5628 w
12 I f
(N)2665 5628 w
9 R f
(2)2760 5580 w
12 R f
(\) and)1 248 1 2825 5628 t
12 S f
(W)3107 5628 w
12 R f
(\()3209 5628 w
12 I f
(N)3259 5628 w
9 R f
(3)3354 5580 w
12 R f
(\) time respectively to verify local)5 1621 1 3419 5628 t
( actual cost may be)4 1001( The)1 266(optimality, assuming all possible moves must be considered.)7 3053 3 720 5778 t
( time to per-)3 610( The)1 252( on the data structures used for representing the tour.)9 2584(higher, depending)1 874 4 720 5928 t
( move also depends on the data structures used, and there are tradeoffs involved)13 3992(form a)1 328 2 720 6078 t
( structure, one)2 692( an array data)3 664( Using)1 352([Fredman, Johnson, McGeoch, and Ostheimer, 1995].)5 2612 4 720 6228 t
( a move to)3 525(can reduce the cost of evaluating)5 1607 2 720 6378 t
12 S f
(Q)2889 6378 w
12 R f
( while spending)2 775(\( 1 \))2 160 2 2988 6378 t
12 S f
(Q)3960 6378 w
12 R f
(\()4059 6378 w
12 I f
(N)4109 6378 w
12 R f
(\) time to actually)3 841 1 4199 6378 t
( tree data structure of Sleator and Tarjan [1985], one can)10 2797( the splay)2 479( Using)1 356(make a move.)2 688 4 720 6528 t
(make both operations cost)3 1295 1 720 6678 t
12 S f
(Q)2058 6678 w
12 R f
(\( log)1 204 1 2157 6678 t
12 I f
(N)2371 6678 w
12 R f
( a reasonable computational model, the)5 1948(\). Assuming)1 631 2 2461 6678 t
( \(over both types of operation\) must be)7 2209(worst-case amortized cost per operation)4 2111 2 720 6828 t
12 S f
(W)720 6978 w
12 R f
(\( log)1 204 1 822 6978 t
12 I f
(N /)1 124 1 1036 6978 t
12 R f
(log log)1 318 1 1170 6978 t
12 I f
(N)1498 6978 w
12 R f
(\) [Fredman, Johnson, McGeoch, and Ostheimer, 1995].)6 2657 1 1588 6978 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 77 536 764
%%EndPage: 19 19
%%Page: 20 20
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
20 pagesetup
12 R f
(- 20 -)2 260 1 2750 500 t
14 I f
(Bounds on Expected Behavior)3 1690 1 720 870 t
12 R f
( an)1 156(Many of the questions raised in the previous section have also been addressed from)13 4164 2 720 1093 t
(average-case point of view, in particular for random Euclidean instances and their gener-)12 4320 1 720 1243 t
( present we do not know how to)7 1641( At)1 195( and other metrics.)3 940(alizations to higher dimensions)3 1544 4 720 1393 t
(prove tight bounds on the expected performance ratios for sophisticated TSP heuristics)11 4320 1 720 1543 t
( the case of 2-Opt, however, a first step may have)10 2470( In)1 169(like 2- and 3-Opt in these models.)6 1681 3 720 1693 t
( that for any)3 644(been provided by Chandra, Karloff, and Tovey [1994], who have shown)10 3676 2 720 1843 t
(fixed dimension)1 779 1 720 1993 t
12 I f
(d)1529 1993 w
12 R f
( ratio of the length of the)6 1202(, the expected)2 663 2 1589 1993 t
12 I f
(worst)3485 1993 w
12 R f
(2-optimal tour to the opti-)4 1256 1 3784 1993 t
( means that on average 2-Opt can be no)8 1979( This)1 284( bounded by a constant.)4 1177(mal tour length is)3 880 4 720 2143 t
( which is a significant improvement over what)7 2311(worse than some constant times optimal,)5 2009 2 720 2293 t
(we could say in the worst case.)6 1490 1 720 2443 t
( obtained with respect to running time, assum-)7 2295(Analogous improvements have been)3 1775 2 970 2629 t
( above 2-dimensional average case)4 1761(ing we compare the unrestricted worst case to the)8 2559 2 720 2779 t
( required)1 451( in the worst case an exponential number of moves may be)11 3039(model. Whereas)1 830 3 720 2929 t
( moves \(even starting from the)5 1488(before local optimality is reached, the expected number of)8 2832 2 720 3079 t
( the)1 197( Under)1 379(worst possible tour\) is polynomially bounded in the 2-dimensional model.)9 3744 3 720 3229 t
(Euclidean metric the bound is)4 1592 1 720 3379 t
12 I f
(O)2381 3379 w
12 R f
(\()2477 3379 w
12 I f
(N)2527 3379 w
9 R f
(10)2622 3331 w
12 R f
(log)2732 3379 w
12 I f
(N)2896 3379 w
12 R f
(\) and under the rectilinear metric it is)7 2054 1 2986 3379 t
12 I f
(O)720 3529 w
12 R f
(\()816 3529 w
12 I f
(N)866 3529 w
9 R f
(6)961 3481 w
12 R f
(log)1026 3529 w
12 I f
(N)1190 3529 w
12 R f
( Chandra, Karloff, and Tovey [1994], improving on earlier)8 3001(\), as shown by)3 759 2 1280 3529 t
( method for generating starting tours with expected)7 2650( a)1 111( Given)1 381(results of Kern [1989].)3 1178 4 720 3679 t
(length)720 3829 w
12 I f
(cN)1067 3829 w
9 R f
(1)1215 3781 w
9 I f
(/)1267 3781 w
9 R f
(2)1299 3781 w
12 R f
( heuris-)1 381(\(as we would presumably get from most of our tour-construction)9 3259 2 1400 3829 t
( bounds can be reduced by a factor of)8 1886(tics\), these)1 527 2 720 3979 t
12 I f
(N)3174 3979 w
9 R f
(1)3269 3931 w
9 I f
(/)3321 3931 w
9 R f
(2)3353 3931 w
12 R f
( so, as we shall see in the)7 1285(. Even)1 347 2 3408 3979 t
( expected value of the number)5 1465(next section, the bounds substantially overestimate the true)7 2855 2 720 4129 t
(of moves.)1 474 1 720 4279 t
14 B f
( Results for 2-Opt and 3-Opt)5 1713(3.2. Experimental)1 1096 2 720 4609 t
12 R f
( we shall summarize experimental results obtained for our testbed instances)10 3644(In this section)2 676 2 720 4832 t
(using the)1 443 1 720 4982 t
12 I f
(neighbor-list)1198 4982 w
12 R f
( Johnson, Bentley, McGeoch,)3 1432(implementations of 2- and 3-Opt by)5 1752 2 1856 4982 t
( be sketched in the next sec-)6 1366( details of the implementation will)5 1662( Key)1 260(and Rothberg [1996].)2 1032 4 720 5132 t
( now)1 238( For)1 230( full picture and additional results can be found in the reference itself.)12 3385(tion. The)1 467 4 720 5282 t
( tradeoffs, giving up the guar-)5 1460(it should be noted that these implementations make certain)8 2860 2 720 5432 t
( tour)1 238( Neither)1 434( 3-optimality in favor of greatly reduced running time.)8 2728(antee of true 2- or)4 920 4 720 5582 t
( the numbers of moves made appear to be substantially affected by these)12 3772(quality nor)1 548 2 720 5732 t
(changes, however, at least for our random Euclidean instances.)8 3024 1 720 5882 t
( for the random Euclidean and random distance matrix)8 2727(Table 3 covers tour quality)4 1343 2 970 6068 t
( of the tour construction heuristics for each class)8 2435(instances in our testbed, with the best)6 1885 2 720 6218 t
( the 2- and 3-Opt results, starting tours were gen-)9 2408( For)1 232( a point of comparison.)4 1132(included as)1 548 4 720 6368 t
( of choosing the short-)4 1086( Instead)1 408( Greedy heuristic.)2 859(erated using a randomized version of the)6 1967 4 720 6518 t
( with the short-)3 735(est legal edge to add to the partial tour, we choose among the shortest two,)14 3585 2 720 6668 t
(est having probability 2)3 1200 1 720 6818 t
12 I f
(/)1930 6818 w
12 R f
( average, this randomized version has)5 1903( On)1 225( being chosen.)2 728(3 of)1 210 4 1974 6818 t
( results presented are)3 1041( The)1 256(essentially the same tour quality as the true Greedy heuristic.)9 3023 3 720 6968 t
( instance, although not enough to ensure narrow con-)8 2559(averages over multiple runs for each)5 1761 2 720 7118 t
( see the reference for)4 1025(fidence intervals on the averages, especially for the small instances;)9 3295 2 720 7268 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 20 20
%%Page: 21 21
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
21 pagesetup
12 R f
(- 21 -)2 260 1 2750 500 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 875 t
11 R f
(Average Percent Excess over the Held-Karp Lower Bound)7 2571 1 1594 1025 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 1075 t
10 I f
(N)1196 1225 w
10 R f
(= 10)1 335 1 1338 1225 t
7 R f
(2)1678 1185 w
10 R f
(10)1900 1225 w
7 R f
(2. 5)1 93 1 2005 1185 t
10 R f
(10)2285 1225 w
7 R f
(3)2390 1185 w
10 R f
(10)2612 1225 w
7 R f
(3. 5)1 93 1 2717 1185 t
10 R f
(10)2997 1225 w
7 R f
(4)3102 1185 w
10 R f
(10)3324 1225 w
7 R f
(4. 5)1 93 1 3429 1185 t
10 R f
(10)3709 1225 w
7 R f
(5)3814 1185 w
10 R f
(10)4036 1225 w
7 R f
(5. 5)1 93 1 4141 1185 t
10 R f
(10)4421 1225 w
7 R f
(6)4526 1185 w
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 1275 t
10 R f
(Random Euclidean Instances)2 1159 1 2491 1425 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 1475 t
10 R f
( 18.8 17.0 16.8 16.6 14.7 14.9 14.5 14.2)8 2848(GR 19.5)1 589 2 1161 1625 t
( 10.7 11.3 11.8 11.9 12.0 12.1 12.1 12.2)8 2848(CW 9.2)1 589 2 1161 1745 t
( \261 \261)2 712( 9.9 9.7 9.8 9.9 9.8 9.9)6 2136(CHR 9.5)1 589 3 1161 1865 t
(2-Opt 4.5 4.8 4.9 4.9 5.0 4.8 4.9 4.8 4.9)9 3437 1 1161 1985 t
(3-Opt 2.5 2.5 3.1 3.0 3.0 2.9 3.0 2.9 3.0)9 3437 1 1161 2105 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 2125 t
10 R f
(Random Distance Matrices)2 1087 1 2527 2275 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 2325 t
10 R f
( \261 \261 \261)3 1068( 160 170 200 250 280)5 1780(GR 100)1 589 3 1161 2445 t
( \261 \261 \261)3 1068( 125 150)2 712(2-Opt 34 51 70 87)4 1657 3 1161 2565 t
( \261 \261 \261)3 1068(3-Opt 10 20 33 46 63 80)6 2369 2 1161 2685 t
10 S f
( \347)1 -3537(_ ______________________________________________________________________)1 3537 2 1111 2735 t
(\347)1111 2675 w
(\347)1111 2575 w
(\347)1111 2475 w
(\347)1111 2375 w
(\347)1111 2275 w
(\347)1111 2175 w
(\347)1111 2075 w
(\347)1111 1975 w
(\347)1111 1875 w
(\347)1111 1775 w
(\347)1111 1675 w
(\347)1111 1575 w
(\347)1111 1475 w
(\347)1111 1375 w
(\347)1111 1275 w
(\347)1111 1175 w
(\347)1111 1075 w
(\347)1111 975 w
(\347)1469 2735 w
(\347)1469 2675 w
(\347)1469 2575 w
(\347)1469 2475 w
(\347)1469 2375 w
(\347)1469 2275 w
(\347)1469 2175 w
(\347)1469 2075 w
(\347)1469 1975 w
(\347)1469 1875 w
(\347)1469 1775 w
(\347)1469 1675 w
(\347)1469 1575 w
(\347)1469 1475 w
(\347)1469 1375 w
(\347)4648 2735 w
(\347)4648 2675 w
(\347)4648 2575 w
(\347)4648 2475 w
(\347)4648 2375 w
(\347)4648 2275 w
(\347)4648 2175 w
(\347)4648 2075 w
(\347)4648 1975 w
(\347)4648 1875 w
(\347)4648 1775 w
(\347)4648 1675 w
(\347)4648 1575 w
(\347)4648 1475 w
(\347)4648 1375 w
(\347)4648 1275 w
(\347)4648 1175 w
(\347)4648 1075 w
(\347)4648 975 w
11 B f
(Table 3.)1 381 1 1120 2975 t
11 R f
(Tour quality for 2- and 3-Opt, plus selected tour generation heuristics.)10 3083 1 1557 2975 t
12 R f
(details.)720 3257 w
(Note that for Euclidean instances, 2-Opt averages about 5 percentage points better)11 4070 1 970 3443 t
( it is started)3 602(than Christofides, the best of our tour construction heuristics, even though)10 3718 2 720 3593 t
( is another 2 percentage)4 1180( 3-Opt)1 350( average 5 to 10 percentage points worse.)7 2056(from tours that)2 734 4 720 3743 t
(points better still, and at 3)5 1267 1 720 3893 t
12 I f
(%)1987 3893 w
12 R f
( the Held-Karp lower bound it may already be as)9 2361(excess over)1 559 2 2120 3893 t
( consid-)1 388( random distance matrix instances, the story is)7 2247( For)1 230(good as one needs in practice.)5 1455 4 720 4043 t
( both 2- and 3-Opt offer substantial improvements over)8 2698( Although)1 519(erably less impressive.)2 1103 3 720 4193 t
( tour quality is still)4 997(the best of our tour generation heuristics on these instances, their)10 3323 2 720 4343 t
( rate as)2 358(decaying at a relatively steady)4 1495 2 720 4493 t
12 I f
(N)2612 4493 w
12 R f
(increases, the excess over the Held-Karp lower)6 2309 1 2731 4493 t
(bound seeming to grow roughly as log)6 2017 1 720 4643 t
12 I f
(N)2747 4643 w
12 R f
( observed for Greedy and NN.)5 1595(, just as we)3 618 2 2827 4643 t
(Results for our testbed of)4 1244 1 720 4793 t
12 C f
(TSPLIB)2001 4793 w
12 R f
(instances are once again similar to those for the ran-)9 2570 1 2470 4793 t
( average about 6.9)3 918( They)1 319( a bit worse.)3 626(dom Euclidean instances, although)3 1712 4 720 4943 t
12 I f
(%)4295 4943 w
12 R f
(above Held-)1 602 1 4438 4943 t
(Karp for 2-Opt and 4.6)4 1146 1 720 5093 t
12 I f
(%)1866 5093 w
12 R f
( a bit if we)4 554(for 3-Opt, although these figures can be improved)7 2479 2 2007 5093 t
(are willing to spend more time and space in looking for moves.)11 3039 1 720 5243 t
( gross disparity between the results in Table 3 \(even the ones for random)13 3585(There is a)2 485 2 970 5429 t
( that for those bounds)4 1046( Given)1 355(distance matrices\) and the worst-case bounds of Section 3.1.)8 2919 3 720 5579 t
(we allowed an adversary to choose the starting tour, it is natural to ask to what extent our)17 4320 1 720 5729 t
( Table 4 we compare)4 1009( In)1 162(experimental results are dependent on our choice of starting tour.)9 3149 3 720 5879 t
( of random starting tours\) on the)6 1587(results for different starting heuristics \(including the use)7 2733 2 720 6029 t
( same general picture emerges for other)6 2033( The)1 268(1000-city instances in our two testbeds.)5 2019 3 720 6179 t
(choices of)1 493 1 720 6329 t
12 I f
(N)1246 6329 w
12 R f
( all the numbers are bigger for)6 1479(, although in the random distance matrix case,)7 2235 2 1326 6329 t
(larger)720 6479 w
12 I f
(N)1030 6479 w
12 R f
(.)1110 6479 w
( most striking observation is that the worst per-)8 2306(For random Euclidean instances, the)4 1764 2 970 6665 t
( the best.)2 497(centage excesses do not correspond to the worst starting heuristic but to)11 3823 2 720 6815 t
( significant margin, the results of)5 1707(Although CW produces the best starting tours by a)8 2613 2 720 6965 t
( those for any of the other starting)7 1738(applying 2- and 3-Opt to such tours are worse than)9 2582 2 720 7115 t
( first)1 247( As)1 215( CW.)1 275( is not an isolated property of)6 1536( This)1 295(heuristics, including random starts.)3 1752 6 720 7265 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 49 536 764
%%EndPage: 21 21
%%Page: 22 22
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
22 pagesetup
12 R f
(- 22 -)2 260 1 2750 500 t
10 S f
(_ _______________________________________________________________________)1 3568 1 1096 875 t
11 R f
(Average Percent Excess over the Held-Karp Lower Bound,)7 2599 1 1344 1025 t
11 I f
(N)3971 1025 w
11 S f
(=)4090 1025 w
11 R f
(1000)4196 1025 w
10 S f
(_ _______________________________________________________________________)1 3568 1 1096 1075 t
10 R f
( Distance Matrices)2 748( Random)1 704(Random Euclidean Instances)2 1159 3 1877 1225 t
10 S f
(_ _______________________________________________________________________)1 3568 1 1096 1275 t
10 R f
( 2-Opt 3-Opt)2 992( Start)1 496( 2-Opt 3-Opt)2 992(Algorithm Start)1 988 4 1146 1425 t
10 S f
(_ _______________________________________________________________________)1 3568 1 1096 1475 t
10 R f
( 55)1 496( 290)1 496( 24500)1 496( 7.9 3.8)2 992(Random 2150)1 988 5 1146 1625 t
( 96 39)2 992( 240)1 496( 6.6 3.6)2 992(NN 25.9)1 988 4 1146 1745 t
( 70 33)2 992( 170)1 496( 4.9 3.1)2 992(Greedy 17.6)1 988 4 1146 1865 t
( 56)1 496( 980 380)2 992( 8.5 5.0)2 992(CW 11.4)1 988 4 1146 1985 t
10 S f
( \347)1 -3568(_ _______________________________________________________________________)1 3568 2 1096 2035 t
(\347)1096 1975 w
(\347)1096 1875 w
(\347)1096 1775 w
(\347)1096 1675 w
(\347)1096 1575 w
(\347)1096 1475 w
(\347)1096 1375 w
(\347)1096 1275 w
(\347)1096 1175 w
(\347)1096 1075 w
(\347)1096 975 w
(\347)1713 2035 w
(\347)1713 1975 w
(\347)1713 1875 w
(\347)1713 1775 w
(\347)1713 1675 w
(\347)1713 1575 w
(\347)1713 1475 w
(\347)1713 1375 w
(\347)1713 1275 w
(\347)1713 1175 w
(\347)3201 2035 w
(\347)3201 1975 w
(\347)3201 1875 w
(\347)3201 1775 w
(\347)3201 1675 w
(\347)3201 1575 w
(\347)3201 1475 w
(\347)3201 1375 w
(\347)3201 1275 w
(\347)3201 1175 w
(\347)4664 2035 w
(\347)4664 1975 w
(\347)4664 1875 w
(\347)4664 1775 w
(\347)4664 1675 w
(\347)4664 1575 w
(\347)4664 1475 w
(\347)4664 1375 w
(\347)4664 1275 w
(\347)4664 1175 w
(\347)4664 1075 w
(\347)4664 975 w
11 B f
(Table 4.)1 381 1 1263 2275 t
11 R f
(Tour quality for 2- and 3-Opt using different starting heuristics.)9 2797 1 1700 2275 t
12 R f
( better final results for 2- and 3-Opt)7 1811(observed by Bentley [1992], Greedy starts provide)6 2509 2 720 2557 t
( heuristic, including those that provide better tours)7 2483(than any other known starting)4 1471 2 720 2707 t
12 I f
(per se)1 298 1 4712 2707 t
12 R f
(,)5010 2707 w
( appears that if local)4 983( It)1 136(such as Farthest Insertion and fast approximations to Christofides.)8 3201 3 720 2857 t
( contain some)2 702(optimization is to make substantial improvements, its starting tour must)9 3618 2 720 3007 t
( exploitable defects, and if a tour is too good it may not have enough of these.)16 3819(number of)1 501 2 720 3157 t
( Table 4, better start-)4 1009(Note, however, that among the remaining three heuristics covered in)9 3311 2 720 3307 t
( better final tours, albeit with the range of differences substantially)10 3414(ing tours do yield)3 906 2 720 3457 t
( starts and the other)4 942(compressed, especially in the case of the comparison between random)9 3378 2 720 3607 t
( CW, the same remark holds for our random distance matrix)10 3104( Ignoring)1 494(two heuristics.)1 722 3 720 3757 t
( here the range of initial dif-)6 1404(instances: better starting tours yield better results \(although)7 2916 2 720 3907 t
( again is an)3 547( CW)1 254( by local optimization\).)3 1127(ferences is perhaps not compressed quite as much)7 2392 4 720 4057 t
( its)1 150(outlier, yielding final results that are worse than those for random starts, even though)13 4170 2 720 4207 t
(initial tours are far better than random ones.)7 2111 1 720 4357 t
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 4512 t
11 R f
(\(Average Number of Moves Made\))4 1551 1 2047 4662 t
11 I f
(/ N)1 114 1 3598 4662 t
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 4712 t
10 I f
(N)1290 4862 w
10 R f
(= 10)1 344 1 1432 4862 t
7 R f
(2)1781 4822 w
10 R f
(10)2022 4862 w
7 R f
(2. 5)1 93 1 2127 4822 t
10 R f
(10)2426 4862 w
7 R f
(3)2531 4822 w
10 R f
(10)2772 4862 w
7 R f
(3. 5)1 93 1 2877 4822 t
10 R f
(10)3176 4862 w
7 R f
(4)3281 4822 w
10 R f
(10)3522 4862 w
7 R f
(4. 5)1 93 1 3627 4822 t
10 R f
(10)3926 4862 w
7 R f
(5)4031 4822 w
10 R f
(10)4272 4862 w
7 R f
(5. 5)1 93 1 4377 4822 t
10 R f
(10)4676 4862 w
7 R f
(6)4781 4822 w
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 4912 t
10 R f
( Euclidean Instances)2 820( Random)1 1568(Greedy Starts)1 546 3 896 5062 t
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 5112 t
10 R f
( 0.185 0.182 0.173 0.169 0.154 0.152 0.150 0.147)8 3000(2-Opt 0.189)1 967 2 896 5262 t
( 0.256 0.248 0.238 0.233 0.211 0.213 0.209 0.207)8 3000(3-Opt 0.273)1 967 2 896 5382 t
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 5432 t
10 R f
(Random Starts)1 592 1 896 5582 t
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 5632 t
10 R f
( 2.36 2.67 2.87 3.01 3.14 3.26 3.37 3.48)8 3000(2-Opt 1.87)1 967 2 896 5782 t
( 1.36 1.48 1.64 1.77 1.90 2.04 2.18 2.33)8 3000(3-Opt 1.19)1 967 2 896 5902 t
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 5922 t
10 R f
( Distance Matrices)2 748( Random)1 1604(Greedy Starts)1 546 3 896 6072 t
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 6122 t
10 R f
( \261 \261 \261)3 1125( 0.086 0.042 0.021 0.010 0.004)5 1875(2-Opt 0.131)1 967 3 896 6272 t
( \261 \261 \261)3 1125( 0.216 0.144 0.082 0.057 0.030)5 1875(3-Opt 0.270)1 967 3 896 6392 t
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 6442 t
10 R f
(Random Starts)1 592 1 896 6592 t
10 S f
(_ _________________________________________________________________________________)1 4067 1 846 6642 t
10 R f
( \261 \261 \261)3 1125( 1.56 1.56 1.55 1.55 1.55)5 1875(2-Opt 1.44)1 967 3 896 6792 t
( \261 \261 \261)3 1125( 1.30 1.28 1.21 1.12 1.07)5 1875(3-Opt 1.19)1 967 3 896 6912 t
10 S f
( \347)1 -4067(_ _________________________________________________________________________________)1 4067 2 846 6962 t
(\347)846 6912 w
(\347)846 6812 w
(\347)846 6712 w
(\347)846 6612 w
(\347)846 6512 w
(\347)846 6412 w
(\347)846 6312 w
(\347)846 6212 w
(\347)846 6112 w
(\347)846 6012 w
(\347)846 5912 w
(\347)846 5812 w
(\347)846 5712 w
(\347)846 5612 w
(\347)846 5512 w
(\347)846 5412 w
(\347)846 5312 w
(\347)846 5212 w
(\347)846 5112 w
(\347)846 5012 w
(\347)846 4912 w
(\347)846 4812 w
(\347)846 4712 w
(\347)846 4612 w
(\347)1563 6962 w
(\347)1563 6912 w
(\347)1563 6812 w
(\347)1563 6712 w
(\347)1563 6612 w
(\347)1563 6512 w
(\347)1563 6412 w
(\347)1563 6312 w
(\347)1563 6212 w
(\347)1563 6112 w
(\347)1563 6012 w
(\347)1563 5912 w
(\347)1563 5812 w
(\347)1563 5712 w
(\347)1563 5612 w
(\347)1563 5512 w
(\347)1563 5412 w
(\347)1563 5312 w
(\347)1563 5212 w
(\347)1563 5112 w
(\347)1563 5012 w
(\347)4913 6962 w
(\347)4913 6912 w
(\347)4913 6812 w
(\347)4913 6712 w
(\347)4913 6612 w
(\347)4913 6512 w
(\347)4913 6412 w
(\347)4913 6312 w
(\347)4913 6212 w
(\347)4913 6112 w
(\347)4913 6012 w
(\347)4913 5912 w
(\347)4913 5812 w
(\347)4913 5712 w
(\347)4913 5612 w
(\347)4913 5512 w
(\347)4913 5412 w
(\347)4913 5312 w
(\347)4913 5212 w
(\347)4913 5112 w
(\347)4913 5012 w
(\347)4913 4912 w
(\347)4913 4812 w
(\347)4913 4712 w
(\347)4913 4612 w
11 B f
(Table 5.)1 381 1 1473 7202 t
11 R f
(Normalized numbers of moves made by 2- and 3-Opt.)8 2377 1 1910 7202 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 55 536 764
%%EndPage: 22 22
%%Page: 23 23
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
23 pagesetup
12 R f
(- 23 -)2 260 1 2750 500 t
( the question of the)4 934(Let us now turn to issues related to running time, beginning with)11 3136 2 970 870 t
( up against the worst-case)4 1245( well do the actual numbers stack)6 1614( How)1 294(number of moves made.)3 1167 4 720 1020 t
( which gives the)3 844( Table 5,)2 461( See)1 252(and average-case bounds of the previous two sections?)7 2763 4 720 1170 t
( moves made under Greedy and random starts for our two)10 2824(average numbers of improving)3 1496 2 720 1320 t
( ease comparisons for different numbers of cities, we)8 2658( To)1 207(testbeds of random instances.)3 1455 3 720 1470 t
( dividing each average count by)5 1570(have normalized by)2 965 2 720 1620 t
12 I f
(N)3293 1620 w
12 R f
( random Euclidean instances)3 1402(. For)1 265 2 3373 1620 t
( and 3-Opt are)3 728(and Greedy starts, the average numbers of moves made by 2-)10 3057 2 720 1770 t
12 I f
(O)4548 1770 w
12 R f
(\()4644 1770 w
12 I f
(N)4694 1770 w
12 R f
(\) and)1 256 1 4784 1770 t
(may well even be)3 849 1 720 1920 t
12 I f
(o)1601 1920 w
12 R f
(\()1671 1920 w
12 I f
(N)1721 1920 w
12 R f
(\), with 3-Opt making about 50)5 1472 1 1811 1920 t
12 I f
(%)3283 1920 w
12 R f
( ran-)1 224( For)1 228( 2-Opt.)1 341(more moves than)2 832 4 3415 1920 t
( average number of improving moves seems to grow)8 2657(dom starts on the other hand, the)6 1663 2 720 2070 t
(superlinearly with)1 876 1 720 2220 t
12 I f
(N)1630 2220 w
12 R f
(, with)1 278 1 1710 2220 t
12 S f
(Q)2022 2220 w
12 R f
(\()2121 2220 w
12 I f
(N)2171 2220 w
12 R f
(log)2261 2220 w
12 I f
(N)2425 2220 w
12 R f
( The)1 249( both algorithms.)2 826(\) being a reasonable guess for)5 1450 3 2515 2220 t
( many moves as it did)5 1073(numbers also start out much larger, with 2-Opt making 10 times as)11 3247 2 720 2370 t
(from Greedy starts when)3 1202 1 720 2520 t
12 I f
(N)1955 2520 w
12 S f
(=)2085 2520 w
12 R f
( also that now 2-Opt makes more moves than 3-)9 2333(100. Note)1 506 2 2201 2520 t
( when)1 304(Opt \(presumably because 3-Opt is able to obtain bigger improvements per move)11 4016 2 720 2670 t
(one starts from a horrible tour\).)5 1510 1 720 2820 t
( the average)2 601( Now)1 303( matrices, the story is somewhat different.)6 2084(With random distance)2 1082 4 970 3006 t
( made from Greedy starts is definitely sublinear within the range of)11 3302(numbers of moves)2 902 2 720 3156 t
12 I f
(N)4960 3156 w
12 R f
( as)1 134( it doesn't even seem to grow as fast)8 1773( Indeed,)1 419(covered by the table.)3 1009 4 720 3306 t
12 I f
(N)4089 3306 w
9 R f
(1)4184 3258 w
9 I f
(/)4236 3258 w
9 R f
(2)4268 3258 w
12 R f
( inability)1 437(. The)1 280 2 4323 3306 t
( 3-Opt to find many improving moves may help explain their inability to over-)13 3871(of 2- and)2 449 2 720 3456 t
( random starts, where)3 1043( For)1 230( on these instances.)3 937(come the poor quality of their starting tours)7 2110 4 720 3606 t
( improving moves are made, although the)6 2006(a lot more improvement is possible, many more)7 2314 2 720 3756 t
(number appears still to be)4 1243 1 720 3906 t
12 I f
(O)1993 3906 w
12 R f
(\()2089 3906 w
12 I f
(N)2139 3906 w
12 R f
(\) for 2-Opt and sublinear for 3-Opt.)6 1704 1 2229 3906 t
( Table 6, which restricts attention to results)7 2086( See)1 234( at running times.)3 846(Finally, let us look)3 904 4 970 4092 t
( the times for the best of the starting heuristics as a point of)13 2865( include)1 386( We)1 228(for Greedy starts.)2 841 4 720 4242 t
( 2- and 3-Opt into)4 897(comparison, and we also show the breakdown of the running time for)11 3423 2 720 4392 t
( construction of neighbor lists, as will be explained in the next section\),)12 3435(preprocessing \(the)1 885 2 720 4542 t
( to 2- or 3-Optimization.)4 1284(starting tour construction, and the time specifically devoted)7 3036 2 720 4692 t
( and 3-Opt differ by only a small amount for)9 2248(Note that the overall running times for 2-)7 2072 2 720 4842 t
( This)1 278( random distance matrix instances.)4 1683(random Euclidean instances and by even less for)7 2359 3 720 4992 t
(is because the overall time is dominated by that for preprocessing, which for random)13 4320 1 720 5142 t
(Euclidean instances contributes more than 60)5 2250 1 720 5292 t
12 I f
(%)2970 5292 w
12 R f
( for 3-Opt and)3 728(of the overall time even)4 1198 2 3114 5292 t
12 I f
(N)720 5442 w
12 S f
(=)850 5442 w
12 R f
(10)966 5442 w
9 R f
(6)1093 5394 w
12 R f
( random distance matrices, preprocessing accounts for over 95)8 3167(. For)1 278 2 1148 5442 t
12 I f
(%)4593 5442 w
12 R f
(of the)1 297 1 4743 5442 t
( Greedy starting tour generation, even)5 1946( Furthermore,)1 716( large instances.)2 821(running time for)2 837 4 720 5592 t
( the existence)2 656(though it is faster than performing standalone Greedy because it can exploit)11 3664 2 720 5742 t
( substantially longer than 2-Optimization and almost as)7 2770(of the neighbor lists, still takes)5 1550 2 720 5892 t
( although the process)3 1018( Thus,)1 330( matrices\).)1 508(long as 3-Optimization \(longer on random distance)6 2464 4 720 6042 t
( takes roughly three times as long as 2-Optimization for the geometric)11 3448(of 3-Optimization)1 872 2 720 6192 t
(instances, this effect is swamped by the other factors.)8 2564 1 720 6342 t
( times relate to the theoretical bounds of Section 3.1.)9 2572(Let us now consider how these)5 1498 2 970 6528 t
( estimates)1 485(For random Euclidean instances the times are much better than our worst case)12 3835 2 720 6678 t
( with respect to the range of)6 1413(would have suggested, at least)4 1502 2 720 6828 t
12 I f
(N)3677 6828 w
12 R f
( As)1 205(covered by the table.)3 1036 2 3799 6828 t
( 3.1, the only certain bound we can place on the cost of finding an)14 3490(noted in Section)2 830 2 720 6978 t
(improving move is)2 930 1 720 7128 t
12 S f
(Q)1690 7128 w
12 R f
(\()1789 7128 w
12 I f
(N)1839 7128 w
9 R f
(2)1934 7080 w
12 R f
(\) for 2-Opt and)3 753 1 1999 7128 t
12 S f
(Q)2792 7128 w
12 R f
(\()2891 7128 w
12 I f
(N)2941 7128 w
9 R f
(3)3036 7080 w
12 R f
( take into)2 470( even if we)3 559( Thus,)1 340(\) for 3-Opt.)2 570 4 3101 7128 t
(account the actual number of moves, which is roughly)8 2694 1 720 7278 t
12 S f
(Q)3455 7278 w
12 R f
(\()3554 7278 w
12 I f
(N)3604 7278 w
12 R f
(\), the overall time could be)5 1346 1 3694 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 23 23
%%Page: 24 24
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
24 pagesetup
12 R f
(- 24 -)2 260 1 2750 500 t
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 875 t
11 R f
(Running Time in Seconds on a 150 Mhz SGI Challenge)9 2462 1 1649 1025 t
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 1075 t
10 I f
(N)1162 1225 w
10 R f
(= 10)1 357 1 1304 1225 t
7 R f
(2)1666 1185 w
10 R f
(10)1932 1225 w
7 R f
(2. 5)1 93 1 2037 1185 t
10 R f
(10)2361 1225 w
7 R f
(3)2466 1185 w
10 R f
(10)2732 1225 w
7 R f
(3. 5)1 93 1 2837 1185 t
10 R f
(10)3161 1225 w
7 R f
(4)3266 1185 w
10 R f
(10)3532 1225 w
7 R f
(4. 5)1 93 1 3637 1185 t
10 R f
(10)3961 1225 w
7 R f
(5)4066 1185 w
10 R f
(10)4332 1225 w
7 R f
(5. 5)1 93 1 4437 1185 t
10 R f
(10)4761 1225 w
7 R f
(6)4866 1185 w
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 1275 t
10 R f
(Random Euclidean Instances)2 1159 1 2655 1425 t
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 1475 t
10 R f
( \261 \261)2 800( 23009)1 400( 801.9)1 400( 0.12 0.53 3.57 41.9)4 1600(CHR 0.03)1 960 5 800 1625 t
( 173 670)2 800( 31)1 400( 1.4 6.5)2 800( 0.03 0.11 0.35)3 1200(CW 0.00)1 960 5 800 1745 t
( 380)1 400( 23 90)2 800( 1.1 5.5)2 800( 0.02 0.08 0.29)3 1200(GR 0.00)1 960 5 800 1865 t
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 1915 t
10 R f
( 168 673)2 800( 41)1 400( 10.3)1 400( 2.8)1 400(Preprocessing 0.02 0.07 0.27 0.94)4 2160 5 800 2065 t
( 181)1 400( 12 50)2 800( 0.6 2.7)2 800( 0.01 0.04 0.15)3 1200( 0.01)1 424(Starting Tour)1 536 6 800 2185 t
( 23 87)2 800( 6)1 400( 0.4 1.5)2 800( 0.01 0.03 0.09)3 1200(2-Opt 0.00)1 960 5 800 2305 t
( 230)1 400( 16 61)2 800( 1.2 4.5)2 800( 0.03 0.09 0.32)3 1200(3-Opt 0.01)1 960 5 800 2425 t
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 2475 t
10 R f
( 240 940)2 800( 59)1 400( 14.5)1 400( 3.8)1 400( 0.09 0.34 1.17)3 1200( 0.03)1 491(Total 2-Opt)1 469 7 800 2625 t
( 1080)1 400( 280)1 400( 69)1 400( 17.5)1 400( 4.7)1 400( 0.11 0.41 1.40)3 1200( 0.04)1 491(Total 3-Opt)1 469 8 800 2745 t
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 2795 t
10 R f
(Random Distance Matrices)2 1087 1 2691 2945 t
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 2995 t
10 R f
( \261 \261 \261)3 1200( 1400)1 400( 107)1 400( 9.3)1 400( 0.12 0.98)2 800(GR 0.02)1 960 6 800 3115 t
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 3165 t
10 R f
( \261 \261 \261)3 1200( 1370)1 400( 104)1 400( 9.0)1 400(Preprocessing 0.01 0.11 0.94)3 1760 5 800 3315 t
( \261 \261 \261)3 1200( 27)1 400( 3)1 400( 0.3)1 400( 0.01 0.05)2 800( 0.00)1 424(Starting Tour)1 536 7 800 3435 t
( 0 1 \261 \261 \261)5 2000( 0.1)1 400( 0.01 0.03)2 800(2-Opt 0.00)1 960 4 800 3555 t
( \261 \261 \261)3 1200( 15)1 400( 3)1 400( 0.6)1 400( 0.04 0.16)2 800(3-Opt 0.01)1 960 6 800 3675 t
10 S f
(_ _____________________________________________________________________________________)1 4260 1 750 3725 t
10 R f
( \261 \261 \261)3 1200( 1400)1 400( 108)1 400( 9.4)1 400( 0.13 1.02)2 800( 0.02)1 491(Total 2-Opt)1 469 7 800 3845 t
( \261 \261 \261)3 1200( 1410)1 400( 110)1 400( 9.8)1 400( 0.16 1.14)2 800( 0.02)1 491(Total 3-Opt)1 469 7 800 3965 t
10 S f
( \347)1 -4260(_ _____________________________________________________________________________________)1 4260 2 750 4015 t
(\347)750 3975 w
(\347)750 3875 w
(\347)750 3775 w
(\347)750 3675 w
(\347)750 3575 w
(\347)750 3475 w
(\347)750 3375 w
(\347)750 3275 w
(\347)750 3175 w
(\347)750 3075 w
(\347)750 2975 w
(\347)750 2875 w
(\347)750 2775 w
(\347)750 2675 w
(\347)750 2575 w
(\347)750 2475 w
(\347)750 2375 w
(\347)750 2275 w
(\347)750 2175 w
(\347)750 2075 w
(\347)750 1975 w
(\347)750 1875 w
(\347)750 1775 w
(\347)750 1675 w
(\347)750 1575 w
(\347)750 1475 w
(\347)750 1375 w
(\347)750 1275 w
(\347)750 1175 w
(\347)750 1075 w
(\347)750 975 w
(\347)1435 4015 w
(\347)1435 3975 w
(\347)1435 3875 w
(\347)1435 3775 w
(\347)1435 3675 w
(\347)1435 3575 w
(\347)1435 3475 w
(\347)1435 3375 w
(\347)1435 3275 w
(\347)1435 3175 w
(\347)1435 3075 w
(\347)1435 2975 w
(\347)1435 2875 w
(\347)1435 2775 w
(\347)1435 2675 w
(\347)1435 2575 w
(\347)1435 2475 w
(\347)1435 2375 w
(\347)1435 2275 w
(\347)1435 2175 w
(\347)1435 2075 w
(\347)1435 1975 w
(\347)1435 1875 w
(\347)1435 1775 w
(\347)1435 1675 w
(\347)1435 1575 w
(\347)1435 1475 w
(\347)1435 1375 w
(\347)5010 4015 w
(\347)5010 3975 w
(\347)5010 3875 w
(\347)5010 3775 w
(\347)5010 3675 w
(\347)5010 3575 w
(\347)5010 3475 w
(\347)5010 3375 w
(\347)5010 3275 w
(\347)5010 3175 w
(\347)5010 3075 w
(\347)5010 2975 w
(\347)5010 2875 w
(\347)5010 2775 w
(\347)5010 2675 w
(\347)5010 2575 w
(\347)5010 2475 w
(\347)5010 2375 w
(\347)5010 2275 w
(\347)5010 2175 w
(\347)5010 2075 w
(\347)5010 1975 w
(\347)5010 1875 w
(\347)5010 1775 w
(\347)5010 1675 w
(\347)5010 1575 w
(\347)5010 1475 w
(\347)5010 1375 w
(\347)5010 1275 w
(\347)5010 1175 w
(\347)5010 1075 w
(\347)5010 975 w
11 B f
(Table 6.)1 381 1 1029 4255 t
11 R f
(Running times for 2- and 3-Opt, plus selected tour construction heuristics.)10 3264 1 1466 4255 t
12 R f
(something like)1 723 1 720 4537 t
12 S f
(Q)1483 4537 w
12 R f
(\()1582 4537 w
12 I f
(N)1632 4537 w
9 R f
(3)1727 4489 w
12 R f
(\) for 2-Opt and)3 753 1 1792 4537 t
12 S f
(Q)2585 4537 w
12 R f
(\()2684 4537 w
12 I f
(N)2734 4537 w
9 R f
(4)2829 4489 w
12 R f
( times we actually observe)4 1319( The)1 257(\) for 3-Opt.)2 570 3 2894 4537 t
( are definitely subquadratic, and if not)6 1911(for the 2- and 3-Optimization phases)5 1836 2 720 4687 t
12 I f
(O)4510 4687 w
12 R f
(\()4606 4687 w
12 I f
(N)4656 4687 w
12 R f
(log)4746 4687 w
12 I f
(N)4910 4687 w
12 R f
(\))5000 4687 w
(then at least no worse than)5 1283 1 720 4837 t
12 I f
(O)2034 4837 w
12 R f
(\()2130 4837 w
12 I f
(N)2180 4837 w
9 R f
(1. 2)1 120 1 2275 4789 t
12 R f
( is)1 113( mentioned above, the time for 3-Optimization)6 2248(\). As)1 264 3 2415 4837 t
( that for 2-Optimization, not the factor of)7 2027(only three times greater than)4 1408 2 720 4987 t
12 I f
(N)4192 4987 w
12 R f
(that worst-case)1 731 1 4309 4987 t
( as)1 134( Indeed,)1 420( is also decidedly subquadratic.)4 1522( time)1 248( Overall)1 423(theory would imply.)2 985 6 720 5137 t
12 I f
(N)4486 5137 w
12 R f
(increases)4600 5137 w
(3-Opt's overall time drops to less than twice that for CW!)10 2779 1 720 5287 t
(For random distance matrices, the time is slightly worse than quadratic for large)12 3924 1 970 5473 t
12 I f
(N)4930 5473 w
12 R f
(.)5010 5473 w
( that it also holds true for pre-)7 1462(This is most likely due to memory hierarchy effects, given)9 2858 2 720 5623 t
(processing alone, which is theoretically an)5 2093 1 720 5773 t
12 S f
(Q)2853 5773 w
12 R f
(\()2952 5773 w
12 I f
(N)3002 5773 w
9 R f
(2)3097 5725 w
12 R f
( 2- or)2 282( added time for)3 761( The)1 256(\) algorithm.)1 579 4 3162 5773 t
(3-Opting is itself subquadratic and indeed essentially negligible once)8 3609 1 720 5923 t
12 I f
(N)4395 5923 w
12 R f
(gets large)1 499 1 4541 5923 t
( of moves made for these)5 1221( is consistent with our observation that the number)8 2441(enough. This)1 658 3 720 6073 t
(instances under Greedy starts is substantially sublinear.)6 2663 1 720 6223 t
(In the next section we describe the main implementation ideas that make these high)13 4070 1 970 6409 t
( key factor we exploit is the fact that in local optimization \(as opposed)13 3397( A)1 147(speeds possible.)1 776 3 720 6559 t
( as tabu search and simulated annealing\) we can ignore all non-)11 3353(to such approaches)2 967 2 720 6709 t
(improving moves.)1 876 1 720 6859 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 89 536 764
%%EndPage: 24 24
%%Page: 25 25
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
25 pagesetup
12 R f
(- 25 -)2 260 1 2750 500 t
14 B f
( to Make 2-Opt and 3-Opt Run Quickly)7 2359(3.3. How)1 560 2 720 870 t
12 R f
( to obtain running times for 2- and 3-Opt that are subquadratic in practice, we)14 3924(In order)1 396 2 720 1093 t
( for one)2 391(must first figure out a way to avoid looking at all possible moves in our search)15 3929 2 720 1243 t
( there is a simple and effective way to do this, appar-)11 2609( Fortunately,)1 651( the tour.)2 443(that shortens)1 617 4 720 1393 t
(ently first noticed by Lin and Kernighan [1973].)7 2316 1 720 1543 t
( fixed orienta-)2 683(To illustrate this, let us consider the case of 2-Opt, and let us assume a)14 3387 2 970 1729 t
( edge having a unique representation as a pair \()9 2273(tion of the tour, with each tour)6 1478 2 720 1879 t
12 I f
(x)4481 1879 w
12 R f
(,)4544 1879 w
12 I f
(y)4584 1879 w
12 R f
(\), where)1 393 1 4647 1879 t
12 I f
(x)720 2029 w
12 R f
( of)1 133(is the immediate predecessor)3 1399 2 805 2029 t
12 I f
(y)2370 2029 w
12 R f
( each possible 2-Opt move can be)6 1638( Then)1 309(in tour order.)2 637 3 2456 2029 t
(viewed as corresponding to a 4-tuple of cities)7 2207 1 720 2179 t
12 S f
(<)2960 2179 w
12 I f
(t)3046 2179 w
9 R f
(1)3095 2203 w
12 R f
(,)3160 2179 w
12 I f
(t)3200 2179 w
9 R f
(2)3249 2203 w
12 R f
(,)3314 2179 w
12 I f
(t)3354 2179 w
9 R f
(3)3403 2203 w
12 R f
(,)3468 2179 w
12 I f
(t)3508 2179 w
9 R f
(4)3557 2203 w
12 S f
(>)3632 2179 w
12 R f
(, where \()2 428 1 3698 2179 t
12 I f
(t)4136 2179 w
9 R f
(1)4185 2203 w
12 R f
(,)4250 2179 w
12 I f
(t)4290 2179 w
9 R f
(2)4339 2203 w
12 R f
( \()1 72(\) and)1 246 2 4404 2179 t
12 I f
(t)4732 2179 w
9 R f
(4)4781 2203 w
12 R f
(,)4846 2179 w
12 I f
(t)4886 2179 w
9 R f
(3)4935 2203 w
12 R f
(\))5000 2179 w
(are the oriented tour edges deleted and {)7 2047 1 720 2329 t
12 I f
(t)2767 2329 w
9 R f
(2)2816 2353 w
12 R f
(,)2881 2329 w
12 I f
(t)2921 2329 w
9 R f
(3)2970 2353 w
12 R f
(} and {)2 379 1 3025 2329 t
12 I f
(t)3404 2329 w
9 R f
(1)3453 2353 w
12 R f
(,)3518 2329 w
12 I f
(t)3558 2329 w
9 R f
(4)3607 2353 w
12 R f
( that replace)2 619(} are the edges)3 759 2 3662 2329 t
( convention, each move actually corresponds to two distinct 4-tuples.)9 3455( this)1 220(them. Under)1 645 3 720 2479 t
( Figure 1 corresponds, under the counter-)6 2134(For instance, the 2-Opt move illustrated in)6 2186 2 720 2629 t
(clockwise tour orientation, to the 4-tuples)5 2010 1 720 2779 t
12 S f
(<)2761 2779 w
12 I f
(a)2847 2779 w
12 R f
(,)2917 2779 w
12 I f
(b)2957 2779 w
12 R f
(,)3027 2779 w
12 I f
(c)3067 2779 w
12 R f
(,)3130 2779 w
12 I f
(d)3170 2779 w
12 S f
(>)3260 2779 w
12 R f
(and)3357 2779 w
12 S f
(<)3561 2779 w
12 I f
(d)3647 2779 w
12 R f
(,)3717 2779 w
12 I f
(c)3757 2779 w
12 R f
(,)3820 2779 w
12 I f
(b)3860 2779 w
12 R f
(,)3930 2779 w
12 I f
(a)3970 2779 w
12 S f
(>)4060 2779 w
12 R f
( first observed)2 690(. As)1 224 2 4126 2779 t
( can exploit this double representation as follows.)7 2532(by Steiglitz and Weiner [1968], we)5 1788 2 720 2929 t
( case that either \(a\))4 1210(Observe that for an improving move it must be the)9 3110 2 720 3079 t
12 I f
(d)720 3229 w
12 R f
(\()790 3229 w
12 I f
(t)840 3229 w
9 R f
(1)889 3253 w
12 R f
(,)954 3229 w
12 I f
(t)994 3229 w
9 R f
(2)1043 3253 w
12 R f
(\))1108 3229 w
12 S f
(>)1208 3229 w
12 I f
(d)1324 3229 w
12 R f
(\()1394 3229 w
12 I f
(t)1444 3229 w
9 R f
(2)1493 3253 w
12 R f
(,)1558 3229 w
12 I f
(t)1598 3229 w
9 R f
(3)1647 3253 w
12 R f
(\) or \(b\))2 358 1 1712 3229 t
12 I f
(d)2109 3229 w
12 R f
(\()2179 3229 w
12 I f
(t)2229 3229 w
9 R f
(3)2278 3253 w
12 R f
(,)2343 3229 w
12 I f
(t)2383 3229 w
9 R f
(4)2432 3253 w
12 R f
(\))2497 3229 w
12 S f
(>)2597 3229 w
12 I f
(d)2713 3229 w
12 R f
(\()2783 3229 w
12 I f
(t)2833 3229 w
9 R f
(4)2882 3253 w
12 R f
(,)2947 3229 w
12 I f
(t)2987 3229 w
9 R f
(1)3036 3253 w
12 R f
( this means that \(a\) must)5 1231( But)1 244(\) or both.)2 464 3 3101 3229 t
( we cannot)2 545( Consequently,)1 764( of the two representations of the move.)7 2000(hold for at least one)4 1011 4 720 3379 t
( means)1 352( This)1 289( we restrict attention to 4-tuples satisfying \(a\).)7 2325(miss an improving move if)4 1354 4 720 3529 t
(that in our search, having fixed)5 1530 1 720 3679 t
12 I f
(t)2287 3679 w
9 R f
(1)2336 3703 w
12 R f
(and)2428 3679 w
12 I f
(t)2638 3679 w
9 R f
(2)2687 3703 w
12 R f
(, the possibilities for)3 1006 1 2742 3679 t
12 I f
(t)3785 3679 w
9 R f
(3)3834 3703 w
12 R f
(can be limited to those)4 1114 1 3926 3679 t
(cities that are closer to)4 1103 1 720 3829 t
12 I f
(t)1858 3829 w
9 R f
(2)1907 3853 w
12 R f
(than is)1 324 1 1997 3829 t
12 I f
(t)2357 3829 w
9 R f
(1)2406 3853 w
12 R f
( that given the choice of)5 1188(. \(Note)1 369 2 2461 3829 t
12 I f
(t)4054 3829 w
9 R f
(3)4103 3853 w
12 R f
(, there is only one)4 882 1 4158 3829 t
(possible choice of)2 874 1 720 3979 t
12 I f
(t)1627 3979 w
9 R f
(4)1676 4003 w
12 R f
( the move will yield a tour rather than two disjoint cycles.\))11 2842(such that)1 434 2 1764 3979 t
(As the algorithm progresses, the set of candidates for)8 2602 1 720 4129 t
12 I f
(t)3358 4129 w
9 R f
(3)3407 4153 w
12 R f
(is more and more likely to be a)7 1542 1 3498 4129 t
( Kernighan [1973]\), we may)4 1410( for 3-Opt \(as observed by Lin and)7 1754( Analogously)1 687(small set.)1 469 4 720 4279 t
(restrict attention to 6-tuples)3 1404 1 720 4429 t
12 S f
(<)2179 4429 w
12 I f
(t)2265 4429 w
9 R f
(1)2314 4453 w
12 R f
(,)2379 4429 w
12 I f
(t)2419 4429 w
9 R f
(2)2468 4453 w
12 R f
(,)2533 4429 w
12 I f
(t)2573 4429 w
9 R f
(3)2622 4453 w
12 R f
(,)2687 4429 w
12 I f
(t)2727 4429 w
9 R f
(4)2776 4453 w
12 R f
(,)2841 4429 w
12 I f
(t)2881 4429 w
9 R f
(5)2930 4453 w
12 R f
(,)2995 4429 w
12 I f
(t)3035 4429 w
9 R f
(6)3084 4453 w
12 S f
(>)3159 4429 w
12 R f
(in which)1 443 1 3280 4429 t
12 I f
(d)3779 4429 w
12 R f
(\()3849 4429 w
12 I f
(t)3899 4429 w
9 R f
(1)3948 4453 w
12 R f
(,)4013 4429 w
12 I f
(t)4053 4429 w
9 R f
(2)4102 4453 w
12 R f
(\))4167 4429 w
12 S f
(>)4267 4429 w
12 I f
(d)4383 4429 w
12 R f
(\()4453 4429 w
12 I f
(t)4503 4429 w
9 R f
(2)4552 4453 w
12 R f
(,)4617 4429 w
12 I f
(t)4657 4429 w
9 R f
(3)4706 4453 w
12 R f
(\) and)1 269 1 4771 4429 t
12 I f
(d)720 4579 w
12 R f
(\()790 4579 w
12 I f
(t)840 4579 w
9 R f
(1)889 4603 w
12 R f
(,)954 4579 w
12 I f
(t)994 4579 w
9 R f
(2)1043 4603 w
12 R f
(\))1108 4579 w
12 S f
(+)1208 4579 w
12 I f
(d)1324 4579 w
12 R f
(\()1394 4579 w
12 I f
(t)1444 4579 w
9 R f
(3)1493 4603 w
12 R f
(,)1558 4579 w
12 I f
(t)1598 4579 w
9 R f
(4)1647 4603 w
12 R f
(\))1712 4579 w
12 S f
(>)1795 4579 w
12 I f
(d)1904 4579 w
12 R f
(\()1974 4579 w
12 I f
(t)2024 4579 w
9 R f
(2)2073 4603 w
12 R f
(,)2138 4579 w
12 I f
(t)2178 4579 w
9 R f
(3)2227 4603 w
12 R f
(\))2292 4579 w
12 S f
(+)2392 4579 w
12 I f
(d)2508 4579 w
12 R f
(\()2578 4579 w
12 I f
(t)2628 4579 w
9 R f
(4)2677 4603 w
12 R f
(,)2742 4579 w
12 I f
(t)2782 4579 w
9 R f
(5)2831 4603 w
12 R f
( for)1 182( limits the search)3 859(\). This)1 357 3 2896 4579 t
12 I f
(t)4336 4579 w
9 R f
(3)4385 4603 w
12 R f
(as in 2-Opt)2 558 1 4482 4579 t
(but also imposes a substantial constraint on the possibilities for)9 3078 1 720 4729 t
12 I f
(t)3833 4729 w
9 R f
(5)3882 4753 w
12 R f
( 6-tuples)1 423(. \(Degenerate)1 680 2 3937 4729 t
(that repeat some cities and hence correspond to 2-Opt moves are allowed.\))11 3582 1 720 4879 t
( us to)2 267(In order to exploit the above observations, we need a data structure that allows)13 3803 2 970 5065 t
( the allowable candidates for)4 1389(quickly identify)1 769 2 720 5215 t
12 I f
(t)2910 5215 w
9 R f
(3)2959 5239 w
12 R f
(\()3046 5215 w
12 I f
(t)3086 5215 w
9 R f
(5)3135 5239 w
12 R f
( and Weiner proposed stor-)4 1315(\). Steiglitz)1 535 2 3190 5215 t
(ing for each city)3 787 1 720 5365 t
12 I f
(c)1538 5365 w
12 R f
( in order of increasing distance from)6 1761(a list of the remaining cities)5 1347 2 1622 5365 t
12 I f
(c)4762 5365 w
12 R f
(. To)1 225 1 4815 5365 t
(consider candidates for)2 1132 1 720 5515 t
12 I f
(t)1890 5515 w
9 R f
(3)1939 5539 w
12 R f
(, we then need only start at the beginning of)9 2181 1 1994 5515 t
12 I f
(t)4213 5515 w
9 R f
(2)4262 5539 w
12 R f
('s list and pro-)3 723 1 4317 5515 t
(ceed down it until a city)5 1214 1 720 5665 t
12 I f
(x)1975 5665 w
12 R f
(with)2069 5665 w
12 I f
(d)2324 5665 w
12 R f
(\()2394 5665 w
12 I f
(t)2444 5665 w
9 R f
(2)2493 5689 w
12 R f
(,)2558 5665 w
12 I f
(x)2598 5665 w
12 R f
(\))2661 5665 w
12 S f
(\263)2751 5665 w
12 I f
(d)2857 5665 w
12 R f
(\()2927 5665 w
12 I f
(t)2977 5665 w
9 R f
(1)3026 5689 w
12 R f
(,)3091 5665 w
12 I f
(t)3131 5665 w
9 R f
(2)3180 5689 w
12 R f
( search for)2 530( \(The)1 298(\) is encountered.)2 821 3 3245 5665 t
12 I f
(t)4936 5665 w
9 R f
(5)4985 5689 w
12 R f
(candidates in 3-Opt works similarly, using)5 2105 1 720 5815 t
12 I f
(t)2867 5815 w
9 R f
(4)2916 5839 w
12 R f
( is)1 122( drawback to this approach)4 1341( The)1 258('s list.\))1 348 4 2971 5815 t
(that it would take)3 875 1 720 5965 t
12 S f
(Q)1637 5965 w
12 R f
(\()1736 5965 w
12 I f
(N)1786 5965 w
9 R f
(2)1881 5917 w
12 R f
(log)1946 5965 w
12 I f
(N)2110 5965 w
12 R f
(\) time to set up the lists and)7 1413 1 2200 5965 t
12 S f
(Q)3655 5965 w
12 R f
(\()3754 5965 w
12 I f
(N)3804 5965 w
9 R f
(2)3899 5917 w
12 R f
( to store them.)3 728(\) space)1 348 2 3964 5965 t
(Our)720 6115 w
12 I f
(neighbor-list)958 6115 w
12 R f
( reasonable compromise of storing sorted)5 2092(implementations make the)2 1315 2 1633 6115 t
(lists containing only the)3 1170 1 720 6265 t
12 I f
(k)1925 6265 w
12 R f
( fixed)1 283(nearest neighbors for each city for a suitable)7 2167 2 2013 6265 t
12 I f
(k)4499 6265 w
12 R f
(, typically)1 488 1 4552 6265 t
12 I f
(k)720 6415 w
12 S f
(=)823 6415 w
12 R f
( our searches for)3 799( then halt)2 452(20. We)1 378 3 939 6415 t
12 I f
(t)2599 6415 w
9 R f
(3)2648 6439 w
12 R f
(\()2734 6415 w
12 I f
(t)2774 6415 w
9 R f
(5)2823 6439 w
12 R f
(\) if either we reach a city that is too far away)11 2162 1 2878 6415 t
( data structure takes only)4 1210( This)1 275(or we get to the end of a list.)8 1380 3 720 6565 t
12 S f
(Q)3617 6565 w
12 R f
(\()3716 6565 w
12 I f
(Nk)3766 6565 w
12 R f
(\) space and can be con-)5 1131 1 3909 6565 t
(structed in time)2 774 1 720 6715 t
12 S f
(Q)1536 6715 w
12 R f
(\()1635 6715 w
12 I f
(N)1685 6715 w
9 R f
(2)1780 6667 w
12 R f
(log)1845 6715 w
12 I f
(k)2009 6715 w
12 R f
( improved to roughly)3 1052(\), a bound that can be)5 1093 2 2072 6715 t
12 S f
(Q)4258 6715 w
12 R f
(\()4357 6715 w
12 I f
(N)4407 6715 w
12 R f
(log)4497 6715 w
12 I f
(N)4661 6715 w
12 S f
(+)4771 6715 w
12 I f
(Nk)4857 6715 w
12 R f
(\))5000 6715 w
(for geometric instances using)3 1449 1 720 6865 t
12 I f
(k)2211 6865 w
12 R f
(-)2264 6865 w
12 I f
(d)2304 6865 w
12 R f
( with these)2 547( we saw in the last section, even)7 1625(trees. As)1 462 3 2406 6865 t
( lists dominates the overall running time for)7 2146(speedups, the construction time for neighbor)5 2174 2 720 7015 t
( however,)1 485( for future reference,)3 1028( Note)1 305(the neighbor-list implementations of 2- and 3-Opt.)6 2502 4 720 7165 t
( and could be re-used by subsequent runs of the)9 2302(that the neighbor lists are static structures)6 2018 2 720 7315 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 25 25
%%Page: 26 26
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
26 pagesetup
12 R f
(- 26 -)2 260 1 2750 500 t
( the)1 181( Thus)1 304( instance, thus amortizing the cost of their construction.)8 2706(algorithms on the same)3 1129 4 720 870 t
(time needed to perform)3 1149 1 720 1020 t
12 I f
(m)1907 1020 w
12 R f
( randomized Greedy starts would)4 1622(runs of 3-Opt from different)4 1387 2 2031 1020 t
(be substantially less than)3 1201 1 720 1170 t
12 I f
(m)1951 1170 w
12 R f
(times the time to perform a single run.)7 1846 1 2067 1170 t
( using truncated neighbor lists is not a major)8 2276(The loss of tour quality involved in)6 1794 2 970 1356 t
( be truly locally)3 795(issue in practice, although it is possible that the final solution may not)12 3525 2 720 1506 t
( random Euclidean instances, going from)5 2061(optimal. For)1 643 2 720 1656 t
12 I f
(k)3471 1656 w
12 S f
(=)3574 1656 w
12 R f
(20 to)1 261 1 3690 1656 t
12 I f
(k)3998 1656 w
12 S f
(=)4101 1656 w
12 R f
(80 only tends to)3 823 1 4217 1656 t
(improve the final tour by 0.1 or 0.2)7 1770 1 720 1806 t
12 I f
(%)2490 1806 w
12 R f
( For)1 237( at significant running time cost.)5 1609(on average,)1 563 3 2631 1806 t
(some)720 1956 w
12 C f
(TSPLIB)1010 1956 w
12 R f
( difference can be greater, but even here the point of dimin-)11 2938(instances the)1 624 2 1478 1956 t
( around)1 382(ishing returns sets in)3 1054 2 720 2106 t
12 I f
(k)2205 2106 w
12 S f
(=)2308 2106 w
12 R f
(40, especially if one uses a variant in which the 40)10 2616 1 2424 2106 t
(neighbors of)1 611 1 720 2256 t
12 I f
(c)1368 2256 w
12 R f
( the 10 closest cities in each of the four quad-)10 2263(are chosen so as to include)5 1319 2 1458 2256 t
(rants of the plane surrounding)4 1566 1 720 2406 t
12 I f
(c)2346 2406 w
12 R f
( random distance matrices and random starts,)6 2354(. For)1 287 2 2399 2406 t
(increasing)720 2556 w
12 I f
(k)1251 2556 w
12 R f
( the final tour get worse; the optimal choice seems to be)11 2777(may actually make)2 922 2 1341 2556 t
(about)720 2706 w
12 I f
(k)1017 2706 w
12 S f
(=)1120 2706 w
12 R f
(15.)1236 2706 w
(The above ideas can for fixed)5 1452 1 970 2892 t
12 I f
(k)2458 2892 w
12 R f
( \(3-)1 177(reduce the time for finding an improving 2-Opt)7 2316 2 2547 2892 t
(Opt\) move from)2 789 1 720 3042 t
12 S f
(Q)1543 3042 w
12 R f
(\()1642 3042 w
12 I f
(N)1692 3042 w
9 R f
(2)1787 2994 w
12 R f
(\) \()1 114 1 1852 3042 t
12 S f
(Q)1966 3042 w
12 R f
(\()2065 3042 w
12 I f
(N)2115 3042 w
9 R f
(3)2210 2994 w
12 R f
(\)\) to)1 207 1 2275 3042 t
12 I f
(O)2515 3042 w
12 R f
(\()2611 3042 w
12 I f
(N)2661 3042 w
12 R f
(\), but given that there are roughly)6 1630 1 2751 3042 t
12 S f
(Q)4414 3042 w
12 R f
(\()4513 3042 w
12 I f
(N)4563 3042 w
12 R f
(\) moves)1 387 1 4653 3042 t
( is provided by the)4 935( This)1 284( is needed.)2 530(made for random Euclidean instances, a further idea)7 2571 4 720 3192 t
(concept of the)2 718 1 720 3342 t
12 I f
(don't-look)1487 3342 w
12 R f
( Bentley [1992], another way of trading a)7 2113(bit, introduced by)2 890 2 2037 3342 t
( of a non-locally optimal final tour for a major reduction)10 2773(slight increase in the possibility)4 1547 2 720 3492 t
( idea that we need only consider improving moves.)8 2549(in running time, again based on the)6 1771 2 720 3642 t
( that if for a given choice of)7 1436(Here the observation is)3 1150 2 720 3792 t
12 I f
(t)3350 3792 w
9 R f
(1)3399 3816 w
12 R f
(we previously failed to find an)5 1542 1 3498 3792 t
(improving move, and if)3 1169 1 720 3942 t
12 I f
(t)1930 3942 w
9 R f
(1)1979 3966 w
12 R f
( not changed since that time, then it is)8 1902('s tour neighbors have)3 1104 2 2034 3942 t
( an improving move if we look again starting at)9 2324(unlikely that we will find)4 1229 2 720 4092 t
12 I f
(t)4307 4092 w
9 R f
(1)4356 4116 w
12 R f
( exploit)1 369(. We)1 260 2 4411 4092 t
( which we call)3 702(this observation by means of special flags for each of the cities,)11 3085 2 720 4242 t
12 I f
(don't-look)4539 4242 w
12 R f
( bit for city)3 560( The)1 253( these are all turned off.)5 1176(bits. Initially,)1 685 4 720 4392 t
12 I f
(c)3431 4392 w
12 R f
( a search)2 435(is turned on whenever)3 1084 2 3521 4392 t
(for an improving move with)4 1368 1 720 4542 t
12 I f
(t)2121 4542 w
9 R f
(1)2170 4566 w
12 S f
(=)2275 4542 w
12 I f
(c)2391 4542 w
12 R f
(fails and is turned off whenever a move is performed)9 2563 1 2477 4542 t
(in which)1 425 1 720 4692 t
12 I f
(c)1184 4692 w
12 R f
( considering candidates for)3 1325( In)1 169(is an endpoint of one of the deleted edges.)8 2097 3 1276 4692 t
12 I f
(t)4906 4692 w
9 R f
(1)4955 4716 w
12 R f
(,)5010 4692 w
( is done by maintaining a first-in,)6 1638( This)1 280( on.)1 186(we ignore all cities whose don't-look bits are)7 2216 4 720 4842 t
(first-out queue of cities whose bits are off.)7 2037 1 720 4992 t
( of)1 138(As a result of all this, the total number)8 1905 2 970 5178 t
12 I f
(t)3051 5178 w
9 R f
(1)3100 5202 w
12 R f
('s considered throughout the course of)5 1885 1 3155 5178 t
(the algorithm on random Euclidean instances is reduced to roughly)9 3321 1 720 5328 t
12 S f
(Q)4082 5328 w
12 R f
(\()4181 5328 w
12 I f
(N)4231 5328 w
12 R f
( the)1 187(\), although)1 532 2 4321 5328 t
( total search time is also)5 1176( The)1 249(constant is fairly large.)3 1112 3 720 5478 t
12 S f
(Q)3290 5478 w
12 R f
(\()3389 5478 w
12 I f
(N)3439 5478 w
12 R f
( running time bottleneck)3 1192(\). The)1 319 2 3529 5478 t
(thus becomes the time to perform the moves that are found, which depends intimately on)14 4320 1 720 5628 t
( the results reported in the previous)6 1703( For)1 228( used for representing the current tour.)6 1851(the method)1 538 4 720 5778 t
(section, we use the)3 967 1 720 5928 t
12 I f
(two-level tree)1 678 1 1737 5928 t
12 R f
( McGeoch, and)2 773(data structure of Fredman, Johnson,)4 1802 2 2465 5928 t
(Ostheimer [1995], which theoretically yields a cost of)7 2612 1 720 6078 t
12 I f
(O)3365 6078 w
12 R f
(\()3461 6078 w
12 I f
(N)3511 6078 w
9 R f
(1)3606 6030 w
9 I f
(/)3658 6030 w
9 R f
(2)3690 6030 w
12 R f
( this)1 209( Although)1 518(\) per move.)2 558 3 3755 6078 t
( worse than the splay tree representation mentioned in Section 3.1, it is)12 3491(is asymptotically)1 829 2 720 6228 t
(faster for the range of)4 1068 1 720 6378 t
12 I f
(N)1825 6378 w
12 R f
( McGeoch, and Ostheimer)3 1290( Fredman, Johnson,)2 955( See)1 240(we consider.)1 613 4 1942 6378 t
( alternative)1 558( An)1 226([1995] for more details.)3 1202 3 720 6528 t
12 I f
(segment tree)1 629 1 2755 6528 t
12 R f
(data structure due to Applegate,)4 1607 1 3433 6528 t
( and Cook [1990] is also competitive for)7 1996( atal,)1 159(Chv \302)1 245 3 720 6678 t
12 I f
(N)3157 6678 w
12 S f
(\243)3277 6678 w
12 R f
( see the above reference,)4 1213(100 , 000;)2 444 2 3383 6678 t
(Reinelt [1992], and Reinelt [1994].)4 1689 1 720 6828 t
( includes several tricks that)4 1322(Beyond the above algorithmic ideas, our implementation)6 2748 2 970 7014 t
( Johnson,)1 465( See)1 244( improvements, such as caching of distances.)6 2229(merely yield constant factor)3 1382 4 720 7164 t
( paper also)2 568( That)1 304( [1996] for more complete details.)5 1763(Bentley, McGeoch, and Rothberg)3 1685 4 720 7314 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 26 26
%%Page: 27 27
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
27 pagesetup
12 R f
(- 27 -)2 260 1 2750 500 t
( detail the effects of various choices one must make in an implementa-)12 3453(examines in more)2 867 2 720 870 t
( is more than one improving move to choose from.)9 2447(tion, such as what one does when there)7 1873 2 720 1020 t
( to find,)2 378(Choosing the best move seems a good policy, but the best move can be expensive)14 3942 2 720 1170 t
( the)1 189( neighbor-list implementations typically choose)4 2339( The)1 257(so there are tradeoffs involved.)4 1535 4 720 1320 t
( The)1 248(first improving move found, but the search is biased so as to find better moves first.)15 4072 2 720 1470 t
(paper also includes an extensive evaluation of the alternative)8 3012 1 720 1620 t
12 I f
(on-the-fly)3773 1620 w
12 R f
(implementation)4283 1620 w
( geometric instances, which dispenses with the neighbor lists)8 3194(of Bentley [1992] for)3 1126 2 720 1770 t
(entirely and uses a)3 918 1 720 1920 t
12 I f
(k)1677 1920 w
12 R f
(-)1730 1920 w
12 I f
(d)1770 1920 w
12 R f
(tree directly to find candidates for)5 1678 1 1869 1920 t
12 I f
(t)3586 1920 w
9 R f
(3)3635 1944 w
12 R f
(and)3729 1920 w
12 I f
(t)3941 1920 w
9 R f
(5)3990 1944 w
12 R f
( enables us to)3 681(. This)1 314 2 4045 1920 t
( also reduces preprocess-)3 1218( It)1 139( in order, without truncation.)4 1403(consider all the legal candidates)4 1560 4 720 2070 t
( the neighbor-list)2 875(ing time and the storage space needed by the algorithm, which for)11 3445 2 720 2220 t
(implementation can be substantial when)4 1935 1 720 2370 t
12 I f
(N)2686 2370 w
12 R f
( For)1 227(is large.)1 382 2 2797 2370 t
12 I f
(N)3436 2370 w
12 S f
(=)3566 2370 w
12 R f
(10)3682 2370 w
9 R f
(6)3809 2322 w
12 R f
(the reduction is roughly)3 1146 1 3894 2370 t
( drawback is that each candidate takes longer to identify,)9 2765( The)1 250( megabytes.)1 578(from 275 to 72)3 727 4 720 2520 t
( 2-Opt the overall result is slightly)6 1701( For)1 236(so the local optimization phase takes more time.)7 2383 3 720 2670 t
( the neighbor-list implementation and slightly better tours;)7 2899(better running times than for)4 1421 2 720 2820 t
( may be due)3 583(for 3-Opt it is slightly slower running times and slightly worse tours \(this last)13 3737 2 720 2970 t
( Another)1 490( structure chosen, however\).)3 1467(to implementation details other than the data)6 2363 3 720 3120 t
(approach, advocated by Reinelt [1991,1994] and J)6 2425 1 720 3270 t
(. .)1 54 1 3145 3198 t
( to)1 125(unger, Reinelt, and Rinaldi [1994] is)5 1770 2 3145 3270 t
( use Delaunay triangulations instead of)5 1878(stick to neighbor lists, but)4 1249 2 720 3420 t
12 I f
(k)3878 3420 w
12 R f
(-)3931 3420 w
12 I f
(d)3971 3420 w
12 R f
(trees in constructing)2 978 1 4062 3420 t
( comparable running)2 996( implemented by the above authors, this approach yields)8 2724( As)1 195(the lists.)1 405 4 720 3570 t
( implementation, worse tours.)3 1467(times for 2-Opt but, because of other choices made in the)10 2853 2 720 3720 t
( with the neighbor-list)3 1106(For 3-Opt both running times and tours appear to be worse than)11 3214 2 720 3870 t
(implementation.)720 4020 w
14 B f
( 2- and 3-Opt)3 796(3.4. Parallel)1 746 2 720 4350 t
12 R f
( of parallelism.)2 770(One oft-mentioned method for speeding up TSP algorithms is the use)10 3550 2 720 4573 t
( processor seem reason-)3 1177(Although the times reported above for 2- and 3-Opt on a single)11 3143 2 720 4723 t
( where much greater speed)4 1381(able for most applications, one can conceive of situations)8 2939 2 720 4873 t
( where the number of cities grows so)7 1778(would be needed because of real-time constraints, or)7 2542 2 720 5023 t
( more)1 288( Perhaps)1 451( one processor.)2 745(large that many hours would be required if one uses only)10 2836 4 720 5173 t
( roughly 275 bytes per city for our neighbor-list)8 2322(significantly, the memory requirement of)4 1998 2 720 5323 t
( that the largest instance a 30-megabyte workstation can handle is)10 3178(implementations means)1 1142 2 720 5473 t
(only on the order of 100,000 cities, so if one wants to solve larger instances on such)16 4320 1 720 5623 t
( by distributing the)3 965(machines, one must resort to parallelism of some sort, for instance)10 3355 2 720 5773 t
( schemes have been proposed for this,)6 1830( Various)1 441( network of workstations.)3 1231(problem across a)2 818 4 720 5923 t
( with it)2 376(all exploiting a coarse-grained parallelism where each processor has associated)9 3944 2 720 6073 t
( We)1 244( reasonable size.)2 826(enough memory to run TSP algorithms on instances up to some)10 3250 3 720 6223 t
( approaches that can be applied not only to 2- and 3-Opt but also)13 3158(shall discuss three basic)3 1162 2 720 6373 t
(to many of the alternative approaches to be covered in later sections.)11 3297 1 720 6523 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 123 536 764
%%EndPage: 27 27
%%Page: 28 28
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
28 pagesetup
12 R f
(- 28 -)2 260 1 2750 500 t
14 I f
(Geometric Partitioning)1 1311 1 720 870 t
12 R f
( a partitioning scheme proposed by Karp [1977])7 2389(For 2-dimensional geometric instances,)3 1931 2 720 1093 t
( similar to that used in the con-)7 1502( scheme partitions the cities in a manner)7 1949( This)1 276(can be used.)2 593 4 720 1243 t
(struction of the)2 735 1 720 1393 t
12 I f
(k)1488 1393 w
12 R f
(-)1541 1393 w
12 I f
(d)1581 1393 w
12 R f
( is based on a recursive subdivision of the over-)9 2329( It)1 138(tree data structure.)2 899 3 1674 1393 t
( rectangles, with the set of cities corresponding to a)9 2579(all region containing the cities into)5 1741 2 720 1543 t
( of all the cities in the rectangle's interior together with)10 2734(given rectangle being comprised)3 1586 2 720 1693 t
( a partition in which no)5 1134( we wish to construct)4 1037( Suppose)1 471(some of the cities on its boundary.)6 1678 4 720 1843 t
(set contains more than)3 1106 1 720 1993 t
12 I f
(K)1865 1993 w
12 R f
( step of the partitioning scheme works as)7 2037( recursive)1 479(cities. The)1 540 3 1984 1993 t
(follows. Let)1 630 1 720 2143 t
12 I f
(C)1398 2143 w
9 I f
(R)1493 2167 w
12 R f
(be the set of cities assigned to rectangle)7 2033 1 1606 2143 t
12 I f
(R)3687 2143 w
12 R f
(, and suppose)2 686 1 3760 2143 t
12 S f
(\357)4494 2163 w
12 I f
(C)4554 2143 w
9 I f
(R)4649 2167 w
12 S f
(\357)4714 2163 w
(>)4814 2143 w
12 I f
(K)4930 2143 w
12 R f
(.)5010 2143 w
(One subdivides)1 751 1 720 2293 t
12 I f
(R)1508 2293 w
12 R f
( of generality)2 657( without loss)2 630( Suppose)1 474(into two subrectangles as follows.)4 1661 4 1618 2293 t
(that the)1 361 1 720 2443 t
12 I f
(x)1114 2443 w
12 R f
(-coordinates of the cities in)4 1318 1 1167 2443 t
12 I f
(C)2517 2443 w
9 I f
(R)2612 2467 w
12 R f
(have a larger range than the)5 1339 1 2709 2443 t
12 I f
(y)4080 2443 w
12 R f
(-coordinates. Find)1 907 1 4133 2443 t
(a city)1 272 1 720 2593 t
12 I f
(c)1030 2593 w
12 R f
(in)1121 2593 w
12 I f
(C)1253 2593 w
9 I f
(R)1348 2617 w
12 R f
(whose)1451 2593 w
12 I f
(x)1795 2593 w
12 R f
( median value for cities in)5 1298(-coordinate has the)2 930 2 1848 2593 t
12 I f
(C)4115 2593 w
9 I f
(R)4210 2617 w
12 R f
(. Divide)1 426 1 4275 2593 t
12 I f
(R)4740 2593 w
12 R f
(into)4852 2593 w
(two subrectangles)1 868 1 720 2743 t
12 I f
(R)1622 2743 w
9 R f
(1)1710 2767 w
12 R f
(and)1798 2743 w
12 I f
(R)2004 2743 w
9 R f
(2)2092 2767 w
12 R f
(by drawing a vertical line through)5 1647 1 2180 2743 t
12 I f
(c)3860 2743 w
12 R f
(, letting)1 372 1 3913 2743 t
12 I f
(R)4318 2743 w
9 R f
(1)4406 2767 w
12 R f
(be the rect-)2 546 1 4494 2743 t
( in)1 127( city)1 213( Each)1 301(angle to the left of the line.)6 1312 4 720 2893 t
12 I f
(C)2706 2893 w
9 I f
(R)2801 2917 w
12 R f
(to the left of the line is assigned to)8 1683 1 2899 2893 t
12 I f
(R)4615 2893 w
9 R f
(1)4703 2917 w
12 R f
(, each)1 282 1 4758 2893 t
(city to the right is assigned to)6 1431 1 720 3043 t
12 I f
(R)2183 3043 w
9 R f
(2)2271 3067 w
12 R f
(, and cities on the line are divided as equally as possible)11 2714 1 2326 3043 t
(between the two rectangles, except that city)6 2098 1 720 3193 t
12 I f
(c)2848 3193 w
12 R f
(itself is assigned to)3 921 1 2931 3193 t
12 I f
(both R)1 317 1 3882 3193 t
9 R f
(1)4214 3217 w
12 R f
(and)4299 3193 w
12 I f
(R)4502 3193 w
9 R f
(2)4590 3217 w
12 R f
(.)4645 3193 w
( in this way into subrectangles, none of which)8 2262(Once the cities have been partitioned)5 1808 2 970 3379 t
(has more than)2 686 1 720 3529 t
12 I f
(K)1442 3529 w
12 R f
( each subrectangle to a processor, and)6 1846(cities assigned to it, one can send)6 1636 2 1558 3529 t
( 3-Opt \(or any other TSP algorithm\) on the corresponding)9 2888(have that processor run 2- or)5 1432 2 720 3679 t
( be a connected Eulerian subgraph,)5 1734( union of the tours thus found will)7 1725( The)1 258(set of cities.)2 603 4 720 3829 t
( tour for the entire instance by using shortcuts as in the)11 2779(and so it can be converted to a)7 1541 2 720 3979 t
(Christofides algorithm.)1 1118 1 720 4129 t
( its value as)3 580(Although we have not implemented this scheme as a parallel algorithm,)10 3490 2 970 4315 t
( can be exploited even on a single processor: we)9 2416(a way to reduce memory requirements)5 1904 2 720 4465 t
( another, reusing the space required for each one.)8 2407(simply solve the subproblems one after)5 1913 2 720 4615 t
( the running time of our basic TSP algorithm is superlinear, this sequen-)12 3472(To the extent that)3 848 2 720 4765 t
( speed-ups over performing the algorithm on the complete)8 2886(tial scheme can even provide)4 1434 2 720 4915 t
(instance. For)1 662 1 720 5065 t
12 I f
(N)1423 5065 w
12 S f
(=)1553 5065 w
12 R f
(10)1669 5065 w
9 R f
(6)1796 5017 w
12 R f
( in run-time obtained by partitioning into)6 2034(and 3-Opt, the savings)3 1114 2 1892 5065 t
( there was also a corresponding)5 1535( Unfortunately,)1 769( 2.)1 125(1024 subproblems was over a factor of)6 1891 4 720 5215 t
(loss in tour quality, with the original 3.0)7 2070 1 720 5365 t
12 I f
(%)2790 5365 w
12 R f
( bound)1 348(average excess over the Held-Karp)4 1753 2 2939 5365 t
(increasing to 5.5)2 800 1 720 5515 t
12 I f
(%)1520 5515 w
12 R f
( into just 16 subproblems, which just might be enough to)10 2758(. Partitioning)1 662 2 1620 5515 t
(allow us to handle 10)4 1144 1 720 5665 t
9 R f
(6)1871 5617 w
12 R f
(cities on our hypothetical 30 megabyte workstation, greatly)7 3055 1 1985 5665 t
( now the increase is only to 3.2)7 1544(reduces the tour-quality penalty;)3 1578 2 720 5815 t
12 I f
(%)3842 5815 w
12 R f
( general scheme)2 787(. This)1 311 2 3942 5815 t
( such instances the deterio-)4 1306(can also be applied to instances with fewer cities, although for)10 3014 2 720 5965 t
( rule of)2 363( A)1 154(ration in tour quality sets in earlier, i.e., for smaller numbers of subproblems.)12 3803 3 720 6115 t
( subproblem drops below 1000,)4 1518(thumb seems to be that as soon as the number of cites in a)13 2802 2 720 6265 t
(one can expect significant deterioration.)4 1926 1 720 6415 t
( variants on the above sheme, both based on gener-)9 2490(Reinelt [1994] has proposed two)4 1580 2 970 6601 t
( the cities and whose connected components can)7 2387(ating a sparse graph whose vertices are)6 1933 2 720 6751 t
( the first scheme, the)4 1075( In)1 179( solved by local optimization.)4 1504(serve as the subproblems to be)5 1562 4 720 6901 t
( edges to that city's nearest 2 \(or 3\) neigh-)9 2078(sparse graph simply contains for each city the)7 2242 2 720 7051 t
( some very small connected components, and Rohe)7 2581( approach tends to yield)4 1212(bors. This)1 527 3 720 7201 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 55 536 764
%%EndPage: 28 28
%%Page: 29 29
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
29 pagesetup
12 R f
(- 29 -)2 260 1 2750 500 t
( process whereby one successively merges nearby small compo-)8 3184([1995] has suggested a)3 1136 2 720 870 t
(nents until each merged component contains between)6 2617 1 720 1020 t
12 I f
(M /)1 144 1 3375 1020 t
12 R f
(2 and)1 272 1 3529 1020 t
12 I f
(M)3840 1020 w
12 R f
(cities, where)1 616 1 3979 1020 t
12 I f
(M)4634 1020 w
12 R f
(is the)1 267 1 4773 1020 t
( Reinelt's second scheme, the)4 1525( In)1 185( consider.)1 492(maximum size subproblem one wishes to)5 2118 4 720 1170 t
( edges from the Delaunay triangulation of the set of cities.)10 2815(sparse graph is generated using)4 1505 2 720 1320 t
( the triangulation are considered in order of increasing length, and an edge is)13 3697(The edges of)2 623 2 720 1470 t
( than)1 243(added to the graph unless it would cause the creation of a subproblem with more)14 3941 2 720 1620 t
12 I f
(M)4940 1620 w
12 R f
(cities or would reduce the total number of subproblems below some prescribed threshold.)12 4303 1 720 1770 t
( fol-)1 210(Given such a partition into connected components, a tour can be constructed as)12 3860 2 970 1956 t
( ordering of the components within the tour is determined first, along)11 3460( global)1 344(lows. The)1 516 3 720 2106 t
( sub-)1 242( Each)1 303(with the identities of the edges that will link each component to its successor.)13 3775 3 720 2256 t
( cities, i.e., those that are involved in inter-component)8 2601(problem then has two distinguished)4 1719 2 720 2406 t
( to a subproblem, we add an unbreakable edge)8 2286( applying local optimization)3 1376(links. Before)1 658 3 720 2556 t
( the subproblem will contain a)5 1480( insures that the resulting tour for)6 1635( This)1 279(between these two.)2 926 4 720 2706 t
( all subproblems have been)4 1412( Once)1 338( cities.)1 341(Hamiltonian path linking the entry and exit)6 2229 4 720 2856 t
( on)1 171( Based)1 374( this way, it will be straightforward to assemble the overall tour.)11 3315(solved in)1 460 4 720 3006 t
(experiments with 24 selected instances from)5 2179 1 720 3156 t
12 C f
(TSPLIB)2938 3156 w
12 R f
( neither of)2 514(, Reinelt concludes that)3 1156 2 3370 3156 t
( should be noted, how-)4 1105( It)1 136(these two approaches is preferable to a rectangle-based scheme.)8 3079 3 720 3306 t
( does not explicitly rely on)5 1337( It)1 143(ever, that his first variant is more general than the others:)10 2840 3 720 3456 t
( triangle inequality hold would)4 1512(the geometric nature of the instance \(although having the)8 2808 2 720 3606 t
(probably be helpful\).)2 1011 1 720 3756 t
14 I f
(Tour-Based Partitioning)1 1381 1 720 4086 t
12 R f
( for the loss in tour quality engendered by geometric partitioning schemes is)12 3770(One reason)1 550 2 720 4309 t
( only limited opportunities for)4 1477(the fact that each subproblem is handled in isolation, with)9 2843 2 720 4459 t
( drawback of the scheme is that,)6 1640( Another)1 469( of the subtours.)3 823(intelligent patching together)2 1388 4 720 4609 t
( it is restricted to geometric)5 1522(although it can be generalized to higher dimensions,)7 2798 2 720 4759 t
( alternative)1 543(instances. The)1 722 2 720 4909 t
12 I f
(tour-based)2020 4909 w
12 R f
(partitioning scheme avoids these pitfalls by basing)6 2464 1 2576 4909 t
( current tour and by performing more than)7 2053(its partition of the cities on the structure of the)9 2267 2 720 5059 t
(one partitioning phase.)2 1099 1 720 5209 t
( breaks)1 357(One begins by using a simple heuristic to generate an initial tour and then)13 3713 2 970 5395 t
(that tour up into)3 782 1 720 5545 t
12 I f
(k)1535 5545 w
12 R f
(segments of length)2 915 1 1621 5545 t
12 I f
(N / k)2 187 1 2569 5545 t
12 R f
(, where)1 354 1 2756 5545 t
12 I f
(k)3142 5545 w
12 R f
(is greater than or equal to the number)7 1813 1 3227 5545 t
( to a processor, which converts the)6 1700( segment is then handed)4 1175( Each)1 304(of processors available.)2 1141 4 720 5695 t
( to improve the)3 738(segment into a tour by adding an edge between its endpoints and attempts)12 3582 2 720 5845 t
( to the constraint that the added)6 1606(tour by local optimization \(2-Opt, 3-Opt, etc.\), subject)7 2714 2 720 5995 t
( segment with)2 691( resulting tour can thus be turned back into a)9 2221( The)1 255(edge cannot be deleted.)3 1153 4 720 6145 t
( can then be put back together into a)8 1781(the same two endpoints, and the improved segments)7 2539 2 720 6295 t
( where each new segment)4 1303( can then construct a revised partition)6 1917( We)1 245(new overall tour.)2 855 4 720 6445 t
( the parallel local)3 859(takes half its cities from each of two adjacent old segments and repeat)12 3461 2 720 6595 t
( phases can be performed until a time limit is exceeded or)11 2797( Additional)1 577(optimization phase.)1 946 3 720 6745 t
( Applegate)1 525( scheme has been tried by)5 1242( This)1 275(no significant further improvement is obtained.)5 2278 4 720 6895 t
( of 10 workstations and a)5 1226(and Cook [1994] on a 10,907,064-city instance using a network)9 3094 2 720 7045 t
12 I f
(k)720 7195 w
12 R f
( assigned 100 subproblems to each processor, and each processor)9 3206( They)1 313(of about 1000.)2 711 3 810 7195 t
( neighbor-list implementation of the Lin-)5 2062( A)1 163(ran its assigned subproblems in sequence.)5 2095 3 720 7345 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 41 536 764
%%EndPage: 29 29
%%Page: 30 30
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
30 pagesetup
12 R f
(- 30 -)2 260 1 2750 500 t
( The)1 274( the local-optimization engine.)3 1555(Kernighan algorithm of Section 4.2 was used as)7 2491 3 720 870 t
(resulting tour was within 4.3)4 1380 1 720 1020 t
12 I f
(%)2100 1020 w
12 R f
(of the Held-Karp bound for the instance.)6 1950 1 2230 1020 t
( tour-quality penalty for partitioning in this way.)7 2369(Note that there still appears to be a)7 1701 2 970 1206 t
( the segment boundaries, it remains difficult to move a city very far)12 3244(Despite the shifting of)3 1076 2 720 1356 t
( alternative tour-based partitioning scheme)4 2066( An)1 207(away from its original position in the tour.)7 2047 3 720 1506 t
( in the)2 333( As)1 209( [1989] helps alleviate this drawback.)5 1882(suggested by Allwright and Carpenter)4 1896 4 720 1656 t
(above scheme, they partition the current tour into segments, but now they create 2)13 4020 1 720 1806 t
12 I f
(k)4750 1806 w
12 R f
(seg-)4840 1806 w
(ments and hand out)3 941 1 720 1956 t
12 I f
(pairs)1691 1956 w
12 R f
( the segments are)3 831( If)1 140(of segments to processors.)3 1269 3 1969 1956 t
12 I f
(S)4239 1956 w
9 R f
(1)4314 1980 w
12 R f
(,)4379 1956 w
12 I f
(S)4419 1956 w
9 R f
(2)4494 1980 w
12 R f
(,)4559 1956 w
12 I f
(.)4599 1956 w
12 R f
(.. ,)1 100 1 4629 1956 t
12 I f
(S)4739 1956 w
9 R f
(2)4814 1980 w
9 I f
(k)4866 1980 w
12 R f
(in)4946 1956 w
(order around the tour, we pair)5 1548 1 720 2106 t
12 I f
(S)2322 2106 w
9 R f
(1)2397 2130 w
12 R f
(with)2506 2106 w
12 I f
(S)2774 2106 w
9 R f
(2)2849 2130 w
9 I f
(k)2901 2130 w
12 R f
(,)2951 2106 w
12 I f
(S)3035 2106 w
9 R f
(2)3110 2130 w
12 R f
(with)3219 2106 w
12 I f
(S)3487 2106 w
9 R f
(2)3562 2130 w
9 I f
(k)3614 2130 w
9 S f
(-)3676 2130 w
9 R f
(1)3741 2130 w
12 R f
(, and in general)3 812 1 3796 2106 t
12 I f
(S)4662 2106 w
9 I f
(j)4737 2130 w
12 R f
(with)4826 2106 w
12 I f
(S)720 2256 w
9 R f
(2)795 2280 w
9 I f
(k)847 2280 w
9 S f
(-)909 2280 w
9 I f
(j)974 2280 w
9 S f
(+)1014 2280 w
9 R f
(1)1079 2280 w
12 R f
(, 1)1 140 1 1134 2256 t
12 S f
(\243)1314 2256 w
12 I f
(j)1430 2256 w
12 S f
(\243)1504 2256 w
12 I f
(k)1610 2256 w
12 R f
( degenerate, as the segments)4 1440( that the first and last pairs are)7 1594(. Note)1 343 3 1663 2256 t
( endpoint, and so each can be viewed as a single segment and treated as in the)16 3914(share an)1 406 2 720 2406 t
( a tour by adding)4 842( non-degenerate pair of segments is converted into)7 2482( A)1 154(previous scheme.)1 842 4 720 2556 t
( of the first segment to one of the end-)9 1930(two edges, each connecting one of the endpoints)7 2390 2 720 2706 t
( added edges are chosen so that each shortcuts a path made up)12 3052( The)1 252(points of the second.)3 1016 3 720 2856 t
( free to perform any local opti-)6 1506( processor is then)3 847( The)1 249(of tour edges not in either segment.)6 1718 4 720 3006 t
( a phase of local)4 832( After)1 326( on its subtour that does not break an added edge.)10 2502(mization step)1 660 4 720 3156 t
( reassembled from its)3 1060(optimization based on such a partition, an overall tour can then be)11 3260 2 720 3306 t
(parts, and we can repartition the tour and try again.)9 2452 1 720 3456 t
( the context of 2-Opt, but did not)7 1653(Allwright and Carpenter proposed this scheme in)6 2417 2 970 3642 t
( [1995] modified)2 821( Aarts, and Swinkels)3 1006( Verhoeven,)1 619(attempt a serious test of the algorithm.)6 1874 4 720 3792 t
(the approach and tested it on)5 1428 1 720 3942 t
12 C f
(TSPLIB)2188 3942 w
12 R f
(instances with as many as 11,849 cities, using a)8 2379 1 2661 3942 t
( modification includes a clever reparti-)5 1917( Their)1 330( T805 transputers.)2 891(network of 512 INMOS)3 1182 4 720 4092 t
( their algorithm will not halt until it has found a solu-)11 2611(tioning scheme that guarantees that)4 1709 2 720 4242 t
( neighborhood for the complete prob-)5 1810(tion that is locally optimal with respect to the 2-Opt)9 2510 2 720 4392 t
( degradation in tour quality as the num-)7 1964( they experience little if any)5 1386(lem. Consequently,)1 970 3 720 4542 t
( this scheme requires)3 1078( Unfortunately,)1 786(ber of processors increases.)3 1386 3 720 4692 t
12 S f
(W)4022 4692 w
12 R f
(\()4124 4692 w
12 I f
(N)4174 4692 w
9 R f
(2)4269 4644 w
12 I f
(/ p)1 104 1 4334 4692 t
12 S f
(+)4468 4692 w
12 I f
(pN)4554 4692 w
12 R f
(\) time,)1 336 1 4704 4692 t
(where)720 4842 w
12 I f
(p)1044 4842 w
12 R f
( is)1 114( This)1 277( of processors.)2 703(is the number)2 659 4 1136 4842 t
12 S f
(W)2922 4842 w
12 R f
(\()3024 4842 w
12 I f
(N)3074 4842 w
9 R f
(1. 5)1 120 1 3169 4794 t
12 R f
(\) regardless of)2 693 1 3309 4842 t
12 I f
(p)4035 4842 w
12 R f
(and so can provide)3 912 1 4128 4842 t
(significant speedups only when compared to the naive)7 2655 1 720 4992 t
12 S f
(W)3412 4992 w
12 R f
(\()3514 4992 w
12 I f
(N)3564 4992 w
9 R f
(2)3659 4944 w
12 R f
( of 2-Opt,)2 482(\) implementation)1 834 2 3724 4992 t
( using only a single processor.)5 1486(which we already know how to speed up even more while)10 2834 2 720 5142 t
( is almost a factor)4 872(Thus for the 11,849-city instance and 512 processors, the running time)10 3448 2 720 5292 t
(200 greater than the time for neighbor-list 2-Opt on a single SGI Challenge processor, a)14 4320 1 720 5442 t
(factor that appears to be growing with instance size.)8 2499 1 720 5592 t
( that the transputers are slower proces-)6 1873(Some of this factor can be blamed on the fact)9 2197 2 970 5778 t
( driven by the desire to)5 1125(sors, but most is due to the nature of the approach itself, which is)13 3195 2 720 5928 t
( necessar-)1 480( is this)2 322( Nor)1 249(obtain local optimality with respect to the full 2-Opt neighborhood.)9 3269 4 720 6078 t
( by Verhoeven et al., although as good as the)9 2256( tours found)2 605( The)1 258(ily that desirable a goal.)4 1201 4 720 6228 t
( their single-processor implementation of full 2-Opt, are still not)9 3142(tours they obtained with)3 1178 2 720 6378 t
( the 11,849-city instance they)4 1475( For)1 241( as those obtained using neighbor-list 2-Opt.)6 2219(as good)1 385 4 720 6528 t
(are some 3)2 526 1 720 6678 t
12 I f
(%)1246 6678 w
12 R f
( consequence of the dif-)4 1169( appears to be typical and is probably a)8 1899(worse. This)1 593 3 1379 6678 t
( an)1 160( For)1 244( considered and made in the two algorithms.)7 2249(ferent orders in which moves are)5 1667 4 720 6828 t
( of a 3-Opt variant, Verhoeven, Aarts, van de Sluis,)9 2623(analogous parallel implementation)2 1697 2 720 6978 t
(and Vaessens [1992] report much better tour quality results \(ones comparable to the)12 4320 1 720 7128 t
( in excess of those)4 889(neighbor-list implementation\), although their running times are still far)8 3431 2 720 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 30 30
%%Page: 31 31
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
31 pagesetup
12 R f
(- 31 -)2 260 1 2750 500 t
( this does not appear to be a)7 1387( Thus)1 307(for the single-processor neighbor-list implementation.)4 2626 3 720 870 t
( succeed, it probably must)4 1271( a partition-based parallel scheme to)5 1750( For)1 229(competitive approach.)1 1070 4 720 1020 t
( sequential implementations)2 1368(be organized so that it can use the same speed-up tricks our)11 2952 2 720 1170 t
(exploited, even if this means that local optimality cannot be guaranteed.)10 3461 1 720 1320 t
( wish to consider the following hybrid between the geometric and)10 3307(One might also)2 763 2 970 1506 t
( current tour, one)3 833( one's)1 293( Given)1 356(tour-based partitioning schemes proposed by Rohe [1995].)6 2838 4 720 1656 t
( of cities closely related in a geometric sense, for exam-)10 2701(generates subproblems consisting)2 1619 2 720 1806 t
( given rectangle or the)4 1094(ple all cities in a)4 814 2 720 1956 t
12 I f
(M)2663 1956 w
12 R f
( a given)2 390( For)1 232(nearest neighbors of a given city.)5 1620 3 2798 1956 t
(subproblem)720 2106 w
12 I f
(S)1326 2106 w
12 R f
(, the current tour induces a collection of paths through the cities of)12 3292 1 1386 2106 t
12 I f
(S)4716 2106 w
12 R f
(. We)1 264 1 4776 2106 t
( occur in the overall)4 1013(add additional edges to link these paths up in the same order they)12 3307 2 720 2256 t
( tour for)2 432(tour, yielding a)2 768 2 720 2406 t
12 I f
(S)1969 2406 w
12 R f
(, and then perform local optimization on this tour, with the)10 3011 1 2029 2406 t
( results in a new set of paths through)8 1875( This)1 288( and undeletable.)2 845(added edges being fixed)3 1208 4 720 2556 t
12 I f
(S)4980 2556 w
12 R f
( that local opti-)3 739( Assuming)1 549(which can replace the old set in the tour for the entire instance.)12 3032 3 720 2706 t
(mization improved the tour for)4 1552 1 720 2856 t
12 I f
(S)2319 2856 w
12 R f
( When)1 362(, the new overall tour will be shorter as well.)9 2299 2 2379 2856 t
( some danger that the)4 1084(multiple subproblems of this sort are handled in parallel, there is)10 3236 2 720 3006 t
( tour, even if no two sub-)6 1223(overall result will be a collection of disjoint cycles rather than a)11 3097 2 720 3156 t
( for such subtours and patches them)6 1740( Rohe's scheme, one checks)4 1357( In)1 162(problems share a city.)3 1061 4 720 3306 t
( applied this scheme in a multi-phase)6 1971( Rohe)1 344(together using additional 2-Opt moves.)4 2005 3 720 3456 t
( for which we reported Applegate and)6 1968(approach to the same 10,907,064-city instance)5 2352 2 720 3606 t
( Lin-Kernighan local search)3 1433( the same)2 516( Using)1 378(Cook's results in the previous section.)5 1993 4 720 3756 t
( weeks on a network of four IBM 550 workstations, he reduced the excess)13 3585(engine and two)2 735 2 720 3906 t
(over the Held-Karp bound from Applegate and Cook's 4.3)8 2889 1 720 4056 t
12 I f
(%)3609 4056 w
12 R f
(to 1.57)1 344 1 3749 4056 t
12 I f
(%)4093 4056 w
12 R f
( is roughly)2 533(. This)1 314 2 4193 4056 t
( run on the)3 526(the tour quality that Lin-Kernighan might be expected to produce were it to be)13 3794 2 720 4206 t
( also obtained a tour of this quality for an even)10 2294( has)1 196( Rohe)1 319(whole \(unpartitioned\) instance.)2 1511 4 720 4356 t
( in the sky of some 18 mil-)7 1350(bigger instance, one whose cities correspond to the locations)8 2970 2 720 4506 t
(lion stars.)1 469 1 720 4656 t
14 I f
(Using Parallelism in Preprocessing and the Search for Improving Moves)9 4105 1 720 4986 t
12 R f
( is not a constraint, there are much simpler ways to obtain significant)12 3582(When memory)1 738 2 720 5209 t
( optimization algorithms with-)3 1476(speedups over our fast sequential implementations of local)7 2844 2 720 5359 t
( recall that typically over 2/3 of the time for the)10 2306( First)1 284( in tour quality.)3 749(out paying a penalty)3 981 4 720 5509 t
( neighbor lists)2 729(neighbor-list implementations of 2- and 3-Opt is spent in building the)10 3591 2 720 5659 t
( memory)1 437(themselves, which is readily parallelizable assuming each processor has enough)9 3883 2 720 5809 t
(to store the full instance.)4 1187 1 720 5959 t
( dominates the remaining time)4 1513(Similarly, the search for improving moves typically)6 2557 2 970 6145 t
( 3-Opt is)2 425( example, when neighbor-list)3 1411( For)1 230(and offers ample opportunities for parallelism.)5 2254 4 720 6295 t
( more moves for)3 857(applied to a random Euclidean instance, we typically evaluate 50 or)10 3463 2 720 6445 t
( why these searches cannot be performed)6 2020( is no reason)3 631( There)1 348(every move actually made.)3 1321 4 720 6595 t
( the neighbor)2 660( processor may need access to the entire instance and all)10 2822( Each)1 311(in parallel.)1 527 4 720 6745 t
(lists, but assuming there is enough memory so that all this information can be replicated)14 4320 1 720 6895 t
(at each processor, significant reductions in running time should be possible.)10 3648 1 720 7045 t
( exploit these two avenues of parallelism in the)8 2369(We know of no serious attempt to)6 1701 2 970 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 31 31
%%Page: 32 32
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
32 pagesetup
12 R f
(- 32 -)2 260 1 2750 500 t
( more attractive for some)4 1209(context of 2- and 3-Opt, but search parallelization becomes even)9 3111 2 720 870 t
( an application of it to the Lin-)7 1565(of the algorithms we shall discuss in later sections, and)9 2755 2 720 1020 t
(Kernighan algorithm will be mentioned in Section 4.)7 2539 1 720 1170 t
14 B f
( Simple Local Optimization Algorithms)4 2355(3.5. Other)1 637 2 720 1500 t
12 R f
( example, one could)3 1000( For)1 238( 3-Opt exist.)2 620(Simpler local optimization algorithms than 2- and)6 2462 4 720 1723 t
( adjacent cities in the current tour are inter-)8 2253(restrict exchanges to those in which two)6 2067 2 720 1873 t
(changed, thus reducing the size of a neighborhood from the)9 2963 1 720 2023 t
12 I f
(N)3725 2023 w
12 R f
(\()3815 2023 w
12 I f
(N)3865 2023 w
12 S f
(-)3975 2023 w
12 R f
(2 \))1 110 1 4061 2023 t
12 I f
(/)4181 2023 w
12 R f
( 2-Opt to)2 460(2 of)1 202 2 4225 2023 t
12 I f
(N)4930 2023 w
12 R f
(.)5010 2023 w
(However, such simpler neighborhoods are not powerful enough to yield results at all)12 4320 1 720 2173 t
(close to those of 2-Opt, and as observed above, versions of 2-Opt can be implemented to)15 4320 1 720 2323 t
( the real game is to)5 932( Thus)1 305(run far more quickly than its neighborhood size would suggest.)9 3083 3 720 2473 t
( algorithms that are a bit more complicated than 2-Opt \(or 3-)11 3081(devise local optimization)2 1239 2 720 2623 t
(Opt\) but produce better tours.)4 1425 1 720 2773 t
14 I f
(Between 2- and 3-Opt)3 1231 1 720 3103 t
12 R f
( Bentley [1992] calls)3 1074(A first, simple extension is what)5 1668 2 720 3326 t
12 I f
(2.5-Opt)3515 3326 w
12 R f
( this algorithm we)3 942(. In)1 213 2 3885 3326 t
( neighborhood to include a simple form of 3-Opt move that can be)12 3443(expand the 2-Opt)2 877 2 720 3476 t
( a single city from its cur-)6 1286( a 2.5-Opt move one relocates)5 1470( In)1 166(found with little extra effort.)4 1398 4 720 3626 t
( In)1 169( a position between two current tour neighbors elsewhere in the tour.)11 3402(rent location to)2 749 3 720 3776 t
(Figure 2, this corresponds to the situation where)7 2318 1 720 3926 t
12 I f
(b)3068 3926 w
12 R f
(and)3158 3926 w
12 I f
(c)3361 3926 w
12 R f
( search for)2 508( The)1 247(are the same city.)3 841 3 3444 3926 t
( each)1 252( For)1 230( incorporated into our basic 2-Opt search as follows:)8 2547(such moves can be)3 915 4 720 4076 t
12 I f
(t)4697 4076 w
9 R f
(3)4746 4100 w
12 R f
(can-)4834 4076 w
(didate \(i.e., each city that is closer to)7 1806 1 720 4226 t
12 I f
(t)2562 4226 w
9 R f
(2)2611 4250 w
12 R f
(than is)1 324 1 2702 4226 t
12 I f
(t)3062 4226 w
9 R f
(1)3111 4250 w
12 R f
( 2-Opt)1 317(\) we evaluate the corresponding)4 1557 2 3166 4226 t
(move)720 4376 w
12 I f
(plus)1023 4376 w
12 R f
( places)1 335(the 2.5-Opt move that)3 1073 2 1260 4376 t
12 I f
(t)2703 4376 w
9 R f
(2)2752 4400 w
12 R f
(between)2842 4376 w
12 I f
(t)3276 4376 w
9 R f
(3)3325 4400 w
12 R f
(and)3415 4376 w
12 I f
(t)3623 4376 w
9 R f
(4)3672 4400 w
12 R f
(and the 2.5-Opt move that)4 1278 1 3762 4376 t
(places)720 4526 w
12 I f
(t)1072 4526 w
9 R f
(3)1121 4550 w
12 R f
(between)1228 4526 w
12 I f
(t)1679 4526 w
9 R f
(1)1728 4550 w
12 R f
(and)1835 4526 w
12 I f
(t)2060 4526 w
9 R f
(2)2109 4550 w
12 R f
( been implemented for geometric instances)5 2182( has)1 212(. 2.5-Opt)1 482 3 2164 4526 t
( random Euclidean instances it)4 1572( For)1 251( on-the-fly approach by Bentley [1992].)5 2034(using the)1 463 4 720 4676 t
(yields a 0.5)2 579 1 720 4826 t
12 I f
(%)1299 4826 w
12 R f
(improvement in average tour length over 2-Opt at the cost of a 30-40)12 3497 1 1443 4826 t
12 I f
(%)4940 4826 w
12 R f
( our testbed of)3 703( For)1 231(increase in running time.)3 1208 3 720 4976 t
12 C f
(TSPLIB)2895 4976 w
12 R f
(instances, the improvement in tour)4 1680 1 3360 4976 t
(length over 2-Opt was more like 1)6 1702 1 720 5126 t
12 I f
(%)2422 5126 w
12 R f
( was still 1)3 546(. This)1 313 2 2522 5126 t
12 I f
(%)3381 5126 w
12 R f
(worse than what our)3 1006 1 3520 5126 t
12 I f
(neighbor-)4566 5126 w
(list)720 5276 w
12 R f
(implementation of full 3-Opt obtains, but it took only half the time.)11 3242 1 899 5276 t
( 3-Opt is the)3 634(A second algorithm that is intermediate between 2- and)8 2752 2 970 5462 t
12 I f
(Or-Opt)4398 5462 w
12 R f
(algo-)4793 5462 w
(rithm originally proposed by Or [1976] and popularized by Golden and Stewart [1985].)12 4320 1 720 5612 t
( to 3-Opt moves in which a segment consisting of three or fewer)12 3102(Here we restrict attention)3 1218 2 720 5762 t
( excised from the tour and placed between two tour neighbors else-)11 3335(consecutive cities is)2 985 2 720 5912 t
( situation where cities)3 1056( Figure 2, this corresponds to the)6 1580( In)1 160(where in the tour.)3 847 4 720 6062 t
12 I f
(b)4394 6062 w
12 R f
(and)4485 6062 w
12 I f
(c)4689 6062 w
12 R f
(are 0,)1 267 1 4773 6062 t
( version of)2 518( A)1 148(1, or 2 cities apart in the tour, a natural generalization of the 2.5-Opt move.)14 3654 3 720 6212 t
( Such)1 301( be implemented by slightly modifying an implementation of 2.5-Opt.)9 3376(Or-Opt could)1 643 3 720 6362 t
( bit faster than full 3-Opt, although a slight loss in tour)11 2783(an implementation should be a)4 1537 2 720 6512 t
( only been studied by researchers)5 1612( date, however, Or-Opt has)4 1306( To)1 195(quality is to be expected.)4 1207 4 720 6662 t
(who assumed that 3-Opt requires)4 1604 1 720 6812 t
12 S f
(Q)2358 6812 w
12 R f
(\()2457 6812 w
12 I f
(N)2507 6812 w
9 R f
(3)2602 6764 w
12 R f
( so settled for Or-Opt implementations)5 1877(\) time and)2 496 2 2667 6812 t
( not competitive with our)4 1265( implementations are)2 1032( Such)1 311(that take quadratic time.)3 1196 4 720 6962 t
12 I f
(neighbor-)4566 6962 w
(list)720 7112 w
12 R f
(implementation of full 3-Opt in either running time or tour quality.)10 3221 1 899 7112 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 64 536 764
%%EndPage: 32 32
%%Page: 33 33
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
33 pagesetup
12 R f
(- 33 -)2 260 1 2750 500 t
14 I f
(k-Opt for k)2 614 1 720 870 t
14 S f
(>)1391 870 w
14 R f
(3)1525 870 w
12 R f
( on 3-Opt?)2 519( about improving)2 833( What)1 322(2.5-Opt and Or-Opt only attempt to improve on 2-Opt.)8 2646 4 720 1093 t
( changed)1 436(One obvious direction is to consider 4-Opt, where up to four tour edges can be)14 3884 2 720 1243 t
( the way of further improvement, however,)6 2127( apparently yields little in)4 1268( This)1 283(in one move.)2 642 4 720 1393 t
( with the subsequent develop-)4 1439( observation, together)2 1049( Lin's)1 316(as was observed by Lin [1965].)5 1516 4 720 1543 t
( Kernighan [1973], com-)3 1208(ment of the highly successful variable-Opt algorithm of Lin and)9 3112 2 720 1693 t
( the fixed-)2 538(bined to quash any further research into)6 2046 2 720 1843 t
12 I f
(k)3304 1843 w
12 R f
(-Opt algorithms with)2 1054 1 3357 1843 t
12 I f
(k)4463 1843 w
12 S f
(>)4566 1843 w
12 R f
(3. The)1 358 1 4682 1843 t
(Lin-Kernighan algorithm itself would be hard to characterize as a)9 3200 1 720 1993 t
12 I f
(simple)3956 1993 w
12 R f
(local optimiza-)1 733 1 4307 1993 t
(tion algorithm, and we will postpone its discussion until Section 4.)10 3211 1 720 2143 t
( up)1 152(One special case of the 4-Opt move is worth discussing, however, as it will come)14 3918 2 970 2329 t
( is the)2 292( This)1 277(again in Section 6.)3 904 3 720 2479 t
12 I f
(double-bridge)2225 2479 w
12 R f
( moves were first mentioned in)5 1503(move. Such)1 599 2 2938 2479 t
( of a simple)3 568(the original Lin-Kernighan paper [1973], where they were used as an example)11 3752 2 720 2629 t
( by the)2 367(move that, because of its non-sequential nature, would not normally be found)11 3953 2 720 2779 t
( of)1 140( double-bridge moves can be viewed as the combination)8 2774( A)1 155(Lin-Kernighan algorithm.)1 1251 4 720 2929 t
( \(the bridges\), each of which by itself converts the tour into two)12 3133(two illegal 2-Opt moves)3 1187 2 720 3079 t
( that the two moves be so interleaved that performing)9 2721(disjoint cycles, with the proviso)4 1599 2 720 3229 t
( one starts by breaking four edges in the)8 2018( Operationally,)1 764(both takes us back to full tour.)6 1538 3 720 3379 t
( the resulting four tour segments are)6 1749(tour. Suppose)1 693 2 720 3529 t
12 I f
(A)3194 3529 w
9 R f
(1)3282 3553 w
12 I f
(A)3347 3529 w
9 R f
(2)3435 3553 w
12 I f
(A)3500 3529 w
9 R f
(3)3588 3553 w
12 I f
(A)3653 3529 w
9 R f
(4)3741 3553 w
12 R f
( per-)1 226( move)1 299( The)1 248(, in order.)2 471 4 3796 3529 t
(mutes these into the new ordering)5 1676 1 720 3679 t
12 I f
(A)2436 3679 w
9 R f
(2)2524 3703 w
12 I f
(A)2589 3679 w
9 R f
(1)2677 3703 w
12 I f
(A)2742 3679 w
9 R f
(4)2830 3703 w
12 I f
(A)2895 3679 w
9 R f
(3)2983 3703 w
12 R f
( segments\))1 527(\(without reversing any of the)4 1435 2 3078 3679 t
( based solely on 2-bridge moves have not to date)9 2355( Algorithms)1 609(and this yields the new tour.)5 1356 3 720 3829 t
( [1992] has had some success with a generaliza-)8 2355(been very effective, although Schnetzler)4 1965 2 720 3979 t
( several bridge moves are performed and the resulting subtours are then)11 3649(tion in which)2 671 2 720 4129 t
( does not pro-)3 688( Schnetzler)1 575( additional 2-Opt moves.)3 1220(recombined, one pair at a time, using)6 1837 4 720 4279 t
( of his algorithm and only reports results for two instances, but for one of)14 3566(vide full details)2 754 2 720 4429 t
(these, the 532-city instance)3 1354 1 720 4579 t
12 C f
(att532)2119 4579 w
12 R f
(from)2596 4579 w
12 C f
(TSPLIB)2875 4579 w
12 R f
( tours)1 285(, he finds substantially better)4 1448 2 3307 4579 t
( other, a 10,000-city random Euclidean instance, his algorithm does)9 3342( the)1 186( For)1 236(than 3-Opt.)1 556 4 720 4729 t
( differ-)1 356(signficantly worse and also takes substantially more time, even accounting for)10 3964 2 720 4879 t
( well, at least)3 662( thus suspect that the approach does not scale)8 2240( We)1 234(ences in machine speed.)3 1184 4 720 5029 t
(as currently implemented.)2 1253 1 720 5179 t
14 I f
(Dynasearch)720 5509 w
12 R f
( van de Velde [1995], building on earlier work of Carlier and Villon [1990],)13 3860(Potts and)1 460 2 720 5732 t
(have suggested another interesting approach that combines several 2-Opt moves into a)11 4320 1 720 5882 t
( a sense their algorithm is simply a generalization of the variant)11 3157( In)1 168(single overall move.)2 995 3 720 6032 t
( Typically)1 543( to make the best improving move.)6 1806(of 2-Opt in which one always chooses)6 1971 3 720 6182 t
( one step of the ``choose-the-best'' variant)6 2132(many of the improving moves found during)6 2188 2 720 6332 t
( starting over from scratch in one's)6 1689(remain legal even after one of them has been made, so)10 2631 2 720 6482 t
( of redundant effort.)3 985(search for the next improving move can involve substantial amounts)9 3335 2 720 6632 t
( a)1 92( For)1 237(Potts and van de Velde attempt to eliminate some of this redundancy as follows.)13 3991 3 720 6782 t
(given move)1 569 1 720 6932 t
12 I f
(M)1324 6932 w
12 R f
(\(2-, 2.5-, or 3-Opt\), let)4 1101 1 1459 6932 t
12 I f
(c)2595 6932 w
12 R f
(\()2658 6932 w
12 I f
(M)2708 6932 w
12 R f
( tour neighbor)2 693(\) be the set of cities that have a)8 1529 2 2818 6932 t
(changed by)1 552 1 720 7082 t
12 I f
(M)1305 7082 w
12 R f
( terms of Section 3.3, this would be {)8 1811( the)1 180(. In)1 193 3 1405 7082 t
12 I f
(t)3589 7082 w
9 R f
(1)3638 7106 w
12 R f
(,)3703 7082 w
12 I f
(t)3743 7082 w
9 R f
(2)3792 7106 w
12 R f
(,)3857 7082 w
12 I f
(t)3897 7082 w
9 R f
(3)3946 7106 w
12 R f
(,)4011 7082 w
12 I f
(t)4051 7082 w
9 R f
(4)4100 7106 w
12 R f
( we)1 171( If)1 142(} for 2-Opt.)2 572 3 4155 7082 t
(picture the current tour as a Hamiltonian path running from)9 2900 1 720 7232 t
12 S f
(p)3656 7232 w
12 R f
( to)1 130(\( 1 \))2 160 2 3732 7232 t
12 S f
(p)4058 7232 w
12 R f
(\()4134 7232 w
12 I f
(N)4184 7232 w
12 R f
(\), Potts and van)3 766 1 4274 7232 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 33 33
%%Page: 34 34
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
34 pagesetup
12 R f
(- 34 -)2 260 1 2750 500 t
(de Velde declare two moves)4 1367 1 720 870 t
12 I f
(M)2119 870 w
9 R f
(1)2234 894 w
12 R f
(and)2321 870 w
12 I f
(M)2526 870 w
9 R f
(2)2641 894 w
12 R f
(to be)1 239 1 2728 870 t
12 I f
(independent)2999 870 w
12 R f
(so long as either every city in)6 1422 1 3618 870 t
12 I f
(c)720 1020 w
12 R f
(\()783 1020 w
12 I f
(M)833 1020 w
9 R f
(1)948 1044 w
12 R f
(\) comes before every city in)5 1374 1 1013 1020 t
12 I f
(c)2423 1020 w
12 R f
(\()2486 1020 w
12 I f
(M)2536 1020 w
9 R f
(2)2651 1044 w
12 R f
( any set of independent)4 1142( Clearly,)1 451(\) or vice versa.)3 731 3 2716 1020 t
( be made simultaneously and the result will be a tour whose length)12 3266(improving moves can)2 1054 2 720 1170 t
( 2-Opt, Potts and van de)5 1261( For)1 247(is improved by the sum of the individual improvments.)8 2812 3 720 1320 t
( set can be determined in)5 1273(Velde observe that the best such)5 1631 2 720 1470 t
12 I f
(O)3669 1470 w
12 R f
(\()3765 1470 w
12 I f
(N)3815 1470 w
9 R f
(2)3910 1422 w
12 R f
(\) time using dynamic)3 1065 1 3975 1470 t
(programming, and their algorithm works by repeatedly finding such sets and performing)11 4320 1 720 1620 t
( tested this)2 532( They)1 314( 2-Opt move remains.)3 1072(them until no improving)3 1202 4 720 1770 t
12 I f
(dynasearch)3878 1770 w
12 R f
(approach to)1 571 1 4469 1770 t
( and 3-Opt, on random Euclidean)5 1695(2-Opt, along with analogous schemes involving 2.5-)6 2625 2 720 1920 t
(instances with from 100 to 1000 cities.)6 1868 1 720 2070 t
( tour quality yielded by the dynasearch vari-)7 2154(The most promising results concern the)5 1916 2 970 2256 t
( better on average than the standard neighbor-)7 2239(ants of 2- and 2.5-Opt, which appear to do)8 2081 2 720 2406 t
( running times unfortunately)3 1413( The)1 259(list implementations of the corresponding algorithms.)5 2648 3 720 2556 t
( neighbor-list 3-Opt, which yields better tours than)7 2481(appear to be far slower than those for)7 1839 2 720 2706 t
( speedups for)2 714( and van de Velde do observe)6 1634( Potts)1 338(any of the dynasearch variants.)4 1634 4 720 2856 t
( 2.5- and)2 451(dynasearch 2.5- and 3-Opt over the corresponding choose-the-best variants of)9 3869 2 720 3006 t
( slower than the)3 842( latter, however, evaluate all possible moves and are far)9 2897(3-Opt. The)1 581 3 720 3156 t
( here, which restrict the set of moves to be exam-)10 2376(neighbor-list implementations described)2 1944 2 720 3306 t
( although the dynasearch variants)4 1656( Thus)1 312( first improving move found.)4 1442(ined and make the)3 910 4 720 3456 t
( up substantially by using neighbor-lists themselves, we are not optimistic)10 3642(could be sped)2 678 2 720 3606 t
(about their ultimate competiveness.)3 1712 1 720 3756 t
14 I f
(GENI and GENIUS)2 1103 1 720 4086 t
12 R f
( two other recent additions to the local)7 1861(We conclude this section with a brief discussion of)8 2459 2 720 4309 t
(optimization category: the GENI and GENIUS algorithms of Gendreau, Hertz, and)10 4320 1 720 4459 t
( opti-)1 263( first of these, GENI is a hybrid of tour construction with local)12 3050( The)1 250(Laporte [1992].)1 757 4 720 4609 t
( that)1 223(mization. Suppose)1 931 2 720 4759 t
12 I f
(c)1916 4759 w
9 R f
(1)1984 4783 w
12 R f
(,)2049 4759 w
12 I f
(c)2089 4759 w
9 R f
(2)2157 4783 w
12 R f
(,)2222 4759 w
(. . .)2 150 1 2292 4729 t
(,)2482 4759 w
12 I f
(c)2522 4759 w
9 I f
(N)2590 4783 w
12 R f
( begin)1 308( We)1 237(is an arbitrary ordering of the cities.)6 1793 3 2702 4759 t
( cities,)1 324(with the partial tour consisting of the first three)8 2338 2 720 4909 t
12 I f
(c)3421 4909 w
9 R f
(1)3489 4933 w
12 R f
(,)3554 4909 w
12 I f
(c)3594 4909 w
9 R f
(2)3662 4933 w
12 R f
(,)3727 4909 w
12 I f
(c)3767 4909 w
9 R f
(3)3835 4933 w
12 R f
( then add cities to)4 885(. We)1 265 2 3890 4909 t
(the current tour in the order given, starting with)8 2312 1 720 5059 t
12 I f
(c)3065 5059 w
9 R f
(4)3133 5083 w
12 R f
( add city)2 420(. To)1 226 2 3188 5059 t
12 I f
(c)3867 5059 w
9 I f
(i)3935 5083 w
12 R f
(, we consider possible)3 1070 1 3970 5059 t
(ways of inserting it into the tour and then performing a 3- or 4-Opt move with)15 3885 1 720 5209 t
12 I f
(c)4644 5209 w
9 I f
(i)4712 5233 w
12 R f
(as an)1 253 1 4787 5209 t
( range of possibilities is restricted by requiring)7 2272( The)1 250( the deleted edges.)3 899(endpoint of one of)3 899 4 720 5359 t
( nearest neighbor lists,)3 1128(that certain of the inserted edges link cities to members of their)11 3192 2 720 5509 t
( the tour qualify to be on such lists, and the lists are con-)13 2863(where only cities currently in)4 1457 2 720 5659 t
(strained to have maximum length)4 1611 1 720 5809 t
12 I f
(p)2361 5809 w
12 R f
( the paper for more complete details.)6 1766(. See)1 263 2 2421 5809 t
( present results for GENI on random Euclidean)7 2285(Gendreau, Hertz, and Laporte [1992])4 1785 2 970 5995 t
(instances with)1 691 1 720 6145 t
12 I f
(N)1447 6145 w
12 R f
( to 500 and)3 552(ranging from 100)2 853 2 1563 6145 t
12 I f
(p)3003 6145 w
12 R f
( running times)2 706( The)1 251(ranging from 2 to 7.)4 985 3 3098 6145 t
( the authors)2 595(they report do not include the time for constructing the neighbor lists, but)12 3725 2 720 6295 t
( code, thus enabling us to measure the full running times and)11 2981(have provided us with their)4 1339 2 720 6445 t
( conclusion: If one is willing to)6 1553( Our)1 254( test the algorithm on much larger instances.)7 2188(also to)1 325 4 720 6595 t
( tour construction heuristic, then it would be the)8 2437(classify this algorithm as a legitimate)5 1883 2 720 6745 t
( with)1 248( Even)1 310( known.)1 390(best tour construction currently)3 1516 4 720 6895 t
12 I f
(p)3218 6895 w
12 S f
(=)3328 6895 w
12 R f
(3 it finds better tours than Chris-)6 1596 1 3444 6895 t
( over the Held-Karp bound that seems to be)8 2206(tofides, with an average percentage excess)5 2114 2 720 7045 t
(approaching 9.1)1 776 1 720 7195 t
12 I f
(%)1496 7195 w
12 R f
(in the limit, as compared to 9.8)6 1522 1 1630 7195 t
12 I f
(%)3152 7195 w
12 R f
( we take)2 407( If)1 144(for Christofides.)1 793 3 3286 7195 t
12 I f
(p)4664 7195 w
12 S f
(=)4774 7195 w
12 R f
(20,)4890 7195 w
( average percentage excess drops to around 5.6)7 2272(the limiting)1 564 2 720 7345 t
12 I f
(%)3556 7345 w
12 R f
(, close to the performance of)5 1384 1 3656 7345 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 41 536 764
%%EndPage: 34 34
%%Page: 35 35
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
35 pagesetup
12 R f
(- 35 -)2 260 1 2750 500 t
( a limiting average of 4.9)5 1309(our 2-Opt implementation, which has)4 1876 2 720 870 t
12 I f
(%)3905 870 w
12 R f
( GENI's)1 422(. Moreover,)1 613 2 4005 870 t
(average excess approaches its limit from below; for)7 2529 1 720 1020 t
12 I f
(N)3286 1020 w
12 S f
(=)3416 1020 w
12 R f
( is actually better than 2-)5 1223(100 it)1 285 2 3532 1020 t
(Opt so long as we take)5 1090 1 720 1170 t
12 I f
(p)1840 1170 w
12 S f
(\263)1940 1170 w
12 R f
(5 \(although still not as good as 3-Opt even with)9 2288 1 2046 1170 t
12 I f
(p)4364 1170 w
12 S f
(=)4474 1170 w
12 R f
(20\).)4590 1170 w
( For)1 236(Running times are another matter, however.)5 2157 2 970 1356 t
12 I f
(N)3402 1356 w
12 S f
(=)3532 1356 w
12 R f
( 20 times)2 462( GENI takes)2 610(1 , 000,)2 320 3 3648 1356 t
(longer than)1 566 1 720 1506 t
12 I f
(neighbor-list)1338 1506 w
12 R f
(2-Opt even when)2 869 1 2013 1506 t
12 I f
(p)2933 1506 w
12 S f
(=)3043 1506 w
12 R f
( is 500 times slower than 2-Opt)6 1636(3. It)1 245 2 3159 1506 t
(when)720 1656 w
12 I f
(p)1020 1656 w
12 S f
(=)1130 1656 w
12 R f
( ratios become even larger as)5 1452(20. These)1 507 2 1246 1656 t
12 I f
(N)3246 1656 w
12 R f
( this gap is no)4 717( of)1 141(increases. Some)1 815 3 3367 1656 t
( is likely)2 420( It)1 136( code provided has yet to be seriously optimized.)8 2370(doubt due to the fact that the)6 1394 4 720 1806 t
( although at this)3 788(that several of the ideas described above for 2- and 3-Opt are applicable,)12 3532 2 720 1956 t
(point it seems unlikely that they will be able to close the gap entirely.)13 3343 1 720 2106 t
( somewhat)1 530(The GENIUS algorithm is a true local optimization algorithm based on)10 3540 2 970 2292 t
( through)1 406( a starting tour generated by GENI, it cycles)8 2142( Given)1 356(the same principles as GENI.)4 1416 4 720 2442 t
( If)1 144(the cities looking for improvements.)4 1765 2 720 2592 t
12 I f
(c)2663 2592 w
9 I f
(i)2731 2616 w
12 R f
(is the current city, GENIUS first looks for the)8 2240 1 2800 2592 t
(best way to delete)3 900 1 720 2742 t
12 I f
(c)1662 2742 w
9 I f
(i)1730 2766 w
12 R f
( 3- or 4-Opt)3 603(from the tour and follow that deletion by a restricted)9 2630 2 1807 2742 t
( is called an)3 628( This)1 293(move \(restrictions analogous to those in GENI\).)6 2415 3 720 2892 t
12 I f
(unstring)4105 2892 w
12 R f
(operation.)4556 2892 w
(GENIUS then looks for the best way to reinsert)8 2289 1 720 3042 t
12 I f
(c)3040 3042 w
9 I f
(i)3108 3066 w
12 R f
( under GENI \(a)3 741(as it would)2 530 2 3174 3042 t
12 I f
(string)4475 3042 w
12 R f
(oper-)4787 3042 w
( code as provided)3 864( the paper suggests that uphill moves are allowed, the)9 2625(ation\). Although)1 831 3 720 3192 t
( works in true local optimization mode: If the)8 2202(to us by the authors actually)5 1368 2 720 3342 t
12 I f
(unstring)4322 3342 w
12 R f
(/)4724 3342 w
12 I f
(string)4758 3342 w
12 R f
(operations chosen for)2 1056 1 720 3492 t
12 I f
(c)1817 3492 w
9 I f
(i)1885 3516 w
12 R f
( before proceeding to)3 1059(fail to improve the tour, they are undone)7 2020 2 1961 3492 t
(the next choice for)3 900 1 720 3642 t
12 I f
(c)1651 3642 w
9 I f
(i)1719 3666 w
12 R f
( not enough to yield)4 962( improves significantly on GENI, but)5 1795(. GENIUS)1 529 3 1754 3642 t
(better average tours than 3-Opt except for our)7 2253 1 720 3792 t
12 I f
(N)3011 3792 w
12 S f
(=)3141 3792 w
12 R f
( these it beats 3-)4 818( \(For)1 276(100 instances.)1 689 3 3257 3792 t
(Opt by about 0.1)3 861 1 720 3942 t
12 I f
(%)1581 3942 w
12 R f
(as soon as)2 523 1 1729 3942 t
12 I f
(p)2300 3942 w
12 S f
(\263)2400 3942 w
12 R f
( the other hand, GENIUS's running time is)7 2181(8.\) On)1 353 2 2506 3942 t
( that for GENI by a factor of 3 or more, with the ratio growing with)15 3272(worse than)1 524 2 720 4092 t
12 I f
(N)4548 4092 w
12 R f
(\(at least)1 380 1 4660 4092 t
( For)1 235(in the implementations provided to us\).)5 1933 2 720 4242 t
12 I f
(N)2926 4242 w
12 S f
(=)3056 4242 w
12 R f
( is 50 times slower than 3-Opt)6 1492(1000, it)1 376 2 3172 4242 t
(even when)1 515 1 720 4392 t
12 I f
(p)1265 4392 w
12 S f
(=)1375 4392 w
12 R f
(3.)1491 4392 w
( way to improve on 3-Opt, it appears we may have to go)12 2752(Thus if we want a practical)5 1318 2 970 4578 t
( the current alter-)3 843( Sections 4 through 7 we examine)6 1658( In)1 165(beyond simple local optimization.)3 1654 4 720 4728 t
(natives.)720 4878 w
14 B f
( SEARCH AND THE LIN-KERNIGHAN ALGORITHM)5 3439(4. TABU)1 565 2 720 5208 t
12 R f
( the other techniques discussed in)5 1693(Tabu search, like simulated annealing and several of)7 2627 2 720 5431 t
( optimal solutions need be)4 1300(this book, is motivated by the observation that not all locally)10 3020 2 720 5581 t
( might be desirable to modify a pure local optimization algorithm)10 3180( it)1 100( Thus)1 302(good solutions.)1 738 4 720 5731 t
( us escape local optima and continue the search)8 2315(by providing some mechanism that helps)5 2005 2 720 5881 t
( would simply be to perform repeated runs of a local opti-)11 2858( such mechanism)2 840(further. One)1 622 3 720 6031 t
( starting heuristic to provide different starting)6 2314(mization algorithm, using a randomized)4 2006 2 720 6181 t
( heuristic we use for generating starting tours in our)9 2596( randomized Greedy)2 1001(solutions. The)1 723 3 720 6331 t
( performance)1 643( The)1 253( mind.)1 315(codes for 2-Opt and 3-Opt was chosen with just this thought in)11 3109 4 720 6481 t
( and decreases)2 698(gain from such a random restart approach turns out to be limited, however,)12 3622 2 720 6631 t
(with increasing)1 749 1 720 6781 t
12 I f
(N)1510 6781 w
12 R f
( 2-Opt \(from random-)3 1081( instance, although the best of 100 runs of)8 2101(. For)1 268 3 1590 6781 t
( on a 100-city random geometric instance will typically be better than)11 3405(ized Greedy starts\))2 915 2 720 6931 t
( best of 100 runs of 2-Opt is typi-)8 1674(an average 3-Opt solution, for 1000-city instances the)7 2646 2 720 7081 t
(cally substantially worse than the)4 1604 1 720 7231 t
12 I f
(worst)2354 7231 w
12 R f
(of 100 runs of 3-Opt.)4 1017 1 2652 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 35 35
%%Page: 36 36
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
36 pagesetup
12 R f
(- 36 -)2 260 1 2750 500 t
( that it does)3 586(One reason for the limited effectiveness of the random restart policy is)11 3484 2 970 870 t
( locally optimal solutions might cluster together, that is, for)9 2871(not exploit the possibility that)4 1449 2 720 1020 t
( this were true, it would be)6 1321( If)1 146( better one might well be nearby.)6 1621(any given local optima, a)4 1232 4 720 1170 t
( solution just found, rather than at a randomly cho-)9 2472(better to restart the search close to the)7 1848 2 720 1320 t
( general strategy is always to)5 1412( The)1 250( search does.)2 624( is in essence what tabu)5 1146( This)1 277(sen location.)1 611 6 720 1470 t
( worse, i.e., is an)4 815(make the best move found, even if that move makes the current solution)12 3505 2 720 1620 t
12 I f
(uphill)720 1770 w
12 R f
( at)1 129( assuming that all neighbors of the current solution are examined)10 3230(move. Thus,)1 638 3 1043 1770 t
( a local optimum and, once one has)7 1737(each step, tabu search alternates between looking for)7 2583 2 720 1920 t
( best neighboring solution, which is then used as the starting)10 2994(been found, identifying the)3 1326 2 720 2070 t
( did just this, however, there would be a)8 1962( one)1 209( If)1 146(point for a new local optimization phase.)6 2003 4 720 2220 t
(substantial danger that the best move from this ``best neighboring solution'' would take)12 4320 1 720 2370 t
( we just left or to some other recently visited solution.)10 2638(us right back to the local optimum)6 1682 2 720 2520 t
(This is where the)3 881 1 720 2670 t
12 I f
(tabu)1650 2670 w
12 R f
( about the most recently)4 1236( Information)1 655( comes in.)2 531(in tabu search)2 705 4 1913 2670 t
( kept in one or more)5 1011(made moves is)2 733 2 720 2820 t
12 I f
(tabu lists)1 448 1 2502 2820 t
12 R f
(, and this information is used to disqualify)7 2090 1 2950 2820 t
(new moves that would undo the work of those recent moves.)10 2918 1 720 2970 t
(A full-blown tabu search algorithm also involves several other factors as described)11 4070 1 970 3156 t
( instance, there are)3 939( For)1 240(in Chapter 5.)2 652 3 720 3306 t
12 I f
(aspiration-level)2594 3306 w
12 R f
(conditions, which provide excep-)3 1640 1 3400 3306 t
( typically in situations where there is some guarantee that)9 2835(tions to the general tabu rules,)5 1485 2 720 3456 t
( There)1 339( back to a previously seen solution.)6 1693(the supposedly forbidden move will not take us)7 2288 3 720 3606 t
(are also)1 373 1 720 3756 t
12 I f
(diversification)1126 3756 w
12 R f
(rules, which can provide something like a random restart,)8 2788 1 1856 3756 t
12 I f
(intensi-)4678 3756 w
(fication)720 3906 w
12 R f
( the search to remain in the vicinity of a previously found)11 2839(rules, which constrain)2 1074 2 1127 3906 t
( and a host of other possible modifications, including various schemes for)11 3625(good solution,)1 695 2 720 4056 t
( Glover)1 461( See)1 331(dynamically modifying the underlying neighborhood structure.)5 3528 3 720 4206 t
( Section 4.1, we survey the literature on simple tabu search algo-)11 3257([1986,1989,1990]. In)1 1063 2 720 4356 t
( have not to date been notable for)7 1604( These)1 346( 3-Opt moves.)2 684(rithms for the TSP based on 2- and)7 1686 4 720 4506 t
( is in fact)3 490( most successful application of the underlying principles)7 2815( The)1 260(their successes.)1 755 4 720 4656 t
( and Kernighan [1973], which was invented over a decade)9 2907(the famous algorithm of Lin)4 1413 2 720 4806 t
( uses what)2 504( algorithm)1 500( This)1 275(before Glover first proposed tabu search as a general approach.)9 3041 4 720 4956 t
( complicated scenario than that presented)5 2091(are in effect tabu lists, but in a much more)9 2229 2 720 5106 t
( our testbed)2 639( describe the Lin-Kernighan algorithm and its behavior on)8 3101(above. We)1 580 3 720 5256 t
( postpone to Section 6 the coverage of more complicated)9 2868( We)1 241(instances in Section 4.2.)3 1211 3 720 5406 t
( Lin-Kernighan itself as a subroutine, since)6 2121(tabu search algorithms, such as ones that use)7 2199 2 720 5556 t
(these have much in common with genetic algorithms, the topic of that section.)12 3762 1 720 5706 t
14 B f
( Tabu Search Algorithms for the TSP)6 2239(4.1. Simple)1 692 2 720 6036 t
12 R f
( the tabu search approach, not to mention the latitude)9 2614(Given all the flexibility inherent in)5 1706 2 720 6259 t
( respect to picking neighborhood structures and cost functions for)9 3299(one always has with)3 1021 2 720 6409 t
( variety of tabu search algorithms have)6 1881(particular problems, it is not surprising that a wide)8 2439 2 720 6559 t
( e.g., see Glover [1986], Rossier, Troyon, and Liebling)8 2882(been proposed for the TSP,)4 1438 2 720 6709 t
( [1989], Heap, Kapur, and)4 1398([1986], Troyon [1988], Malek, Guruswamy, and Pandya)6 2922 2 720 6859 t
( and Glover [1989], Glover [1991,1992], Fiechter [1994], and Knox)9 3262(Mourad [1989], Knox)2 1058 2 720 7009 t
( for which we have)4 966( this section we will restrict attention to those algorithms)9 2833([1994]. In)1 521 3 720 7159 t
(seen experimental results reported, thus narrowing the field somewhat.)8 3405 1 720 7309 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 36 36
%%Page: 37 37
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
37 pagesetup
12 R f
(- 37 -)2 260 1 2750 500 t
( the one)2 428(The first tabu search algorithm implemented for the TSP appears to be)11 3642 2 970 870 t
( results for this implementation and variants on it)8 2473( Limited)1 455(described by Glover [1986].)3 1392 3 720 1020 t
( Knox and Glover [1989], Knox [1989,1994], and similar)8 2765(were reported by Glover [1989],)4 1555 2 720 1170 t
( [1989].)1 386(approaches were studied by Troyon [1988] and Malek, Guruswamy, and Pandya)10 3934 2 720 1320 t
( use 2-Opt exchanges as their basic moves, but they differ as to the)13 3327(All these algorithms)2 993 2 720 1470 t
( original)1 423( Glover's)1 498( implementation of aspiration levels.)4 1835(nature of the tabu lists and the)6 1564 4 720 1620 t
( as to which approaches were actually implemented, but they mention)10 3434(papers are unclear)2 886 2 720 1770 t
( suggests adding the shortest of the two)7 1936( instance, Glover [1986])3 1188( For)1 234(several alternatives.)1 962 4 720 1920 t
( subsequent move declared tabu if it tries)7 2016(edges deleted by a move to the tabu list, with a)10 2304 2 720 2070 t
( can then be associated)4 1160( levels)1 327( Aspiration)1 584(to reinsert an edge currently on the tabu list.)8 2249 4 720 2220 t
(with tour lengths, and would work essentially as follows: the aspiration level)11 3739 1 720 2370 t
12 I f
(A)4493 2370 w
12 R f
(\()4576 2370 w
12 I f
(L)4626 2370 w
12 R f
( the)1 182(\) is)1 155 2 4703 2370 t
( has ever been converted to one of length)8 2101(length of the shortest tour that)5 1533 2 720 2520 t
12 I f
(L)4400 2520 w
12 R f
(in a single)2 527 1 4513 2520 t
( yields a tour length less than)6 1476( tabu move can be declared acceptable only if it)9 2390(move. A)1 454 3 720 2670 t
12 I f
(A)720 2820 w
12 R f
(\()803 2820 w
12 I f
(L)853 2820 w
12 R f
(\), where)1 395 1 930 2820 t
12 I f
(L)1358 2820 w
12 R f
( that this implementation of aspiration lev-)6 2067( Note)1 295(is the current tour length.)4 1221 3 1457 2820 t
( [1994])1 356( Knox)1 332( restrictive than would be needed simply to prevent cycling.)9 2932(els is far more)3 700 4 720 2970 t
( con-)1 246(designed his tabu lists and aspiration levels to allow significantly more moves to be)13 4074 2 720 3120 t
( edges deleted)2 694( tabu list consists of pairs of edges, each pair being the set of)13 2997(sidered. The)1 629 3 720 3270 t
( overall tour, this uniquely specifies the 2-)7 2109( that given the)3 721( Note)1 305(in some previous move.)3 1185 4 720 3420 t
( a)1 85(Opt move, although depending on the tour there are two possible 2-Opt moves to which)14 4235 2 720 3570 t
( subsequent move is tabu only if it rein-)8 1944( A)1 150( edges might correspond.)3 1220(given pair of deleted)3 1006 4 720 3720 t
( levels are associated directly)4 1453( Aspiration)1 579( of edges currently on the tabu list.)7 1747(serts a pair)2 541 4 720 3870 t
( is acceptable so long as)5 1178(with the tabu moves and are much more forgiving: A tabu move)11 3142 2 720 4020 t
( a tour that is better than the tour that existed when the corresponding pair of)15 3773(it results in)2 547 2 720 4170 t
( [1988] and)2 601( tabu mechanisms used by Troyon)5 1770( The)1 271(edges was most recently deleted.)4 1678 4 720 4320 t
( the endpoints of the changed edges)6 1744(Malek, Guruswamy, and Pandya [1989] are based on)7 2576 2 720 4470 t
(rather than the edges themselves, but they appear to be similar in flavor.)12 3466 1 720 4620 t
( the above)2 507( For)1 234( which of these various mechanisms is to be preferred.)9 2679(It is not clear)3 650 4 970 4806 t
(algorithms the question is moot, however, as all of them require)10 3084 1 720 4956 t
12 S f
(W)3835 4956 w
12 R f
(\()3937 4956 w
12 I f
(N)3987 4956 w
9 R f
(3)4082 4908 w
12 R f
( time and)2 448(\) running)1 445 2 4147 4956 t
( implementations of)2 1010( The)1 269( instances of significant size.)4 1479(are unlikely to be practical for)5 1562 4 720 5106 t
( Guruswamy, and Pandya [1989], and Knox [1994] each examines)9 3230(Glover [1989], Malek,)2 1090 2 720 5256 t
( at each step \(to find the best one\), for a total time of)13 2551(all possible 2-Opt moves)3 1203 2 720 5406 t
12 S f
(Q)4506 5406 w
12 R f
(\()4605 5406 w
12 I f
(N)4655 5406 w
9 R f
(2)4750 5358 w
12 R f
(\) per)1 225 1 4815 5406 t
(step, and each performs)3 1185 1 720 5556 t
12 S f
(W)1950 5556 w
12 R f
(\()2052 5556 w
12 I f
(N)2102 5556 w
12 R f
( repeated restarts, Knox [1994] actually)5 1971( Counting)1 522(\) steps.)1 355 3 2192 5556 t
(performs)720 5706 w
12 S f
(Q)1186 5706 w
12 R f
(\()1285 5706 w
12 I f
(N)1335 5706 w
9 R f
(4)1430 5658 w
12 R f
( time of)2 381(\) moves, for an overall)4 1099 2 1495 5706 t
12 S f
(Q)3008 5706 w
12 R f
(\()3107 5706 w
12 I f
(N)3157 5706 w
9 R f
(6)3252 5658 w
12 R f
(\), as confirmed by his reported run-)6 1723 1 3317 5706 t
(ning time data.)2 719 1 720 5856 t
( need for at least)4 858( The)1 262( times necessary?)2 873(Are such high running)3 1122 4 970 6042 t
12 S f
(W)4131 6042 w
12 R f
(\()4233 6042 w
12 I f
(N)4283 6042 w
12 R f
(\) steps seems)2 667 1 4373 6042 t
( 2-Opt in Table 5, but must it)7 1537(consistent with the numbers of moves we observed for)8 2783 2 720 6192 t
(really cost)1 498 1 720 6342 t
12 S f
(Q)1248 6342 w
12 R f
(\()1347 6342 w
12 I f
(N)1397 6342 w
9 R f
(2)1492 6294 w
12 R f
( we truly want to find the best neighbor)8 1904( If)1 140(\) to determine the next move?)5 1439 3 1557 6342 t
( our options for reducing this cost are limited, although there are some obvi-)13 3720(at each step,)2 600 2 720 6492 t
( can exploit the fact that many)6 1570( instance, we)2 659( For)1 245(ous improvements that can be made.)5 1846 4 720 6642 t
( move is performed.)3 1013(potential moves do not experience a change in cost when a 2-Opt)11 3307 2 720 6792 t
( viewed as breaking the current tour into two segments,)9 2708(Recall that a 2-Opt move may be)6 1612 2 720 6942 t
( such an alteration, any 2-Opt)5 1426( After)1 314( gluing the tour back together.)5 1454(reversing one, and then)3 1126 4 720 7092 t
( one of the two segments retains its)7 1904(move with both its deleted edges on the same)8 2416 2 720 7242 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 51 536 764
%%EndPage: 37 37
%%Page: 38 38
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
38 pagesetup
12 R f
(- 38 -)2 260 1 2750 500 t
( of moves that need to be re-evaluated is roughly)9 2463( the total number)3 861( Thus)1 314(previous cost.)1 682 4 720 870 t
( will yield at least a fac-)6 1174( This)1 277( two segments.)2 724(bounded by the product of the lengths of the)8 2145 4 720 1020 t
( random Euclidean instances, the improvement)5 2257( For)1 228(tor of 4 improvement in running time.)6 1835 3 720 1170 t
( better, because for such instances the length of the shorter segment has been)13 3963(is even)1 357 2 720 1320 t
(observed to grow as about)4 1332 1 720 1470 t
12 S f
(Q)2100 1470 w
12 R f
(\()2199 1470 w
12 I f
(N)2249 1470 w
9 I f
(.)2344 1422 w
9 R f
(75)2374 1422 w
12 R f
(\) under 2-Opt [Bentley, 1992], [Fredman, Johnson,)6 2556 1 2484 1470 t
( thus only be)3 666( product of the segment lengths will)6 1821( The)1 261(McGeoch, & Ostheimer, 1995].)3 1572 4 720 1620 t
12 S f
(Q)720 1770 w
12 R f
(\()819 1770 w
12 I f
(N)869 1770 w
9 R f
(1. 75)1 165 1 964 1722 t
12 R f
(\), and the overall running time will thus be reduced by a factor of)13 3137 1 1149 1770 t
12 S f
(Q)4316 1770 w
12 R f
(\()4415 1770 w
12 I f
(N)4465 1770 w
9 I f
(.)4560 1722 w
9 R f
(25)4590 1722 w
12 R f
(\).)4700 1770 w
( implementations of 2- and 3-Opt, which)6 1972(This unfortunately still leaves us far behind)6 2098 2 970 1956 t
( can be)2 341(can substantially truncate the search space by exploiting the fact that uphill moves)12 3979 2 720 2106 t
( is still possible, how-)4 1059( of that savings)3 732( Some)1 334(ignored \(a luxury not allowed in tabu search\).)7 2195 4 720 2256 t
(ever, if we take a hybrid approach: Proceed as in 2-Opt until one reaches a locally opti-)16 4320 1 720 2406 t
( the aspiration cri-)3 882(mal solution \(with respect to non-tabu moves and tabu moves that meet)11 3438 2 720 2556 t
(teria\), and only then spend)4 1290 1 720 2706 t
12 S f
(Q)2043 2706 w
12 R f
(\()2142 2706 w
12 I f
(N)2192 2706 w
9 R f
(2)2287 2658 w
12 R f
( obtain full advantage)3 1051( To)1 195( the best uphill move.)4 1048(\) to find)2 394 4 2352 2706 t
(from this approach, one would use the truncated neighbor lists and don't-look bits of our)14 4320 1 720 2856 t
( the possi-)2 515(neighbor-list implementation during the local optimization phase, settling for)8 3805 2 720 3006 t
( [1988])1 354( Troyon)1 417(bility that the best possible improving move will occasionally be missed.)10 3549 3 720 3156 t
(takes the more radical approach of simply taking the)8 2532 1 720 3306 t
12 I f
(first)3283 3306 w
12 R f
(\(rather than the best\) improving)4 1530 1 3510 3306 t
( that is either not tabu or else yields an improvement over the best tour previ-)15 3742(move found)1 578 2 720 3456 t
( no improving moves are seen among the first)8 2228( If)1 143(ously seen.)1 537 3 720 3606 t
12 I f
(cN)3661 3606 w
12 R f
(examined \(for some con-)3 1213 1 3827 3606 t
(stant)720 3756 w
12 I f
(c)985 3756 w
12 R f
(, typically 1)2 586 1 1038 3756 t
12 I f
(/)1634 3756 w
12 R f
( or 2\), then the best non-tabu uphill move seen so far is chosen.)13 3145(2, 1,)1 217 2 1678 3756 t
( time per move from)4 1029(This reduces the)2 809 2 720 3906 t
12 S f
(Q)2598 3906 w
12 R f
(\()2697 3906 w
12 I f
(N)2747 3906 w
9 R f
(2)2842 3858 w
12 R f
(\) to)1 174 1 2907 3906 t
12 S f
(Q)3121 3906 w
12 R f
(\()3220 3906 w
12 I f
(N)3270 3906 w
12 R f
(\), although the savings is counter-)5 1680 1 3360 3906 t
(balanced by the fact that Troyon performs)6 2057 1 720 4056 t
12 S f
(Q)2813 4056 w
12 R f
(\()2912 4056 w
12 I f
(N)2962 4056 w
9 R f
(2)3057 4008 w
12 R f
( yielding a)2 522(\) steps,)1 347 2 3122 4056 t
12 S f
(Q)4028 4056 w
12 R f
(\()4127 4056 w
12 I f
(N)4177 4056 w
9 R f
(3)4272 4008 w
12 R f
(\) running time)2 703 1 4337 4056 t
( he was able to run his implementation on instances with as many)12 3201( Nevertheless,)1 714(after all.)1 405 3 720 4206 t
( run-)1 237( \(His)1 274(as 1000 cities on a machine roughly 15 times slower than our SGI Challenge.)13 3809 3 720 4356 t
( some 12,000 times slower than we)6 1776(ning time for the 1000-city instance, however, was)7 2544 2 720 4506 t
(report for neighbor-list 3-Opt in Table 6, 4 hours versus 1.14 seconds.\))11 3404 1 720 4656 t
( to)1 140(We thus can conclude that straightforward tabu search implementations cannot)9 3930 2 970 4842 t
( about tour qual-)3 828( What)1 330( in terms of running time.)5 1281(date compete with neighbor-list 3-Opt)4 1881 4 720 4992 t
( [1989], Malek, Guruswamy, and Pandya)5 2074( Glover)1 412( bit difficult to say.)4 997( it is a)3 346(ity? Here)1 491 5 720 5142 t
([1989], and Knox [1994] restrict themselves to instances of 110 cities or less \(quite natu-)14 4320 1 720 5292 t
( the instances they test are sufficiently)6 1874( Moreover,)1 569( the running times involved\).)4 1418(ral, given)1 459 4 720 5442 t
( is found, not how)4 895(easy that the key question seems to be how often the optimal solution)12 3425 2 720 5592 t
( [1994] is the only author to have under-)8 2022( Knox)1 335(close to optimal the average solution is.)6 1963 3 720 5742 t
( reports)1 376( He)1 211( is a comparison in the former terms.)7 1855(taken a comparison with 3-Opt, but it)6 1878 4 720 5892 t
( much time to 3-Opt as to his)7 1429(that even when he devoted as)5 1424 2 720 6042 t
12 S f
(Q)3607 6042 w
12 R f
(\()3706 6042 w
12 I f
(N)3756 6042 w
9 R f
(6)3851 5994 w
12 R f
(\) tabu search algorithm)3 1124 1 3916 6042 t
( starts\), tabu search had a higher)6 1671(\(by performing multiple runs of 3-Opt from random)7 2649 2 720 6192 t
( tests only covered instances of up)6 1673( The)1 250( did 3-Opt.)2 532(probability of finding the optimal than)5 1865 4 720 6342 t
( appears to be a very inefficient implementation)7 2336(to 75 cities, however, and involved what)6 1984 2 720 6492 t
(of 3-Opt, so the implications of these results are unclear.)9 2722 1 720 6642 t
( instances large enough)3 1136(Among the above researchers, only Troyon [1988] considers)7 2934 2 970 6828 t
( key question of closeness to optimality \(rather than optimality itself\) to be rele-)13 3979(for our)1 341 2 720 6978 t
( considers the instances of size 442 and 532 from)9 2420( particular, he)2 674(vant. In)1 402 3 720 7128 t
12 C f
(TSPLIB)4252 7128 w
12 R f
(, plus a)2 356 1 4684 7128 t
( For)1 234( are not promising.)3 930( the results)2 538( Unfortunately,)1 772(1000-city random Euclidean instance.)3 1846 5 720 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 38 38
%%Page: 39 39
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
39 pagesetup
12 R f
(- 39 -)2 260 1 2750 500 t
( instances, the average tour lengths he reports are substantially worse than)11 3712(the first two)2 608 2 720 870 t
( instance \(although they are at least better than)8 2277(what neighbor-list 3-Opt averages for this)5 2043 2 720 1020 t
( more difficult for the 1000-city)5 1614( are)1 191( Comparisons)1 710(the average for neighbor-list 2-Opt\).)4 1805 4 720 1170 t
( tour length reported is however worse)6 1932( The)1 259( it.)1 141(instance since we do not have access to)7 1988 4 720 1320 t
( of the six 1000-city random)5 1456(than the average tour lengths obtained by 2-Opt for each)9 2864 2 720 1470 t
( that this implementation of tabu search)6 2014(Euclidean instances in our testbed, suggesting)5 2306 2 720 1620 t
(degrades substantially as)2 1196 1 720 1770 t
12 I f
(N)1946 1770 w
12 R f
(increases.)2056 1770 w
( those)1 309(Thus it would seem that straightforward tabu search implementations like)9 3761 2 970 1956 t
(above are unlikely to be competitive with 3-Opt, either in terms of speed or tour quality.)15 4320 1 720 2106 t
( Kapur, and Mourad)3 993( Heap,)1 349( to use parallelism.)3 931(One idea for addressing the speed issue is)7 2047 4 720 2256 t
( scheme like the one discussed in Section)7 2057([1989] propose using a geometric partitioning)5 2263 2 720 2406 t
( with)1 254( Here)1 302(3.4, with tabu search applied to the subproblems.)7 2427 3 720 2556 t
12 I f
(k)3744 2556 w
12 R f
(processors one can hope)3 1202 1 3838 2556 t
(for a speedup up by a factor of)7 1546 1 720 2706 t
12 I f
(k)2307 2706 w
9 R f
(3)2375 2658 w
12 R f
( that the basic tabu search algorithm takes)7 2084(, assuming)1 526 2 2430 2706 t
(time)720 2856 w
12 S f
(W)991 2856 w
12 R f
(\()1093 2856 w
12 I f
(N)1143 2856 w
9 R f
(3)1238 2808 w
12 R f
( from)1 291( for the 532-city instance)4 1306(\). Unfortunately,)1 860 3 1303 2856 t
12 C f
(TSPLIB)3817 2856 w
12 R f
(on which they)2 734 1 4306 2856 t
(tested the approach, values of)4 1436 1 720 3006 t
12 I f
(k)2189 3006 w
12 R f
(greater than 8 appear to reduce tour quality below that of)10 2765 1 2275 3006 t
( the speedup obtainable by taking)5 1662(neighbor-list 2-Opt, and)2 1177 2 720 3156 t
12 I f
(k)3599 3156 w
12 S f
(\243)3692 3156 w
12 R f
(8 is not nearly enough to)5 1242 1 3798 3156 t
( a machine whose processors are)5 1719( On)1 236( 3-Opt.)1 370(reduce the running time below that of)6 1995 4 720 3306 t
( slower than those on our SGI Challenge, their best parallel running)11 3416(roughly 150 times)2 904 2 720 3456 t
( times slower than the average time for neighbor-list 3-Opt, and the tour)12 3547(time is still 750)3 773 2 720 3606 t
(they produce is significantly worse than an average 3-Opt tour.)9 3029 1 720 3756 t
( exploited in the much more sophisticated tabu search algorithm)9 3174(Parallelism is also)2 896 2 970 3942 t
( incorporates its tabu search ideas at a much higher)9 2561( algorithm)1 512( This)1 287(of [Fiechter, 1994].)2 960 4 720 4092 t
( structure to the genetic algo-)5 1451(level than the basic 2-Opt move, however, and is closer in)10 2869 2 720 4242 t
( the)1 199( In)1 182( until then.)2 563( shall consequently postpone its coverage)5 2108( We)1 249(rithms of Section 6.)3 1019 6 720 4392 t
( whose inner)2 639(remainder of this section we discuss the famous Lin-Kernighan algorithm,)9 3681 2 720 4542 t
( tabu search over the 2-Opt neighborhood structure,)7 2579(loop can be viewed as a variant of)7 1741 2 720 4692 t
( neighbor-list)1 654(designed to fully exploit the techniques for search space truncation used in)11 3666 2 720 4842 t
( inner loop in turn is embedded in an overall procedure that can be)13 3362( This)1 287(2- and 3-Opt.)2 671 3 720 4992 t
( the tabu search idea of)5 1155(viewed as embodying)2 1063 2 720 5142 t
12 I f
(intensification)2977 5142 w
12 R f
( result is an algorithm)4 1087(. The)1 285 2 3668 5142 t
( with only a modest increase)5 1402(that in practice yields significantly better results than 3-Opt)8 2918 2 720 5292 t
(in running time.)2 773 1 720 5442 t
14 B f
( Lin-Kernighan Algorithm)2 1594(4.2. The)1 514 2 720 5772 t
12 R f
( about 1989, the world champion heuristic for)7 2238(For over a decade and a half, from 1973 to)9 2082 2 720 5995 t
( search algorithm of Lin and Kernighan)6 1931(the TSP was generally recognized to be the local)8 2389 2 720 6145 t
( algorithm is both a generalization of 3-Opt and an outgrowth of ideas the)13 3685([1973]. This)1 635 2 720 6295 t
( had previously applied to the graph partitioning problem in Kernighan and)11 3682(same authors)1 638 2 720 6445 t
(Lin [1970], ideas that have much in common with tabu search.)10 3010 1 720 6595 t
( this section we will)4 1003( In)1 169(Both algorithms are described at a high level in Chapter 2.)10 2898 3 970 6781 t
( base our description on the)5 1335( We)1 228(give a more complete description of the one for the TSP.)10 2757 3 720 6931 t
(implementation of Johnson, Bentley, McGeoch, and Rothberg [1996], which we shall for)11 4320 1 720 7081 t
( implementation in what)3 1249(the sake of brevity refer to simply as the ``Johnson et al.'')11 3071 2 720 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 39 39
%%Page: 40 40
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
40 pagesetup
12 R f
(- 40 -)2 260 1 2750 500 t
( derived from the original one of Lin and Kernighan,)9 2625( implementation was)2 1021(follows. This)1 674 3 720 870 t
( structures and new ideas such as the don't-look bits)9 2525(but it incorporates more modern data)5 1795 2 720 1020 t
( then)1 258( We)1 247( 2- and 3-Opt described above.)5 1584(used in the neighbor-list implementations of)5 2231 4 720 1170 t
( performance results obtained by Johnson, Bentley, McGeoch, and)8 3198(summarize some of the)3 1122 2 720 1320 t
( algorithm's)1 596( of the complexity of the)5 1231( Because)1 468(Rothberg [1996] for this implementation.)4 2025 4 720 1470 t
(description, and perhaps because Lin and Kernighan [1973] did not directly apply it to)13 4320 1 720 1620 t
( have apparently been under)4 1392(any instances with more than 106 cities, many practitioners)8 2928 2 720 1770 t
( instances much)2 798(the impression that the Lin-Kernighan algorithm is too slow to handle)10 3522 2 720 1920 t
( we shall see, however, its modern incarnation needs less than 50)11 3324( As)1 210(larger than this.)2 786 3 720 2070 t
(minutes on a modern machine to handle a)7 2006 1 720 2220 t
12 I f
(million)2756 2220 w
12 R f
(-city instance.)1 675 1 3098 2220 t
( the Lin-Kernighan algorithm seems to have spread far wider)9 2968(In general, the fame of)4 1102 2 970 2406 t
( the literature about the behavior of)6 1774(than knowledge of its details, and not all claims in)9 2546 2 720 2556 t
( authors rely on implementations)4 1613( Many)1 347( value.)1 327(``Lin-Kernighan'' should be taken at face)5 2033 4 720 2706 t
( tours that are worse on)5 1144(that omit key components of the algorithm and end up producing)10 3176 2 720 2856 t
( authors seem to think that ``Lin-)6 1861( Other)1 378( by 3-Opt.)2 580(average than those produced)3 1501 4 720 3006 t
( description that follows,)3 1290( The)1 277(Kernighan'' is a synonym for 3-Opt, or even 2-Opt!)8 2753 3 720 3156 t
( enable readers to spot)4 1106(although not fully detailed, should provide enough information to)8 3214 2 720 3306 t
( begin our description of Lin-Kernighan with the)7 2388( We)1 232(such spurious claims on their own.)5 1700 3 720 3456 t
(inner loop, which we shall call an)6 1618 1 720 3606 t
12 I f
(LK search)1 497 1 2368 3606 t
12 R f
(.)2865 3606 w
14 I f
(The Lin-Kernighan Inner Loop)3 1739 1 720 3936 t
12 R f
(As in the tabu search algorithms described above, an LK search is based on 2-Opt moves,)15 4320 1 720 4159 t
( several levels of restriction,)4 1380( are)1 182( There)1 345(although a significantly restricted subset of them.)6 2413 4 720 4309 t
( it is conve-)3 568( understand the other criteria,)4 1412( To)1 193(with a tabu criterion being only one of them.)8 2147 4 720 4459 t
(nient to view the current solution as an anchored Hamiltonian path)10 3375 1 720 4609 t
12 I f
(P)4142 4609 w
12 R f
(rather than as a)3 778 1 4262 4609 t
( The)1 254(Hamiltonian circuit.)1 978 2 720 4759 t
12 I f
(anchor)1990 4759 w
12 R f
( endpoint city)2 680(of the path is a fixed)5 1025 2 2368 4759 t
12 I f
(t)4112 4759 w
9 R f
(1)4161 4783 w
12 R f
(, as illustrated in)3 824 1 4216 4759 t
( Let)1 226(Figure 3\(a\).)1 573 2 720 4909 t
12 I f
(t)1555 4909 w
9 R f
(2)1604 4933 w
9 I f
(i)1656 4933 w
12 R f
(denote the other endpoint of the path)6 1805 1 1727 4909 t
12 I f
(P)3568 4909 w
9 I f
(i)3656 4933 w
12 R f
( the beginning)2 698(that exists at)2 615 2 3727 4909 t
(of step)1 335 1 720 5059 t
12 I f
(i)1096 5059 w
12 R f
( tour corresponding to path)4 1350( The)1 258( search.)1 378(of the LK)2 488 4 1171 5059 t
12 I f
(P)3687 5059 w
9 I f
(i)3775 5083 w
12 R f
(can then be obtained by)4 1188 1 3852 5059 t
(adding the edge {)3 848 1 720 5209 t
12 I f
(t)1568 5209 w
9 R f
(2)1617 5233 w
9 I f
(i)1669 5233 w
12 R f
(,)1714 5209 w
12 I f
(t)1754 5209 w
9 R f
(1)1803 5233 w
12 R f
(}.)1858 5209 w
( that flip some suffix of the path, i.e.)8 1875(At each step we only consider 2-Opt moves)7 2195 2 970 5395 t
( one of the tour edges being broken is {)9 2076(ones in which)2 709 2 720 5545 t
12 I f
(t)3505 5545 w
9 R f
(1)3554 5569 w
12 R f
(,)3619 5545 w
12 I f
(t)3659 5545 w
9 R f
(2)3708 5569 w
9 I f
(i)3760 5569 w
12 R f
( the new)2 446(}. Furthermore,)1 799 2 3795 5545 t
(neighbor)720 5695 w
12 I f
(t)1179 5695 w
9 R f
(2)1228 5719 w
9 I f
(i)1280 5719 w
9 S f
(+)1327 5719 w
9 R f
(1)1392 5719 w
12 R f
(of)1479 5695 w
12 I f
(t)1611 5695 w
9 R f
(2)1660 5719 w
9 I f
(i)1712 5719 w
12 R f
(must be such that the length of the)7 1668 1 1779 5695 t
12 I f
(one-tree)3480 5695 w
12 R f
(\(spanning tree plus one)3 1127 1 3913 5695 t
( {)1 97(edge\) obtained by adding the edge)5 1700 2 720 5845 t
12 I f
(t)2517 5845 w
9 R f
(2)2566 5869 w
9 I f
(i)2618 5869 w
12 R f
(,)2663 5845 w
12 I f
(t)2703 5845 w
9 R f
(2)2752 5869 w
9 I f
(i)2804 5869 w
9 S f
(+)2851 5869 w
9 R f
(1)2916 5869 w
12 R f
(} to)1 191 1 2971 5845 t
12 I f
(P)3201 5845 w
9 I f
(i)3289 5869 w
12 R f
(\(as in Figure 3\(b\)\) is less than the)7 1677 1 3363 5845 t
( restriction is a generalization of the criterion in)8 2357( This)1 282( seen so far.)3 597(length of the best tour)4 1084 4 720 5995 t
(2-Opt that)1 494 1 720 6145 t
12 I f
(d)1247 6145 w
12 R f
(\()1317 6145 w
12 I f
(t)1367 6145 w
9 R f
(2)1416 6169 w
12 R f
(,)1481 6145 w
12 I f
(t)1521 6145 w
9 R f
(3)1570 6169 w
12 R f
(\) be less than)3 640 1 1635 6145 t
12 I f
(d)2308 6145 w
12 R f
(\()2378 6145 w
12 I f
(t)2428 6145 w
9 R f
(1)2477 6169 w
12 R f
(,)2542 6145 w
12 I f
(t)2582 6145 w
9 R f
(2)2631 6169 w
12 R f
( be imple-)2 492( general one-tree restriction can)4 1533(\). The)1 319 3 2696 6145 t
( neighbor lists in much the same way as was the corresponding restriction)12 3666(mented using)1 654 2 720 6295 t
(for 2-Opt, since all qualifying candidates for)6 2152 1 720 6445 t
12 I f
(t)2904 6445 w
9 R f
(2)2953 6469 w
9 I f
(i)3005 6469 w
9 S f
(+)3052 6469 w
9 R f
(1)3117 6469 w
12 R f
( of the neighbor list)4 947(will be at the head)4 889 2 3204 6445 t
(for)720 6595 w
12 I f
(t)897 6595 w
9 R f
(2)946 6619 w
9 I f
(i)998 6619 w
12 R f
( neighbor-lists of)2 839( in the neighbor-list implementations of 2- and 3-Opt, using)9 2938(. As)1 230 3 1033 6595 t
(length)720 6745 w
12 I f
(k)1056 6745 w
12 R f
(imposes the additional constraint that only the)6 2251 1 1144 6745 t
12 I f
(k)3430 6745 w
12 R f
( to)1 128(nearest cities)1 630 2 3518 6745 t
12 I f
(t)4310 6745 w
9 R f
(2)4359 6769 w
9 I f
(i)4411 6769 w
12 R f
(can be con-)2 560 1 4480 6745 t
(sidered as candidates for)3 1184 1 720 6895 t
12 I f
(t)1934 6895 w
9 R f
(2)1983 6919 w
9 I f
(i)2035 6919 w
9 S f
(+)2082 6919 w
9 R f
(1)2147 6919 w
12 R f
( would satisfy the one-tree restric-)5 1651(, even if additional cities)4 1187 2 2202 6895 t
(tion.)720 7045 w
( [1973] propose maintaining two lists,)5 1867(As far as tabu conditions, Lin and Kernighan)7 2203 2 970 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 40 40
%%Page: 41 41
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
41 pagesetup
12 R f
(- 41 -)2 260 1 2750 500 t
cleartomark
saveobj restore
end
%%BeginDocument: Fig3.ps
%ps_include: begin
save
/ed {exch def} def
{} /showpage ed
{} /copypage ed
{} /erasepage ed
{} /letter ed
currentdict /findfont known systemdict /findfont known and {
	/findfont systemdict /findfont get def
} if
36 dict dup /PS-include-dict-dw ed begin
/context ed
count array astore /o-stack ed
%ps_include: variables begin
/llx 35 def
/lly 402 def
/urx 501 def
/ury 733 def
/w 0 def
/o 0 def
/s 0 def
/cx 2880 def
/cy -2460 def
/sx 4320 def
/sy 2880 def
/ax 0.5 def
/ay 0.5 def
/rot 0 def
%ps_include: variables end
{llx lly urx ury} /bbox ed
{newpath 2 index exch 2 index exch dup 6 index exch
 moveto 3 {lineto} repeat closepath} /boxpath ed
{dup mul exch dup mul add sqrt} /len ed
{2 copy gt {exch} if pop} /min ed
{2 copy lt {exch} if pop} /max ed
{transform round exch round exch A itransform} /nice ed
{6 array} /n ed
n defaultmatrix n currentmatrix n invertmatrix n concatmatrix /A ed
urx llx sub 0 A dtransform len /Sx ed
0 ury lly sub A dtransform len /Sy ed
llx urx add 2 div lly ury add 2 div A transform /Cy ed /Cx ed
rot dup sin abs /S ed cos abs /C ed
Sx S mul Sy C mul add /H ed
Sx C mul Sy S mul add /W ed
sy H div /Scaley ed
sx W div /Scalex ed
s 0 eq {Scalex Scaley min dup /Scalex ed /Scaley ed} if
sx Scalex W mul sub 0 max ax 0.5 sub mul cx add /cx ed
sy Scaley H mul sub 0 max ay 0.5 sub mul cy add /cy ed
urx llx sub 0 A dtransform exch atan rot exch sub /rot ed
n currentmatrix initgraphics setmatrix
cx cy translate
Scalex Scaley scale
rot rotate
Cx neg Cy neg translate
A concat
bbox boxpath clip newpath
w 0 ne {gsave bbox boxpath 1 setgray fill grestore} if
end
gsave
%ps_include: inclusion begin
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def

/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 59.646 35.673 0.000 0.000 26.000 26.625 rect
gsave
48.986 72.646 T translate
0.0 rotate
1 1 scale
24.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -12.826 6.000 S
(a) -4.839 6.000 S
(\)) 5.812 6.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 202.734 35.000 0.000 0.000 26.000 27.972 rect
gsave
48.986 215.734 T translate
0.0 rotate
1 1 scale
24.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -13.500 6.000 S
(b) -5.513 6.000 S
(\)) 6.486 6.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 347.530 35.673 0.000 0.000 26.000 26.625 rect
gsave
48.986 360.530 T translate
0.0 rotate
1 1 scale
24.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -12.826 6.000 S
(c) -4.839 6.000 S
(\)) 5.812 6.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 69.897 308.399 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 69.897 326.399 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 69.897 344.399 0.000 0.000 4.500 4.500 rect
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 75.796 483.649 0.000 0.000 25.000 16.610 rect
gsave
491.954 88.296 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -7.150 5.000 S
grestore
restore
save
gsave
491.954 88.296 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) -2.149 9.000 S
grestore
restore
save
gsave
491.954 88.296 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

12.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) 3.850 9.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 220.607 253.859 0.000 0.000 25.000 27.802 rect
gsave
267.761 233.107 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -12.940 5.000 S
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 220.607 253.859 0.000 0.000 25.000 27.802 rect
gsave
267.761 233.107 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) -7.939 9.000 S
grestore
restore
save
gsave
267.761 233.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

12.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -1.939 9.000 S
grestore
restore
save
gsave
267.761 233.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(+) 1.394 9.000 S
(1) 8.162 9.000 S
grestore
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 134.541 369.396 0.000 0.000 25.000 13.598 rect
gsave
376.195 147.041 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 213.750 204.750 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 213.750 222.750 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 213.750 240.750 0.000 0.000 4.500 4.500 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 220.607 483.649 0.000 0.000 25.000 16.610 rect
gsave
491.954 233.107 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -7.150 5.000 S
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 220.607 483.649 0.000 0.000 25.000 16.610 rect
gsave
491.954 233.107 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) -2.149 9.000 S
grestore
restore
save
gsave
491.954 233.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

12.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) 3.850 9.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 211.500 265.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 211.500 301.500 0.000 0.000 9.000 9.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 220.607 94.023 0.000 0.000 25.000 11.701 rect
gsave
99.873 233.107 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -4.776 5.000 S
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 220.607 94.023 0.000 0.000 25.000 11.701 rect
gsave
99.873 233.107 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(1) 0.224 9.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 211.500 94.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 211.500 130.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 211.500 166.500 0.000 0.000 9.000 9.000 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 198.000 216.000 99.000 216.000 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 211.500 337.500 0.000 0.000 9.000 9.000 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 369.000 216.000 252.000 216.000 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 211.500 445.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 211.500 481.500 0.000 0.000 9.000 9.000 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 486.000 216.000 423.000 216.000 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 213.750 375.750 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 213.750 393.750 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 213.750 411.750 0.000 0.000 4.500 4.500 rect
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 220.607 299.941 0.000 0.000 25.000 27.802 rect
gsave
313.842 233.107 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -12.858 5.000 S
grestore
restore
save
gsave
313.842 233.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) -7.857 9.000 S
grestore
restore
save
gsave
313.842 233.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

12.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -1.857 9.000 S
grestore
restore
save
gsave
313.842 233.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(+) 1.476 9.000 S
(2) 8.244 9.000 S
grestore
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 191.577 275.287 0.000 0.000 25.000 26.120 rect
gsave
288.347 204.077 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

grestore
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 158.913 269.847 0.000 0.000 57.245 216.890
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[216.213 57.245] CP
[216.213 43.205 216.890 35.268 216.213 21.245] CP
[215.352 3.429 132.242 0.000 107.672 0.000] CP
[83.102 0.000 0.532 0.184 0.213 21.245] CP
[0.000 35.283 0.213 43.205 0.213 57.245] CP
/useClip true def
PC PF
LC SS
saveobj restore
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 364.607 253.859 0.000 0.000 25.000 27.802 rect
gsave
267.761 377.107 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -12.940 5.000 S
grestore
restore
save
gsave
267.761 377.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) -7.939 9.000 S
grestore
restore
save
gsave
267.761 377.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

12.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -1.939 9.000 S
grestore
restore
save
gsave
267.761 377.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(+) 1.394 9.000 S
(1) 8.162 9.000 S
grestore
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 277.541 369.396 0.000 0.000 25.000 13.598 rect
gsave
376.195 290.041 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 364.607 483.649 0.000 0.000 25.000 16.610 rect
gsave
491.954 377.107 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -7.150 5.000 S
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 364.607 483.649 0.000 0.000 25.000 16.610 rect
gsave
491.954 377.107 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) -2.149 9.000 S
grestore
restore
save
gsave
491.954 377.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

12.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) 3.850 9.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 355.500 265.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 355.500 301.500 0.000 0.000 9.000 9.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 364.607 94.023 0.000 0.000 25.000 11.701 rect
gsave
99.873 377.107 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -4.776 5.000 S
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 364.607 94.023 0.000 0.000 25.000 11.701 rect
gsave
99.873 377.107 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(1) 0.224 9.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 355.500 94.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 355.500 130.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 355.500 166.500 0.000 0.000 9.000 9.000 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 198.000 360.000 99.000 360.000 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 355.500 337.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 355.500 445.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 355.500 481.500 0.000 0.000 9.000 9.000 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 486.000 360.000 423.000 360.000 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 357.750 375.750 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 357.750 393.750 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 357.750 411.750 0.000 0.000 4.500 4.500 rect
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 364.607 299.941 0.000 0.000 25.000 27.802 rect
gsave
313.842 377.107 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -12.858 5.000 S
grestore
restore
save
gsave
313.842 377.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) -7.857 9.000 S
grestore
restore
save
gsave
313.842 377.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

12.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -1.857 9.000 S
grestore
restore
save
gsave
313.842 377.107 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(+) 1.476 9.000 S
(2) 8.244 9.000 S
grestore
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {} def
/PC {} def
1.000 0 302.913 269.847 0.000 0.000 57.245 216.890
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[216.213 57.245] CP
[216.213 43.205 216.890 35.268 216.213 21.245] CP
[215.352 3.429 132.242 0.000 107.672 0.000] CP
[83.102 0.000 0.532 0.184 0.213 21.245] CP
[0.000 35.283 0.213 43.205 0.213 57.245] CP
/useClip true def
PC PF
LC SS
saveobj restore
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 270.000 360.000 252.000 360.000 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 369.000 360.000 306.000 360.000 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 445.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 481.500 0.000 0.000 9.000 9.000 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 486.000 72.000 360.000 72.000 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 373.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 409.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 357.750 204.750 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 357.750 222.750 0.000 0.000 4.500 4.500 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 357.750 240.750 0.000 0.000 4.500 4.500 rect
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 74.820 94.023 0.000 0.000 25.000 11.701 rect
gsave
99.873 87.320 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(t) -4.776 5.000 S
grestore
restore
save
gsave
99.873 87.320 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(1) 0.224 9.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 94.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 130.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 166.500 0.000 0.000 9.000 9.000 rect
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 297.000 72.000 99.000 72.000 Line
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 238.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 202.500 0.000 0.000 9.000 9.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
0.250 0 67.500 274.500 0.000 0.000 9.000 9.000 rect
restore
end
%ps_include: inclusion end
grestore
PS-include-dict-dw begin
o 0 ne {gsave A defaultmatrix /A ed llx lly nice urx ury nice
	initgraphics 0.1 setlinewidth boxpath stroke grestore} if
clear o-stack aload pop
context end restore
%ps_include: end
%%EndDocument
DpostDict begin
/saveobj save def
mark
11 B f
(Figure 3.)1 426 1 970 4066 t
11 R f
(LK search: \(a\) Path)3 867 1 1456 4066 t
11 I f
(P)2355 4066 w
8 I f
(i)2435 4088 w
11 R f
( determined by the)3 836(, \(b\) One-tree)2 600 2 2466 4066 t
11 I f
(i)3935 4066 w
11 R f
(-th move, required)2 824 1 3966 4066 t
(to be shorter than best tour seen so far, \(c\) Path)10 2072 1 970 4196 t
11 I f
(P)3070 4196 w
8 I f
(i)3150 4218 w
8 S f
(+)3191 4218 w
8 R f
(1)3248 4218 w
11 R f
(.)3297 4196 w
12 R f
(one of)1 323 1 720 4473 t
12 I f
(added)1093 4473 w
12 R f
( play the role of {)5 954(edges \(those that)2 848 2 1436 4473 t
12 I f
(t)3238 4473 w
9 R f
(2)3287 4497 w
9 I f
(i)3339 4497 w
12 R f
(,)3384 4473 w
12 I f
(t)3424 4473 w
9 R f
(2)3473 4497 w
9 I f
(i)3525 4497 w
9 S f
(+)3572 4497 w
9 R f
(1)3637 4497 w
12 R f
(} in Figure 3\), and one of)6 1348 1 3692 4473 t
12 I f
(deleted)720 4623 w
12 R f
( role of {)3 462(edges \(those that play the)4 1262 2 1107 4623 t
12 I f
(t)2831 4623 w
9 R f
(2)2880 4647 w
9 I f
(i)2932 4647 w
9 S f
(+)2979 4647 w
9 R f
(1)3044 4647 w
12 R f
(,)3109 4623 w
12 I f
(t)3149 4623 w
9 R f
(2)3198 4647 w
9 I f
(i)3250 4647 w
9 S f
(+)3297 4647 w
9 R f
(2)3362 4647 w
12 R f
( move is tabu if it attempts)6 1340(}\). A)1 283 2 3417 4623 t
(either to add an edge on the)6 1369 1 720 4773 t
12 I f
(deleted)2126 4773 w
12 R f
(tabu list or to delete an edge on the)8 1739 1 2510 4773 t
12 I f
(added)4286 4773 w
12 R f
(tabu list.)1 424 1 4616 4773 t
( there is no bound on the length of the tabu list and)12 2469(Unlike standard tabu search, however,)4 1851 2 720 4923 t
( there is no escape from tabu-hood: once a particular)9 2660( Thus)1 315( of aspiration levels.)3 1021(no use)1 324 4 720 5073 t
( This)1 276( no longer be deleted \(added\).)5 1443(edge has been added to \(deleted from\) the path, it can)10 2601 3 720 5223 t
(in particular implies that at most)5 1569 1 720 5373 t
12 I f
(N)2320 5373 w
12 R f
( \(An)1 248( halt.)1 243(moves can be made before the process must)7 2118 3 2431 5373 t
( current path)2 625(LK search terminates when there are no qualifying non-tabu moves for the)11 3695 2 720 5523 t
12 I f
(P)720 5673 w
9 I f
(i)808 5697 w
12 R f
(.\))843 5673 w
( implementation omits the)3 1272(The Johnson et al.)3 880 2 970 5859 t
12 I f
(deleted)3155 5859 w
12 R f
(tabu list, and so a move is tabu)7 1505 1 3535 5859 t
( is still)2 334( This)1 279(in this implementation only if it attempts to delete a previously added edge.)12 3707 3 720 6009 t
(enough to insure that at most)5 1394 1 720 6159 t
12 I f
(N)2144 6159 w
12 R f
( wider range of moves to)5 1202(moves can be made, but allows a)6 1584 2 2254 6159 t
( analyzes the alternative variant in which the)7 2160( [1992])1 353( \(Papadimitriou)1 786(be considered.)1 696 4 720 6309 t
12 I f
(added)4747 6309 w
12 R f
(tabu list is omitted, so that the only restriction is that we cannot add a previously deleted)16 4320 1 720 6459 t
( variant, which to the best of our knowledge has not been implemented, could)13 3786(edge. This)1 534 2 720 6609 t
(conceivably make)1 876 1 720 6759 t
12 I f
(N)1632 6759 w
12 R f
(\()1722 6759 w
12 I f
(N)1772 6759 w
12 S f
(-)1882 6759 w
12 R f
(1 \))1 110 1 1968 6759 t
12 I f
(/)2088 6759 w
12 R f
( has the additional disadvantage of being PLS-)7 2289(2 moves and)2 619 2 2132 6759 t
( has not yet been proven for the original algo-)9 2289(complete \(see Chapter 2\), a property that)6 2031 2 720 6909 t
(rithm or the Johnson et al. variant.\))6 1691 1 720 7059 t
( which of the qualifying,)4 1209(To complete our description of an LK search, we must say)10 2861 2 970 7245 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 51 536 764
%%EndPage: 41 41
%%Page: 42 42
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
42 pagesetup
12 R f
(- 42 -)2 260 1 2750 500 t
( for each such move, we check to see if the resulting)11 2635( First,)1 323(non-tabu moves is selected.)3 1362 3 720 870 t
( previously seen, and if so we save it for future reference.)11 2834(tour is better than the best one)6 1486 2 720 1020 t
(We do not necessarily choose this move as the basis for subsequent exploration, how-)13 4320 1 720 1170 t
( yields)1 332( we choose the \(possibly different\) qualifying, non-tabu move that)9 3302(ever. Instead,)1 686 3 720 1320 t
(the shortest new path)3 1057 1 720 1470 t
12 I f
(P)1820 1470 w
9 I f
(i)1908 1494 w
9 S f
(+)1955 1494 w
9 R f
(1)2020 1494 w
12 R f
( resulting path)2 713( that this does not mean that the)7 1619(. Note)1 336 3 2075 1470 t
12 I f
(P)4785 1470 w
9 I f
(i)4873 1494 w
9 S f
(+)4920 1494 w
9 R f
(1)4985 1494 w
12 R f
( shorter than)2 615(will be)1 337 2 720 1620 t
12 I f
(P)1709 1620 w
9 I f
(i)1797 1644 w
12 R f
(or that the corresponding)3 1226 1 1869 1620 t
12 I f
(tour)3132 1620 w
12 R f
(will be shorter than the one corre-)6 1670 1 3370 1620 t
(sponding to)1 565 1 720 1770 t
12 I f
(P)1315 1770 w
9 I f
(i)1403 1794 w
12 R f
( uphill moves are allowed \(as in tabu search\).)8 2179(. Thus)1 330 2 1438 1770 t
( unbounded tabu lists with)4 1274(The key differences from standard tabu search are thus \(a\))9 2796 2 970 1956 t
( considered at each)3 943(no aspiration levels, and \(b\) restrictions on the set of moves that are)12 3377 2 720 2106 t
( first)1 233( The)1 254( computation needed.)2 1047( these differences serve to limit the amount of)8 2261(step. Both)1 525 5 720 2256 t
(restricts us to at most)4 1081 1 720 2406 t
12 I f
(N)1845 2406 w
12 R f
( search, although in practice the number of steps)8 2430(steps per LK)2 641 2 1969 2406 t
( Euclidean instances, independent of size.)5 2020(averages something more like 3 for our random)7 2300 2 720 2556 t
(The second restricts us to at most)6 1694 1 720 2706 t
12 I f
(k)2459 2706 w
12 R f
(alternatives, where)1 922 1 2557 2706 t
12 I f
(k)3524 2706 w
12 R f
( \(and in)2 395(is typically 20 or 40)4 1023 2 3622 2706 t
(practice the number that qualify is more like 3.5 for)9 2485 1 720 2856 t
12 I f
(k)3235 2856 w
12 S f
(\263)3328 2856 w
12 R f
(20\).)3434 2856 w
( at a price, of course, since by limiting the search so sub-)12 2755(This savings in time comes)4 1315 2 970 3042 t
( key to the success of the Lin-Kernighan algo-)8 2293( The)1 255( its effectiveness.)2 850(stantially, we limit)2 922 4 720 3192 t
( the fact that a large number of LK searches are performed and in the way in)16 3730(rithm lies in)2 590 2 720 3342 t
( search)1 342(which the starting tours for these searches are obtained, which embodies the tabu)12 3978 2 720 3492 t
(principle of)1 558 1 720 3642 t
12 I f
(intensification)1308 3642 w
12 R f
(.)1999 3642 w
14 I f
(Restart Mechanisms for the LK-Search)4 2187 1 720 3972 t
12 R f
( view the overall Lin-Kernighan algorithm is as neighbor-list 3-Opt)9 3324(The simplest way to)3 996 2 720 4195 t
( specifically, we proceed as in 3-Opt, considering all)8 2641( More)1 334(with LK search grafted on.)4 1345 3 720 4345 t
(possibilities for)1 816 1 720 4495 t
12 I f
(t)1635 4495 w
9 R f
(1)1684 4519 w
12 R f
(,)1739 4495 w
12 I f
(t)1868 4495 w
9 R f
(2)1917 4519 w
12 R f
(,)1972 4495 w
12 I f
(t)2101 4495 w
9 R f
(3)2150 4519 w
12 R f
(,)2205 4495 w
12 I f
(t)2334 4495 w
9 R f
(4)2383 4519 w
12 R f
(, and)1 302 1 2438 4495 t
12 I f
(t)2839 4495 w
9 R f
(5)2888 4519 w
12 R f
(that satisfy)1 595 1 3042 4495 t
12 I f
(d)3736 4495 w
12 R f
(\()3806 4495 w
12 I f
(t)3856 4495 w
9 R f
(2)3905 4519 w
12 R f
(,)3970 4495 w
12 I f
(t)4010 4495 w
9 R f
(3)4059 4519 w
12 R f
(\))4124 4495 w
12 S f
(<)4224 4495 w
12 I f
(d)4340 4495 w
12 R f
(\()4410 4495 w
12 I f
(t)4460 4495 w
9 R f
(1)4509 4519 w
12 R f
(,)4574 4495 w
12 I f
(t)4614 4495 w
9 R f
(2)4663 4519 w
12 R f
(\) and)1 312 1 4728 4495 t
12 I f
(d)720 4645 w
12 R f
(\()790 4645 w
12 I f
(t)840 4645 w
9 R f
(2)889 4669 w
12 R f
(,)954 4645 w
12 I f
(t)994 4645 w
9 R f
(3)1043 4669 w
12 R f
(\))1108 4645 w
12 S f
(+)1168 4645 w
12 I f
(d)1254 4645 w
12 R f
(\()1324 4645 w
12 I f
(t)1374 4645 w
9 R f
(3)1423 4669 w
12 R f
(,)1488 4645 w
12 I f
(t)1528 4645 w
9 R f
(4)1577 4669 w
12 R f
(\))1642 4645 w
12 S f
(<)1720 4645 w
12 I f
(d)1824 4645 w
12 R f
(\()1894 4645 w
12 I f
(t)1944 4645 w
9 R f
(1)1993 4669 w
12 R f
(,)2058 4645 w
12 I f
(t)2098 4645 w
9 R f
(2)2147 4669 w
12 R f
(\))2212 4645 w
12 S f
(+)2272 4645 w
12 I f
(d)2358 4645 w
12 R f
(\()2428 4645 w
12 I f
(t)2478 4645 w
9 R f
(4)2527 4669 w
12 R f
(,)2592 4645 w
12 I f
(t)2632 4645 w
9 R f
(5)2681 4669 w
12 R f
(\) \(i.e., all choices of)4 990 1 2746 4645 t
12 I f
(t)3774 4645 w
9 R f
(1)3823 4669 w
12 R f
(through)3916 4645 w
12 I f
(t)4327 4645 w
9 R f
(5)4376 4669 w
12 R f
(meeting the)1 572 1 4468 4645 t
( each such choice, we use the tour)7 1674( For)1 233(one-tree restriction at the first and second levels\).)7 2413 3 720 4795 t
( from performing the corresponding 3-Opt move as the starting point for)11 3505(that would result)2 815 2 720 4945 t
(an LK search.)2 668 1 720 5095 t
(Note that for some choices of)5 1438 1 970 5281 t
12 I f
(t)2442 5281 w
9 R f
(1)2491 5305 w
12 R f
(through)2580 5281 w
12 I f
(t)2988 5281 w
9 R f
(5)3037 5305 w
12 R f
( gen-)1 248(there will be two possible ways of)6 1666 2 3126 5281 t
( \(two potential candidates for)4 1457(erating a corresponding 3-Opt move)4 1793 2 720 5431 t
12 I f
(t)4012 5431 w
9 R f
(6)4061 5455 w
12 R f
(that yield legal 3-)3 882 1 4158 5431 t
( other choices, there may be no way to generate)9 2295( For)1 228(Opt moves\), and both are considered.)5 1797 3 720 5581 t
( 3-Opt move, and in these cases we attempt to find cities)11 2982(a legal)1 342 2 720 5731 t
12 I f
(t)4098 5731 w
9 R f
(6)4147 5755 w
12 R f
(,)4202 5731 w
12 I f
(t)4286 5731 w
9 R f
(7)4335 5755 w
12 R f
(, and)1 257 1 4390 5731 t
12 I f
(t)4701 5731 w
9 R f
(8)4750 5755 w
12 R f
(that)4859 5731 w
(together with)1 648 1 720 5881 t
12 I f
(t)1408 5881 w
9 R f
(1)1457 5905 w
12 R f
(through)1552 5881 w
12 I f
(t)1966 5881 w
9 R f
(5)2015 5905 w
12 R f
( meets the one-tree restriction)4 1474(yield a legal 4-Opt move that)5 1456 2 2110 5881 t
(\(with)720 6031 w
12 I f
(t)1005 6031 w
9 R f
(7)1054 6055 w
12 R f
(restricted to those cities on the neighbor list for)8 2282 1 1140 6031 t
12 I f
(t)3453 6031 w
9 R f
(6)3502 6055 w
12 R f
( found is)2 421(\). The first such move)4 1062 2 3557 6031 t
( addition, we pre-load the tabu lists for the LK search)10 2576( In)1 161(used to produce the starting tour.)5 1583 3 720 6181 t
( path for the search.)4 966(with the edges added by the 3- or 4-Opt move that yielded the initial)13 3354 2 720 6331 t
( steps per LK search mentioned in the previous section did not include)12 3457(\(The average of 3)3 863 2 720 6481 t
(the work performed in creating these initial paths.\))7 2438 1 720 6631 t
(The algorithm proceeds in a series of phases based on the notion of a)13 3313 1 970 6817 t
12 I f
(champion)4313 6817 w
12 R f
(tour,)4816 6817 w
( this is just the tour produced by a starting heuris-)10 2437( Initially,)1 478(i.e., the best tour seen so far.)6 1405 3 720 6967 t
( all of our LK)4 752( a new champion is crowned,)5 1509( Until)1 330(tic, such as the Greedy algorithm.)5 1729 4 720 7117 t
( with)1 253(searches are based on tours obtained from this champion by 3-Opt \(4-Opt\) moves,)12 4067 2 720 7267 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 42 42
%%Page: 43 43
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
43 pagesetup
12 R f
(- 43 -)2 260 1 2750 500 t
(the search proceeding systematically through possible choices of)7 3192 1 720 870 t
12 I f
(t)3954 870 w
9 R f
(1)4003 894 w
12 R f
(through)4100 870 w
12 I f
(t)4516 870 w
9 R f
(5)4565 894 w
12 R f
(as in 3-)2 378 1 4662 870 t
( tabu)1 261( that this method for restarting an LK search naturally embodies the)11 3531(Opt. Note)1 528 3 720 1020 t
(search concept of)2 859 1 720 1170 t
12 I f
(intensification)1619 1170 w
12 R f
( vicinity of)2 551(, since it ensures that we keep exploring the)8 2179 2 2310 1170 t
(the current champion tour.)3 1275 1 720 1320 t
( current champion, we complete the)5 1756(Whenever a tour is found that is better than the)9 2314 2 970 1506 t
( and then take as our new champion the best tour found during that)13 3421(current LK search)2 899 2 720 1656 t
( choice of)2 491( a given)2 396(search. \(If)1 524 3 720 1806 t
12 I f
(t)2170 1806 w
9 R f
(1)2219 1830 w
12 R f
(through)2313 1806 w
12 I f
(t)2726 1806 w
9 R f
(4)2775 1830 w
12 R f
(yields a legal 2-Opt move that improves the)7 2171 1 2869 1806 t
( and none of the LK searches derived from this choice yields a better)13 3435(current champion,)1 885 2 720 1956 t
( as our new champion the tour resulting from performing that)10 3062(improving move, we take)3 1258 2 720 2106 t
( new phase based on this)5 1190( a new champion is crowned, we enter a)8 1929( Whenever)1 553(2-Opt move.\))1 648 4 720 2256 t
( next available value for)4 1181(new champion, restarting the basic 3-Opt loop with the)8 2679 2 720 2406 t
12 I f
(t)4615 2406 w
9 R f
(1)4664 2430 w
12 R f
(. \(The)1 321 1 4719 2406 t
(Johnson et al. implementation uses don't-look bits to restrict the choices for)11 3849 1 720 2556 t
12 I f
(t)4617 2556 w
9 R f
(1)4666 2580 w
12 R f
( in)1 141(, as)1 178 2 4721 2556 t
( choices of)2 554( algorithm terminates when all possible)5 1976( The)1 262(neighbor-list 2- and 3-Opt.\))3 1377 4 720 2706 t
12 I f
(t)4936 2706 w
9 R f
(1)4985 2730 w
12 R f
(through)720 2856 w
12 I f
(t)1127 2856 w
9 R f
(5)1176 2880 w
12 R f
( for a given champion without yielding an improvement,)8 2738(have been considered)2 1038 2 1264 2856 t
( found that is locally optimal with respect to the expanded neighbor-)11 3400(i.e., when a tour is)4 920 2 720 3006 t
(hood structure implicit in the Lin-Kernighan algorithm itself.)7 2943 1 720 3156 t
( strategy have been considered in the literature, mostly with)9 2953(Variants on this restart)3 1117 2 970 3342 t
( common approach is to restrict attention to)7 2222( A)1 164(the idea of speeding up the algorithm.)6 1934 3 720 3492 t
(choices of)1 490 1 720 3642 t
12 I f
(t)1240 3642 w
9 R f
(1)1289 3666 w
12 R f
(through)1375 3642 w
12 I f
(t)1780 3642 w
9 R f
(6)1829 3666 w
12 R f
(that yield valid 3-Opt moves and are such that)8 2225 1 1915 3642 t
12 I f
(t)4171 3642 w
9 R f
(1)4220 3666 w
12 R f
(through)4306 3642 w
12 I f
(t)4711 3642 w
9 R f
(4)4760 3666 w
12 R f
(also)4846 3642 w
( addition, the number of LK searches made for each choice)10 2896( In)1 166( 2-Opt move.)2 649(yield a valid)2 609 4 720 3792 t
(of)720 3942 w
12 I f
(t)853 3942 w
9 R f
(1)902 3966 w
12 R f
( the Johnson et al. implementation consid-)6 2060( Whereas)1 483( more directly restricted.)3 1195(can be)1 312 4 990 3942 t
( tour neighbors of)3 888(ers both)1 395 2 720 4092 t
12 I f
(t)2043 4092 w
9 R f
(1)2092 4116 w
12 R f
(as candidates for)2 827 1 2187 4092 t
12 I f
(t)3054 4092 w
9 R f
(2)3103 4116 w
12 R f
(, many implementations consider only)4 1882 1 3158 4092 t
(one possibility for)2 903 1 720 4242 t
12 I f
(t)1666 4242 w
9 R f
(2)1715 4266 w
12 R f
( the successor of)3 839(, typically)1 495 2 1770 4242 t
12 I f
(t)3148 4242 w
9 R f
(1)3197 4266 w
12 R f
( this, the)2 440( Given)1 367(in the current tour.)3 937 3 3296 4242 t
( strategy of Mak and Morton [1993], simply starts an LK search as)12 3375(``no backtracking'')1 945 2 720 4392 t
(soon as)1 370 1 720 4542 t
12 I f
(t)1133 4542 w
9 R f
(1)1182 4566 w
12 R f
(has been chosen and its successor)5 1682 1 1280 4542 t
12 I f
(t)3005 4542 w
9 R f
(2)3054 4566 w
12 R f
( [1994] and J)3 672(identified. Reinelt)1 913 2 3152 4542 t
(. .)1 54 1 4737 4470 t
(unger,)4737 4542 w
( [1994] suggest considering only the first three possibilities for)9 3170(Reinelt, and Rinaldi)2 1000 2 720 4692 t
12 I f
(t)4936 4692 w
9 R f
(3)4985 4716 w
12 R f
( LK search as soon as)5 1132(and starting an)2 742 2 720 4842 t
12 I f
(t)2642 4842 w
9 R f
(3)2691 4866 w
12 R f
( yields at most 3 LK)5 1069( \(This)1 332(has been chosen.)2 845 3 2794 4842 t
(searches for each choice of)4 1354 1 720 4992 t
12 I f
(t)2118 4992 w
9 R f
(1)2167 5016 w
12 R f
( alternatives)1 598( and Morton [1993] suggest allowing)5 1856(.\) Mak)1 364 3 2222 4992 t
(for both)1 387 1 720 5142 t
12 I f
(t)1140 5142 w
9 R f
(5)1189 5166 w
12 R f
(and)1277 5142 w
12 I f
(t)1483 5142 w
9 R f
(3)1532 5166 w
12 R f
( a bound of 25 on)5 863(, but only considering the first 5 choices for each \(for)10 2590 2 1587 5142 t
(the total number of LK searches for a given choice of)10 2657 1 720 5292 t
12 I f
(t)3416 5292 w
9 R f
(1)3465 5316 w
12 R f
( another variant suggested)3 1282(\). In)1 238 2 3520 5292 t
(by Reinelt [1994] and J)4 1152 1 720 5442 t
(. .)1 54 1 1872 5370 t
( two options each are allowed)5 1465(unger, Reinelt, and Rinaldi [1994],)4 1703 2 1872 5442 t
(for)720 5592 w
12 I f
(t)899 5592 w
9 R f
(3)948 5616 w
12 R f
(,)1003 5592 w
12 I f
(t)1072 5592 w
9 R f
(5)1121 5616 w
12 R f
(and)1215 5592 w
12 I f
(t)1427 5592 w
9 R f
(7)1476 5616 w
12 R f
(, yielding 8 possible LK searches for each choice of)9 2559 1 1531 5592 t
12 I f
(t)4128 5592 w
9 R f
(1)4177 5616 w
12 R f
( the more)2 470(. Only)1 338 2 4232 5592 t
( approaches are likely to provide substantial speedups by themselves,)9 3422(draconian of these)2 898 2 720 5742 t
( neighbor lists of length 20, the Johnson et al. implementation can theoret-)12 3576(however. With)1 744 2 720 5892 t
(ically perform 800 or more LK searches per choice of)9 2637 1 720 6042 t
12 I f
(t)3394 6042 w
9 R f
(1)3443 6066 w
12 R f
(, but the actual average number)5 1542 1 3498 6042 t
( of our random)3 726(of calls is more like 6 for random Euclidean instances and 8 for the larger)14 3594 2 720 6192 t
(distance matrix instances.)2 1240 1 720 6342 t
( been proposed is to limit the depth of LK)9 2131(Another common modification that has)4 1939 2 970 6528 t
( & Cook, 1990] or even 15 [Reinelt, 1994],)8 2102( atal,)1 159( \302)1 45( 50 steps [Applegate, Chv)4 1256(searches, say to)2 758 5 720 6678 t
([J)720 6828 w
(. .)1 54 1 807 6756 t
( again is unlikely to cause any significant)7 2212( This)1 306( 1994].)1 372(unger, Reinelt, & Rinaldi,)3 1343 4 807 6828 t
( the algorithm by itself, given that the average depth searched even when no)13 3786(speedup of)1 534 2 720 6978 t
( the LK search is initiated.)5 1284(bounds are imposed is only 3 moves beyond the level at which)11 3036 2 720 7128 t
(It does however, enable use of the)6 1738 1 720 7278 t
12 I f
(Segment-Tree)2505 7278 w
12 R f
( tour representation)2 967(data structure for)2 855 2 3218 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 43 43
%%Page: 44 44
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
44 pagesetup
12 R f
(- 44 -)2 260 1 2750 500 t
( [1990], which for certain classes of instances)7 2230( and Cook)2 501( atal,)1 159( \302)1 45(proposed by Applegate, Chv)3 1385 5 720 870 t
( to the two-level tree data structure used in the Johnson et al.)12 3167(is a serious competitor)3 1153 2 720 1020 t
( Fredman, Johnson, McGeoch, and Ostheimer [1995] for a detailed)9 3293(implementation. See)1 1027 2 720 1170 t
(experimental comparison.)1 1249 1 720 1320 t
( modify the LK-search method more)5 1833(Finally, there have been various proposals to)6 2237 2 970 1506 t
(drastically, either by using shorter neighbor-lists to further limit the alternatives consid-)11 4320 1 720 1656 t
(ered for)1 386 1 720 1806 t
12 I f
(t)1146 1806 w
9 R f
(2)1195 1830 w
9 I f
(i)1247 1830 w
9 S f
(+)1294 1830 w
9 R f
(1)1359 1830 w
12 R f
(by [Reinelt, 1992], [J)3 1058 1 1455 1806 t
(. .)1 54 1 2513 1734 t
(unger, Reinelt, & Rinaldi, 1994], or conversely, by)7 2527 1 2513 1806 t
( Morton [1993] suggest)3 1189( and)1 223( Mak)1 300(augmenting the class of possible moves considered.)6 2608 4 720 1956 t
( the current path \(as well as the standard ones)9 2257(allowing 2-Opt moves that flip a prefix of)7 2063 2 720 2106 t
( [1994] and J)3 645( Reinelt)1 413(that flip a suffix\).)3 858 3 720 2256 t
(. .)1 54 1 2636 2184 t
( [1994] suggest allow-)3 1090(unger, Reinelt, and Rinaldi)3 1314 2 2636 2256 t
( path.)1 269(ing moves in which a single city is moved from its current position to the end of the)17 4051 2 720 2406 t
( spelled out an even more flexible variant called a)9 2402(Dam and Zachariasen have)3 1307 2 720 2556 t
12 I f
(flower tran-)1 580 1 4460 2556 t
(sition)720 2706 w
12 R f
( search method, the base)4 1205( this)1 211( In)1 166(, based on proposals made by Glover [1991,1992].)7 2469 4 989 2706 t
( a)1 93(configuration is not a Hamiltonian path, as in LK search, but a one-tree consisting of)14 4227 2 720 2856 t
(cycle \(the)1 482 1 720 3006 t
12 I f
(blossom)1244 3006 w
12 R f
(\) attached to a path \(the)5 1191 1 1638 3006 t
12 I f
(stem)2871 3006 w
12 R f
( graph has more flexibility as)5 1472( a)1 95(\). Such)1 382 3 3091 3006 t
( turned into a tour, depending on which of the cycle edges)11 2909(there are two ways it can be)6 1411 2 720 3156 t
( edge)1 259( steps of a search again involve adding an)8 2017( Individual)1 557(adjacent to the stem is deleted.)5 1487 4 720 3306 t
( to a)2 207(from the free end of the path, but now that edge may go either to another stem city or)18 4113 2 720 3456 t
( there are again two choices for which edge to)9 2371(city in the cycle, and in the latter case)8 1949 2 720 3606 t
(delete.)720 3756 w
( augmentations to)2 860(Unfortunately, it is difficult to determine which of these suggested)9 3210 2 970 3942 t
( experimental results are reported for each of them, the)9 2708( Although)1 522(LK search have merit.)3 1090 3 720 4092 t
( of Lin-Kernighan)2 885(implementations studied differ from the Johnson et al. implementation)8 3435 2 720 4242 t
( and Zachariasen use the flower)5 1522( Dam)1 293(in more ways than just the choice of search method.)9 2505 3 720 4392 t
( The)1 248( algorithm, which we shall describe in Section 6.)8 2360(transition in a much more elaborate)5 1712 3 720 4542 t
( on)1 154(other variants were studied in implementations that imposed additional restrictions)9 4028 2 720 4692 t
12 I f
(t)4936 4692 w
9 R f
(1)4985 4716 w
12 R f
(through)720 4842 w
12 I f
(t)1152 4842 w
9 R f
(7)1201 4866 w
12 R f
( because of these restrictions, they)5 1794( Perhaps)1 469(, like those mentioned above.)4 1521 3 1256 4842 t
( that those of the Johnson et al.)7 1665(yielded tours that were typically significantly worse)6 2655 2 720 4992 t
( be more a)3 536( latter code also appears to be faster, although this may)10 2741(implementation. The)1 1043 3 720 5142 t
( tuning that went into its construction rather than any key algorithmic)11 3537(result of all the)3 783 2 720 5292 t
( next section provides specific details on its performance.)8 2762(advantages. The)1 809 2 720 5442 t
14 I f
(Experimental Results for Lin-Kernighan)3 2261 1 720 5772 t
12 R f
( results for the Johnson et al. imple-)7 1746(Tables 7 and 8 summarize the base-line experimental)7 2574 2 720 5995 t
( are)1 194( Results)1 433( time.)1 293( 7 covers tour quality and Table 8 covers running)9 2536(mentation. Table)1 864 5 720 6145 t
( For)1 230( geometric instances and random distance matrix instances.)7 2873(reported for both random)3 1217 3 720 6295 t
( the corresponding results for 3-Opt from Section)7 2388(comparison purposes, the tables include)4 1932 2 720 6445 t
( 3-Opt, the results for Lin-Kernighan in these tables were obtained using)11 3671( with)1 260(3.2. As)1 389 3 720 6595 t
( with neighbor-lists of)3 1103(starting tours generated by the randomized Greedy heuristic, and)8 3217 2 720 6745 t
(length)720 6895 w
12 I f
(k)1051 6895 w
12 S f
(=)1154 6895 w
12 R f
(20.)1270 6895 w
(Note that for random Euclidean instances, Lin-Kernighan finds tours that on average)11 4070 1 970 7081 t
(are about 1)2 557 1 720 7231 t
12 I f
(%)1277 7231 w
12 R f
( reducing the excess over the Held-)6 1759(shorter than those provided by 3-Opt,)5 1862 2 1419 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 44 44
%%Page: 45 45
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
45 pagesetup
12 R f
(- 45 -)2 260 1 2750 500 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 875 t
11 R f
(Average Percent Excess over the Held-Karp Lower Bound)7 2571 1 1594 1025 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 1075 t
10 I f
(N)1196 1225 w
10 R f
(= 10)1 335 1 1338 1225 t
7 R f
(2)1678 1185 w
10 R f
(10)1900 1225 w
7 R f
(2. 5)1 93 1 2005 1185 t
10 R f
(10)2285 1225 w
7 R f
(3)2390 1185 w
10 R f
(10)2612 1225 w
7 R f
(3. 5)1 93 1 2717 1185 t
10 R f
(10)2997 1225 w
7 R f
(4)3102 1185 w
10 R f
(10)3324 1225 w
7 R f
(4. 5)1 93 1 3429 1185 t
10 R f
(10)3709 1225 w
7 R f
(5)3814 1185 w
10 R f
(10)4036 1225 w
7 R f
(5. 5)1 93 1 4141 1185 t
10 R f
(10)4421 1225 w
7 R f
(6)4526 1185 w
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 1275 t
10 R f
(Random Euclidean Instances)2 1159 1 2491 1425 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 1475 t
10 R f
(3-Opt 2.5 2.5 3.1 3.0 3.0 2.9 3.0 2.9 3.0)9 3437 1 1161 1625 t
( 1.7 2.0 1.9 2.0 1.9 2.0 1.9 2.0)8 2848(LK 1.5)1 589 2 1161 1745 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 1765 t
10 R f
(Random Distance Matrices)2 1087 1 2527 1915 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 1965 t
10 R f
( \261 \261 \261)3 1068(3-Opt 10 20 33 46 63 80)6 2369 2 1161 2085 t
( \261 \261 \261)3 1068( 2.5 3.5 4.6 5.8 6.9)5 1780(LK 1.4)1 589 3 1161 2205 t
10 S f
( \347)1 -3537(_ ______________________________________________________________________)1 3537 2 1111 2255 t
(\347)1111 2175 w
(\347)1111 2075 w
(\347)1111 1975 w
(\347)1111 1875 w
(\347)1111 1775 w
(\347)1111 1675 w
(\347)1111 1575 w
(\347)1111 1475 w
(\347)1111 1375 w
(\347)1111 1275 w
(\347)1111 1175 w
(\347)1111 1075 w
(\347)1111 975 w
(\347)1469 2255 w
(\347)1469 2175 w
(\347)1469 2075 w
(\347)1469 1975 w
(\347)1469 1875 w
(\347)1469 1775 w
(\347)1469 1675 w
(\347)1469 1575 w
(\347)1469 1475 w
(\347)1469 1375 w
(\347)4648 2255 w
(\347)4648 2175 w
(\347)4648 2075 w
(\347)4648 1975 w
(\347)4648 1875 w
(\347)4648 1775 w
(\347)4648 1675 w
(\347)4648 1575 w
(\347)4648 1475 w
(\347)4648 1375 w
(\347)4648 1275 w
(\347)4648 1175 w
(\347)4648 1075 w
(\347)4648 975 w
11 B f
(Table 7.)1 381 1 1431 2495 t
11 R f
(Tour quality for Lin-Kernighan in comparison to 3-Opt.)7 2461 1 1868 2495 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 2782 t
11 R f
(Running Time in Seconds on a 150 Mhz SGI Challenge)9 2462 1 1648 2962 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 3012 t
10 I f
(N)1196 3162 w
10 R f
(= 10)1 335 1 1338 3162 t
7 R f
(2)1678 3122 w
10 R f
(10)1900 3162 w
7 R f
(2. 5)1 93 1 2005 3122 t
10 R f
(10)2285 3162 w
7 R f
(3)2390 3122 w
10 R f
(10)2612 3162 w
7 R f
(3. 5)1 93 1 2717 3122 t
10 R f
(10)2997 3162 w
7 R f
(4)3102 3122 w
10 R f
(10)3324 3162 w
7 R f
(4. 5)1 93 1 3429 3122 t
10 R f
(10)3709 3162 w
7 R f
(5)3814 3122 w
10 R f
(10)4036 3162 w
7 R f
(5. 5)1 93 1 4141 3122 t
10 R f
(10)4421 3162 w
7 R f
(6)4526 3122 w
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 3212 t
10 R f
(Random Euclidean Instances)2 1159 1 2491 3362 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 3412 t
10 R f
( 1080)1 356( 280)1 356( 69)1 356( 17.5)1 356( 4.7)1 356(3-Opt 0.04 0.11 0.41 1.40)4 1657 6 1161 3562 t
( 2650)1 356( 151 646)2 712( 39.4)1 356( 9.8)1 356( 0.20 0.77 2.46)3 1068(LK 0.06)1 589 6 1161 3682 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 3702 t
10 R f
(Random Distance Matrices)2 1087 1 2527 3852 t
10 S f
(_ ______________________________________________________________________)1 3537 1 1111 3902 t
10 R f
( \261 \261 \261)3 1068( 1410)1 356( 110)1 356( 9.8)1 356(3-Opt 0.02 0.16 1.14)3 1301 5 1161 4022 t
( \261 \261 \261)3 1068( 1620)1 356( 139)1 356( 13.6)1 356( 1.9)1 356( 0.35)1 356(LK 0.05)1 589 7 1161 4142 t
10 S f
( \347)1 -3537(_ ______________________________________________________________________)1 3537 2 1111 4192 t
(\347)1111 4182 w
(\347)1111 4082 w
(\347)1111 3982 w
(\347)1111 3882 w
(\347)1111 3782 w
(\347)1111 3682 w
(\347)1111 3582 w
(\347)1111 3482 w
(\347)1111 3382 w
(\347)1111 3282 w
(\347)1111 3182 w
(\347)1111 3082 w
(\347)1111 2982 w
(\347)1111 2882 w
(\347)1469 4192 w
(\347)1469 4112 w
(\347)1469 4012 w
(\347)1469 3912 w
(\347)1469 3812 w
(\347)1469 3712 w
(\347)1469 3612 w
(\347)1469 3512 w
(\347)1469 3412 w
(\347)1469 3312 w
(\347)4648 4192 w
(\347)4648 4182 w
(\347)4648 4082 w
(\347)4648 3982 w
(\347)4648 3882 w
(\347)4648 3782 w
(\347)4648 3682 w
(\347)4648 3582 w
(\347)4648 3482 w
(\347)4648 3382 w
(\347)4648 3282 w
(\347)4648 3182 w
(\347)4648 3082 w
(\347)4648 2982 w
(\347)4648 2882 w
11 B f
(Table 8.)1 381 1 1458 4432 t
11 R f
(Running times Lin-Kernighan in comparison to 3-Opt.)6 2406 1 1895 4432 t
12 R f
(Karp lower bound to just 2)5 1311 1 720 4714 t
12 I f
(/)2041 4714 w
12 R f
( distance matrices,)2 902( random)1 401( For)1 231(3 of the amount under 3-Opt.)5 1421 4 2085 4714 t
( is much more dramatic, more like a factor of 10, although the percentage)13 3677(the reduction)1 643 2 720 4864 t
( log)1 193(excess does still appear to be growing as)7 2008 2 720 5014 t
12 I f
(N)2961 5014 w
12 R f
( the tours found are quite)5 1250(. Nevertheless,)1 749 2 3041 5014 t
( average excess over)3 1021(reasonable throughout the range of instance sizes studied, with the)9 3299 2 720 5164 t
( from 1.4)2 462(the Held-Karp bound only growing)4 1725 2 720 5314 t
12 I f
(%)2907 5314 w
12 R f
(to 6.9)1 283 1 3046 5314 t
12 I f
(%)3329 5314 w
12 R f
(, compared to the excess of 80)6 1511 1 3429 5314 t
12 I f
(%)4940 5314 w
12 R f
(for 3-Opt at the top of the size range.)8 1778 1 720 5464 t
( times, note that for random Euclidean instances, the ratio of the run-)12 3397(As to running)2 673 2 970 5650 t
( Lin-Kernighan to that for 3-Opt, although growing with)8 2713(ning time for)2 631 2 720 5800 t
12 I f
(N)4094 5800 w
12 R f
(, has only reached)3 866 1 4174 5800 t
( 2.5 for)2 362(factor of)1 415 2 720 5950 t
12 I f
(N)1533 5950 w
12 S f
(=)1663 5950 w
12 R f
(10)1779 5950 w
9 R f
(6)1906 5902 w
12 R f
(, with a 10,000 city instance taking less than 10 seconds, and a)12 3079 1 1961 5950 t
( random distance matrices, because)4 1706( For)1 230(million-city instance taking less than 45 minutes.)6 2384 3 720 6100 t
(the)720 6250 w
12 S f
(Q)898 6250 w
12 R f
(\()997 6250 w
12 I f
(N)1047 6250 w
9 R f
(2)1142 6202 w
12 R f
( running time, the ratio)4 1115(\) time for constructing neighbor lists dominates the total)8 2718 2 1207 6250 t
(actually decreases with)2 1134 1 720 6400 t
12 I f
(N)1894 6400 w
12 R f
(and is only 1.15 for)4 978 1 2014 6400 t
12 I f
(N)3032 6400 w
12 S f
(=)3162 6400 w
12 R f
( ratios of time spent in)5 1126( The)1 256(31 , 623.)2 380 3 3278 6400 t
( time spent in the common opera-)6 1653(local optimization for the two algorithms \(ignoring the)7 2667 2 720 6550 t
( larger, although)2 815(tions of constructing neighbor lists and starting tours\) are significantly)9 3505 2 720 6700 t
( ratios grow)2 602( the random geometric instances, the)5 1828( For)1 240(not as large as one might expect.)6 1650 4 720 6850 t
(from roughly a factor of 3 to one of 8 as one goes from 100 to 10)16 3289 1 720 7000 t
9 R f
(6)4016 6952 w
12 R f
( random)1 407(cities. For)1 522 2 4111 7000 t
( of 4 to a factor of 14 as one goes)10 1630(distance matrices, the ratios grow from roughly a factor)8 2690 2 720 7150 t
(from 100 to 31,623 cities.)4 1243 1 720 7300 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 45 45
%%Page: 46 46
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
46 pagesetup
12 R f
(- 46 -)2 260 1 2750 500 t
( the more structured instances of)5 1601(Lin-Kernighan's performance on)2 1598 2 970 870 t
12 C f
(TSPLIB)4206 870 w
12 R f
(is com-)1 365 1 4675 870 t
( terms)1 299( In)1 161( random geometric instances.)3 1412(parable to, but slightly worse than, its behavior for)8 2448 4 720 1020 t
( for)1 178(of tour quality, Lin-Kernighan's degradation is somewhat less than that we observed)11 4142 2 720 1170 t
( average excess of roughly 1.9)5 1524(3-Opt. The)1 569 2 720 1320 t
12 I f
(%)2813 1320 w
12 R f
(for our larger random geometric instances)5 2084 1 2956 1320 t
(grows to an average of 2.8)5 1367 1 720 1470 t
12 I f
(%)2087 1470 w
12 R f
(for our suite of 15 of the largest instances in)9 2292 1 2236 1470 t
12 C f
(TSPLIB)4578 1470 w
12 R f
(,)5010 1470 w
( was from 3.0)3 669(whereas the increase for 3-Opt)4 1488 2 720 1620 t
12 I f
(%)2877 1620 w
12 R f
(to 4.6)1 277 1 3010 1620 t
12 I f
(%)3287 1620 w
12 R f
( even smaller degradation \(to)4 1414(. An)1 239 2 3387 1620 t
(an average excess of just 2.3)5 1388 1 720 1770 t
12 I f
(%)2108 1770 w
12 R f
( possible if we use neighbor lists of 40 quadrant neigh-)10 2678(\) is)1 154 2 2208 1770 t
( by about a)3 530(bors as described in Section 3.3, although this typically increases running time)11 3790 2 720 1920 t
( random)1 402( \(For)1 272(factor of two over that needed when just the 20 nearest neighbors are used.)13 3646 3 720 2070 t
( neighbor scheme yields essentially the same average)7 2665(geometric instances this quadrant)3 1655 2 720 2220 t
( on)1 154(percentage excess as the 20 nearest neighbor scheme, but it appears to have real value)14 4166 2 720 2370 t
(more structured instances.\))2 1299 1 720 2520 t
( on these)2 443(As to running time)3 927 2 970 2706 t
12 C f
(TSPLIB)2378 2706 w
12 R f
(instances, it is fair to say that the good tours)9 2192 1 2848 2706 t
( running times for 3-Opt on the)6 1509( Whereas)1 480( a cost.)2 339(found by Lin-Kernighan are purchased at)5 1992 4 720 2856 t
12 C f
(TSPLIB)720 3006 w
12 R f
( been on random geometric)4 1326(instances were roughly the same as they would have)8 2530 2 1184 3006 t
( size, the)2 444(instances of the same)3 1058 2 720 3156 t
12 C f
(TSPLIB)2262 3156 w
12 R f
(times for Lin-Kernighan, even when using just)6 2306 1 2734 3156 t
( factor of 2 or 3 worse than the corresponding random geomet-)11 3040(20 neighbors, were often a)4 1280 2 720 3306 t
(ric times \(and in one case,)5 1315 1 720 3456 t
12 C f
(TSPLIB)2077 3456 w
12 R f
('s 3795-city instance, the factor was more like 25\).)8 2531 1 2509 3456 t
(This slowdown is typically due to the combined effect of a deeper average search depth)14 4320 1 720 3606 t
( 3795-city instance\) and an)4 1393(for the LK search \(which increased from 3 to 37 for the)11 2927 2 720 3756 t
( to 10.5 for)3 540(increased number of qualifying moves at each level \(which increased from 3.5)11 3780 2 720 3906 t
( running times are not exorbitant, the longest being that for)10 2947( so, the)2 368( Even)1 318(that instance\).)1 687 4 720 4056 t
(40-quadrant-neighbor Lin-Kernighan on)2 1976 1 720 4206 t
12 C f
(TSPLIB)2744 4206 w
12 R f
( instance \()2 532('s 85,900-city)1 686 2 3176 4206 t
12 C f
(pla85900)4394 4206 w
12 R f
(\),)4970 4206 w
( roughly 7 minutes but produced a tour that was within 1.6)11 2829(which took)1 539 2 720 4356 t
12 I f
(%)4088 4356 w
12 R f
(of the Held-Karp)2 821 1 4219 4356 t
(lower bound.)1 633 1 720 4506 t
14 I f
(Parallelizing Lin-Kernighan)1 1600 1 720 4836 t
12 R f
( proposed.)1 503(Several schemes for constructing parallel versions of Lin-Kernighan have been)9 3817 2 720 5059 t
( the same tradeoff between tour)5 1632(Schemes based on geometric partitioning offer much)6 2688 2 720 5209 t
( instance, for)2 626( For)1 227(quality and speedup as they do for 2- and 3-Opt.)9 2321 3 720 5359 t
12 C f
(pla85900)3925 5359 w
12 R f
(, a geomet-)2 539 1 4501 5359 t
( than a)2 322(ric partition into four roughly equal subproblems can reduce running time by more)12 3998 2 720 5509 t
( superlinear speedup because Lin-Kernighan has superlinear running time\),)8 3676(factor of 4 \(a)3 644 2 720 5659 t
( average some 0.3)3 869(but the resulting tours)3 1060 2 720 5809 t
12 I f
(%)2649 5809 w
12 R f
( A)1 147(longer than those for the sequential version.)6 2113 2 2780 5809 t
( date the most)3 723( To)1 209(similar observation holds for schemes using tour-based partitioning.)7 3388 3 720 5959 t
( parallelism to Lin-Kernighan seems to be that of Verhoeven,)9 3157(effective application of)2 1163 2 720 6109 t
( scheme assumes that each processor has enough local)8 2640( Their)1 324(Swinkels, and Aarts [1995].)3 1356 3 720 6259 t
( and the current tour,)4 1052(memory to store the entire instance, its associated data structures,)9 3268 2 720 6409 t
(and it simply parallelizes the search for an improving move.)9 2893 1 720 6559 t
(The process takes place in rounds, each of which consists of a)11 3040 1 970 6745 t
12 I f
(search phase)1 636 1 4046 6745 t
12 R f
(and an)1 322 1 4718 6745 t
12 I f
(arbitration phase)1 842 1 720 6895 t
12 R f
( the search phase, the set of candidates for)8 2040(. In)1 192 2 1562 6895 t
12 I f
(t)3826 6895 w
9 R f
(1)3875 6919 w
12 R f
('s is partitioned among)3 1110 1 3930 6895 t
( moves based on their assigned set of can-)8 2070(the processors, which then look for improving)6 2250 2 720 7045 t
( search phase concludes as soon as each processor has either found an)12 3676(didates. The)1 644 2 720 7195 t
( The)1 284(improving move or has discovered that none exist for its list of candidates.)12 4036 2 720 7345 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 41 536 764
%%EndPage: 46 46
%%Page: 47 47
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
47 pagesetup
12 R f
(- 47 -)2 260 1 2750 500 t
( processor finds an improving)4 1476(arbitration phase deals with the case when more than one)9 2844 2 720 870 t
( al.)1 159( the Verhoeven et)3 882( In)1 171(move, and it has the task of deciding which one\(s\) to perform.)11 3108 4 720 1020 t
( reduction in tour length they provide,)6 1893(scheme, the moves are ordered by the amount of)8 2427 2 720 1170 t
( move is examined in turn to see if it is)10 1993(the first is performed, and then each remaining)7 2327 2 720 1320 t
( processors all perform these changes to their)7 2208( \(The)1 291(still legal and if so is also performed.)7 1821 3 720 1470 t
( obtain)1 342( this scheme, Verhoeven et al.)5 1494( Using)1 357(local copies of the current tour in parallel.\))7 2127 4 720 1620 t
( in tour quality over their implemen-)6 1789(substantial speedups with no noticeable degradation)5 2531 2 720 1770 t
( 32 processors, the speedups on)5 1559( With)1 310( Lin-Kernighan.)1 782(tation of)1 413 4 720 1920 t
12 C f
(TSPLIB)3823 1920 w
12 R f
(instances range)1 746 1 4294 1920 t
( of 5 to a factor of 16, depending on the instance and the type of processor)16 3677(from a factor)2 643 2 720 2070 t
( parallelized by Verhoeven et al. differs in)7 2077( version of Lin-Kernighan)3 1275( The)1 252(they are using.)2 716 4 720 2220 t
( and on average it does not pro-)7 1531(several key ways from the Johnson et al. implementation,)8 2789 2 720 2370 t
( parallelization scheme seems)3 1493( Their)1 340( tours or run quite as quickly.)6 1533(duce quite as good)3 954 4 720 2520 t
(fairly robust however, and is likely to provide the same sort of speedups without loss of)15 4320 1 720 2670 t
(tour quality for a wide variety of underlying Lin-Kernighan implementations.)9 3727 1 720 2820 t
14 B f
( ANNEALING AND ITS VARIANTS)4 2259(5. SIMULATED)1 1025 2 720 3150 t
12 R f
( that of tabu search, although it is)7 1632(The invention of simulated annealing actually preceded)6 2688 2 720 3373 t
( simulated annealing allows)3 1367( tabu search,)2 623( Like)1 290(more convenient for us to treat it second.)7 2040 4 720 3523 t
( whereas tabu search in essence only makes uphill moves when)10 3121( However,)1 536(uphill moves.)1 663 3 720 3673 t
( simulated annealing can make uphill moves at any time.)9 2949(it is stuck in local optima,)5 1371 2 720 3823 t
( search in)2 486(Moreover, simulated annealing relies heavily on randomization, whereas tabu)8 3834 2 720 3973 t
(its basic form chooses its next move in a strictly deterministic fashion \(except possibly)13 4320 1 720 4123 t
( simulated annealing is)3 1125( Nevertheless,)1 716( for the best non-tabu neighbor\).)5 1585(when there is a tie)4 894 4 720 4273 t
(still basically a local search algorithm, with the current solution wandering from neighbor)12 4320 1 720 4423 t
( approaches is)2 708( key difference from other)4 1312( The)1 259(to neighbor as the computation proceeds.)5 2041 4 720 4573 t
( examines neighbors in random order, moving to the first one)10 3109(that simulated annealing)2 1211 2 720 4723 t
( originally proposed)2 979( As)1 198(seen that is either better or else passes a special randomized test.)11 3143 3 720 4873 t
( Vecchi, and Gelatt [1983] and Cerny [1985], the randomized test is the)12 3574(by Kirkpatrick,)1 746 2 720 5023 t
( Metropolis et al. [1953] for simulating the physical behavior of atoms in)12 3549(one invented by)2 771 2 720 5173 t
( called the)2 534( involves a control parameter)4 1486( It)1 155(a heat bath.)2 592 4 720 5323 t
12 I f
(temperature)3537 5323 w
12 R f
(, and in simulated)3 916 1 4124 5323 t
( lowered as the search proceeds, in a simu-)8 2073(annealing that control parameter is continually)5 2247 2 720 5473 t
(lation of the physical annealing process.)5 1930 1 720 5623 t
( of simulated annealing, its motivation, and its theoretical)8 2826(For a detailed description)3 1244 2 970 5809 t
( TSP was one of the first problems to which simulated)10 2632( The)1 248(underpinnings, see Chapter 4.)3 1440 3 720 5959 t
( [1983] and)2 603(annealing was applied, serving as an example for both Kirkpatrick et al.)11 3717 2 720 6109 t
( to be a prime testbed for the approach)8 1912( then the TSP has continued)5 1390( Since)1 336(Cerny [1985].)1 682 4 720 6259 t
( section we report on the resulting TSP algorithms and how they)11 3172( this)1 211( In)1 166(and its variants.)2 771 4 720 6409 t
( been based on the simple schema presented in Figure 4,)10 2746( adaptations have)2 844(perform. Most)1 730 3 720 6559 t
( generating starting solutions)3 1491(with implementations differing as to their methods for)7 2829 2 720 6709 t
(\(tours\) and for handling temperatures, as well as in their definitions of)11 3671 1 720 6859 t
12 I f
(equilibrium)4448 6859 w
12 R f
(,)5010 6859 w
12 I f
(frozen)720 7009 w
12 R f
(,)1021 7009 w
12 I f
(neighbor)1091 7009 w
12 R f
(, and)1 243 1 1525 7009 t
12 I f
(random)1808 7009 w
12 R f
( 3.1.4 is designed so that large)6 1522( that the test in Step)5 1004(. Note)1 333 3 2181 7009 t
( are unlikely to be taken except at high temperatures)9 2513(steps uphill)1 554 2 720 7159 t
12 I f
(t)3817 7159 w
12 R f
( probability that an)3 913(. The)1 276 2 3851 7159 t
(uphill move of a given cost)5 1323 1 720 7309 t
12 S f
(D)2075 7309 w
12 R f
( In)1 163(will be accepted declines as the temperature is lowered.)8 2696 2 2181 7309 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 47 47
%%Page: 48 48
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
48 pagesetup
12 R f
(- 48 -)2 260 1 2750 500 t
(the limiting case, when)3 1125 1 720 870 t
12 I f
(T)1878 870 w
12 S f
(=)1995 870 w
12 R f
( version of iterative)3 945(0, the algorithm reduces to a randomized)6 1984 2 2111 870 t
(improvement, where no uphill moves are allowed at all.)8 2684 1 720 1020 t
( a starting solution)3 894(1. Generate)1 622 2 1090 1416 t
12 I f
(S)2636 1416 w
12 R f
(and set the initial champion solution)5 1750 1 2726 1416 t
12 I f
(S *)1 130 1 4506 1416 t
12 S f
(=)4686 1416 w
12 I f
(S)4802 1416 w
12 R f
(.)4862 1416 w
( a starting temperature)3 1079(2. Determine)1 697 2 1090 1602 t
12 I f
(T)2896 1602 w
12 R f
(.)2963 1602 w
( not yet)2 361(3. While)1 484 2 1090 1788 t
12 I f
(frozen)1965 1788 w
12 R f
(do the following:)2 829 1 2296 1788 t
( not yet at)3 478(3.1. While)1 544 2 1280 1974 t
12 I f
(equilibrium)2332 1974 w
12 R f
(for this temperature, do the following:)5 1838 1 2924 1974 t
( a)1 83(3.1.1. Choose)1 690 2 1530 2160 t
12 I f
(random neighbor S)2 927 1 2333 2160 t
12 S f
(\242)3270 2160 w
12 R f
(of the current solution.)3 1096 1 3330 2160 t
(3.1.2. Set)1 484 1 1530 2346 t
12 S f
(D =)1 189 1 2044 2346 t
12 I f
(Length)2283 2346 w
12 R f
(\()2627 2346 w
12 I f
(S)2677 2346 w
12 S f
(\242)2747 2346 w
12 R f
(\))2787 2346 w
12 S f
(-)2887 2346 w
12 I f
(Length)3003 2346 w
12 R f
(\()3347 2346 w
12 I f
(S)3397 2346 w
12 R f
(\).)3467 2346 w
(3.1.3. If)1 410 1 1530 2532 t
12 S f
(D \243)1 179 1 1970 2532 t
12 R f
(0 \(downhill move\):)2 929 1 2189 2532 t
(Set)2030 2718 w
12 I f
(S)2214 2718 w
12 S f
(=)2324 2718 w
12 I f
(S)2440 2718 w
12 S f
(\242)2510 2718 w
12 R f
(.)2540 2718 w
(If)2030 2904 w
12 I f
(Length)2140 2904 w
12 R f
(\()2484 2904 w
12 I f
(S)2534 2904 w
12 R f
(\))2604 2904 w
12 S f
(<)2704 2904 w
12 I f
(Length)2820 2904 w
12 R f
(\()3164 2904 w
12 I f
(S *)1 130 1 3214 2904 t
12 R f
(\), set)1 234 1 3354 2904 t
12 I f
(S *)1 130 1 3618 2904 t
12 S f
(=)3798 2904 w
12 I f
(S)3914 2904 w
12 R f
(.)3974 2904 w
( \(uphill move\):)2 723(3.1.4 Else)1 507 2 1530 3090 t
(Choose a random number)3 1237 1 2030 3276 t
12 I f
(r)3297 3276 w
12 R f
( 0 , 1 ].)4 260(uniformly from [)2 816 2 3374 3276 t
(If)2030 3462 w
12 I f
(r)2140 3462 w
12 S f
(<)2237 3462 w
12 I f
(e)2353 3462 w
9 S f
(- D)1 120 1 2421 3414 t
9 I f
(/ T)1 82 1 2548 3414 t
12 R f
(, set)1 194 1 2640 3462 t
12 I f
(S)2864 3462 w
12 S f
(=)2974 3462 w
12 I f
(S)3090 3462 w
12 S f
(\242)3160 3462 w
12 R f
(.)3190 3462 w
( ``While not yet at equilibrium'' loop.)6 1829(3.1.5 End)1 493 2 1530 3648 t
( the temperature)2 781(3.2 Lower)1 562 2 1280 3834 t
12 I f
(T)2653 3834 w
12 R f
(.)2720 3834 w
( ``While not yet frozen'' loop.)5 1455(3.3 End)1 443 2 1280 4020 t
(4. Return)1 517 1 1090 4206 t
12 I f
(S *)1 130 1 1637 4206 t
12 R f
(.)1767 4206 w
12 S f
(_ __________________________________________________________________\347)1 3982 1 970 4281 t
(\347)4952 4230 w
(\347)4952 4110 w
(\347)4952 3990 w
(\347)4952 3870 w
(\347)4952 3750 w
(\347)4952 3630 w
(\347)4952 3510 w
(\347)4952 3390 w
(\347)4952 3270 w
(\347)4952 3150 w
(\347)4952 3030 w
(\347)4952 2910 w
(\347)4952 2790 w
(\347)4952 2670 w
(\347)4952 2550 w
(\347)4952 2430 w
(\347)4952 2310 w
(\347)4952 2190 w
(\347)4952 2070 w
(\347)4952 1950 w
(\347)4952 1830 w
(\347)4952 1710 w
(\347)4952 1590 w
(\347)4952 1470 w
(\347)4952 1350 w
(_ __________________________________________________________________)1 3982 1 970 1230 t
(\347)970 1350 w
(\347)970 1401 w
(\347)970 1521 w
(\347)970 1641 w
(\347)970 1761 w
(\347)970 1881 w
(\347)970 2001 w
(\347)970 2121 w
(\347)970 2241 w
(\347)970 2361 w
(\347)970 2481 w
(\347)970 2601 w
(\347)970 2721 w
(\347)970 2841 w
(\347)970 2961 w
(\347)970 3081 w
(\347)970 3201 w
(\347)970 3321 w
(\347)970 3441 w
(\347)970 3561 w
(\347)970 3681 w
(\347)970 3801 w
(\347)970 3921 w
(\347)970 4041 w
(\347)970 4161 w
(\347)970 4281 w
11 B f
(Figure 4.)1 422 1 1478 4603 t
11 R f
(General schema for a simulated annealing algorithm.)6 2326 1 1956 4603 t
12 R f
( dichotomy between the way the schema of)7 2196(From the beginning, there has been a)6 1874 2 970 5011 t
( theory, simulated annealing can be)5 1722( In)1 164(Figure 4 is implemented in practice and in theory.)8 2434 3 720 5161 t
( can be)2 385( discussed in Chapter 4, the process)6 1844( As)1 215(viewed as an optimization algorithm.)4 1876 4 720 5311 t
( solution if)2 543(interpreted in terms of Markov chains and proved to converge to an optimal)12 3777 2 720 5461 t
( no more quickly than)4 1087(one insures that the temperature drops)5 1868 2 720 5611 t
12 I f
(C /)1 124 1 3713 5611 t
12 R f
(log)3847 5611 w
12 I f
(n)4041 5611 w
12 R f
(, where)1 360 1 4101 5611 t
12 I f
(C)4499 5611 w
12 R f
(is a con-)2 423 1 4617 5611 t
(stant and)1 440 1 720 5761 t
12 I f
(n)1199 5761 w
12 R f
( to)1 132( however, the convergence)3 1311( Typically,)1 560(is the number of steps taken so far.)7 1739 4 1298 5761 t
( such a temperature schedule will take longer than finding such)10 3077(an optimal solution under)3 1243 2 720 5911 t
( such theoretical results are essentially irrelevant to)7 2477( Thus)1 302( by exhaustive search.)3 1066(a solution)1 475 4 720 6061 t
(what can be accomplished in practice.)5 1827 1 720 6211 t
( al. [1983] and Cerny [1985], researchers have)7 2312(Instead, starting with Kirkpatrick et)4 1758 2 970 6397 t
( much more rapidly, say)4 1277(tended to use cooling schedules that drop the temperatures)8 3043 2 720 6547 t
(roughly as)1 519 1 720 6697 t
12 I f
(C)1284 6697 w
9 I f
(n)1379 6649 w
12 R f
(, where)1 367 1 1434 6697 t
12 I f
(C)1846 6697 w
12 S f
(<)1976 6697 w
12 R f
( can be realized for instance by performing a fixed)9 2568(1. This)1 380 2 2092 6697 t
( ``equilibrium'')1 760(number of trials at each temperature, after which one arbitrarily declares)10 3560 2 720 6847 t
( such an)2 417( Under)1 371(and reduces the temperature by a standard factor, say 0.95.)9 2928 3 720 6997 t
12 I f
(exponential)4479 6997 w
(cooling)720 7147 w
12 R f
( of time reach)3 676(regime, the temperature will after a polynomially-bounded amount)7 3248 2 1116 7147 t
( be accepted and we can)5 1185(values sufficiently close to zero that uphill moves will no longer)10 3135 2 720 7297 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 48 48
%%Page: 49 49
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
49 pagesetup
12 R f
(- 49 -)2 260 1 2750 500 t
( happens even when, as Kirkpatrick et al. originally)8 2531( This)1 282(declare freezing to have set in.)5 1507 3 720 870 t
(suggested, one starts at a temperature)5 1816 1 720 1020 t
12 I f
(T)2570 1020 w
12 R f
( sufficiently high that essentially)4 1593(that is)1 296 2 2671 1020 t
12 I f
(all)4595 1020 w
12 R f
(uphill)4758 1020 w
( polynomially-bounded cooling schedule, simulated)4 2592( such a)2 383( With)1 326(moves are accepted.)2 1019 4 720 1170 t
( all our other local search variants\),)6 1789(annealing is only an approximation algorithm \(like)6 2531 2 720 1320 t
( far)1 166( so)1 141( Theory)1 410(but it would be hard to expect more for an NP-hard problem like the TSP.)14 3603 4 720 1470 t
( to say about this polynomial-time bounded version of simulated annealing,)10 3883(has little)1 437 2 720 1620 t
( context of specially invented problems and neighborhood structures; again)9 3688(except in the)2 632 2 720 1770 t
(see Chapter 4.)2 683 1 720 1920 t
( we shall see, there are)5 1131( As)1 202( concentrate on empirical results.)4 1629(In this section we thus)4 1108 4 970 2106 t
( an intelligently implemented simulated annealing algo-)6 2725(broad performance ranges where)3 1595 2 720 2256 t
( Even)1 314( competition been 2- and 3-Opt.)5 1575(rithm would be the method of choice had its only)9 2431 3 720 2406 t
( the)1 178(Lin-Kernighan cannot beat it across the board \(although)7 2706 2 720 2556 t
12 I f
(Iterated Lin-Kernighan)1 1127 1 3635 2556 t
12 R f
(algo-)4793 2556 w
( powerful alternatives might not exist in other prob-)8 2541( Such)1 306(rithm of the next section can\).)5 1473 3 720 2706 t
( broader significance,)2 1065( the lessons learned here may be of)7 1789( Thus)1 315(lem domains, however.)2 1151 4 720 2856 t
( to spell out some of the key algorithmic issues and ideas that)12 3027(and it is worth taking time)5 1293 2 720 3006 t
(are relevant to creating an effective implementation of simulated annealing for the TSP.)12 4320 1 720 3156 t
( what follows is derived from the study of Johnson, Aragon, McGeoch, and)12 3889(Much of)1 431 2 720 3306 t
(Rothberg [1996], to which the reader is referred for additional technical details.)11 3821 1 720 3456 t
( the)1 180(We begin in Section 5.1 by defining a baseline implementation similar to that of)13 3890 2 970 3642 t
( Section 5.2 we describe)4 1174( In)1 161( behavior.)1 481(original Kirkpatrick et al. paper and reporting on its)8 2504 4 720 3792 t
( starts, that pro-)3 789(and evaluate two key ideas, neighborhood pruning and low-temperature)8 3531 2 720 3942 t
( be competi-)2 617(vide more-than-constant-factor speedups and are essential if annealing is to)9 3703 2 720 4092 t
( devoted to other ideas for)5 1323( 5.3 is)2 315( Section)1 433(tive with our more traditional TSP heuristics.)6 2249 4 720 4242 t
( Section 5.4 discusses)3 1076( Finally,)1 441( and/or helping it find better tours.)6 1709(speeding up annealing)2 1094 4 720 4392 t
( thresholds rather than probabilities govern the)6 2395(variants of simulated annealing where)4 1925 2 720 4542 t
(decision on whether to accept a move.)6 1837 1 720 4692 t
14 B f
( Baseline Implementation of Simulated Annealing for the TSP)8 3692(5.1. A)1 381 2 720 5022 t
12 R f
( to the TSP, both Kirkpatrick et al. [1983] and Cerny)10 2726(In adapting simulated annealing)3 1594 2 720 5245 t
( neighborhood structure based on 2-Opt moves, just as was later)10 3110([1985] suggested using a)3 1210 2 720 5395 t
( simpler move in which the posi-)6 1620( [1985] also considered the)4 1321( Cerny)1 358(done for tabu search.)3 1021 4 720 5545 t
( segment between them is left unchanged, but)7 2231(tions of two cities are interchanged but the)7 2089 2 720 5695 t
( results in these)3 752( The)1 248( this was not as effective an approach.)7 1841(experiments demonstrated that)2 1479 4 720 5845 t
( and running)2 643(two original papers were unfortunately limited mainly to small examples)9 3677 2 720 5995 t
( run the algorithm on one problem)6 1692( et al. [1983] did)4 822( Kirkpatrick)1 620(times were not reported.)3 1186 4 720 6145 t
( not provide any detailed information)5 1834(of reasonable size \(some 6000 cities\), but they did)8 2486 2 720 6295 t
( the value of)3 636( Thus)1 313(on the quality of the solution found, other than that it was ``good.'')12 3371 3 720 6445 t
(simulated annealing for the TSP was initially unclear.)7 2586 1 720 6595 t
( serious defect in the above straightforward)6 2214(There does, however, appear to be a)6 1856 2 970 6781 t
( we shall see, the number of)6 1434( As)1 208( simulated annealing to the TSP.)5 1639(approach to adapting)2 1039 4 720 6931 t
( \(which we shall call the)5 1176(steps at each temperature)3 1211 2 720 7081 t
12 I f
(temperature length)1 919 1 3138 7081 t
12 R f
(\) needs to be at least)5 983 1 4057 7081 t
( is)1 112( This)1 275( quality.)1 396(proportional to the neighborhood size if we are to obtain worthwhile tour)11 3537 4 720 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 49 49
%%Page: 50 50
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
50 pagesetup
12 R f
(- 50 -)2 260 1 2750 500 t
( for problems like graph partitioning, where typical neighbor-)8 2970(not too onerous a restriction)4 1350 2 720 870 t
(hood sizes are)2 684 1 720 1020 t
12 I f
(O)1436 1020 w
12 R f
(\()1532 1020 w
12 I f
(N)1582 1020 w
12 R f
(\) \([Kirkpatrick et al., 1983], [Johnson, Aragon, McGeoch & Schevon,)9 3368 1 1672 1020 t
( the size is proportional to)5 1259( the 2-Opt TSP neighborhood, however,)5 1923(1989]\). For)1 577 3 720 1170 t
12 I f
(N)4510 1170 w
9 R f
(2)4605 1122 w
12 R f
(, so that)2 380 1 4660 1170 t
( temperatures considered does not grow with)6 2155(even if the number of distinct)5 1425 2 720 1320 t
12 I f
(N)4330 1320 w
12 R f
(, we will still)3 630 1 4410 1320 t
(have an algorithm whose running time is at least)8 2364 1 720 1470 t
12 S f
(Q)3118 1470 w
12 R f
(\()3217 1470 w
12 I f
(N)3267 1470 w
9 R f
(2)3362 1422 w
12 R f
( propor-)1 395(\) with a large constant of)5 1218 2 3427 1470 t
( may well be faster than the)6 1388( this)1 216(tionality. Although)1 958 3 720 1620 t
12 S f
(W)3322 1620 w
12 R f
(\()3424 1620 w
12 I f
(N)3474 1620 w
9 R f
(3)3569 1572 w
12 R f
(\) we saw for straightforward)4 1406 1 3634 1620 t
( structure, the real compe-)4 1278(tabu search implementations based on the 2-Opt neighborhood)7 3042 2 720 1770 t
( is not tabu search but 3-Opt and Lin-Kernighan, which as)10 2871(tition for simulated annealing)3 1449 2 720 1920 t
(we have already seen are both decidedly subquadratic up to)9 2856 1 720 2070 t
12 I f
(N)3606 2070 w
12 S f
(=)3736 2070 w
12 R f
(10)3852 2070 w
9 R f
(6)3979 2022 w
12 R f
(.)4034 2070 w
( implementa-)1 645(This issue is illustrated in Table 9, which reports results for a baseline)12 3425 2 970 2256 t
( due to Johnson, Aragon, McGeoch and Schevon [1996],)8 2928(tion of simulated annealing)3 1392 2 720 2406 t
(which in what follows we shall denote by SA)8 2237 1 720 2556 t
9 R f
(1)2972 2580 w
12 R f
( the random geometric)3 1109( table covers)2 621(. The)1 283 3 3027 2556 t
(instances in our testbed with)4 1434 1 720 2706 t
12 I f
(N)2200 2706 w
12 R f
( the temperature)2 811( these runs)2 546( For)1 243(= 100, 316, and 1000.)4 1114 4 2326 2706 t
( length was)2 549(reduction factor was 0.95, the temperature)5 2031 2 720 2856 t
12 I f
(N)3331 2856 w
12 R f
(\()3421 2856 w
12 I f
(N)3471 2856 w
12 S f
(-)3581 2856 w
12 R f
( and the starting tempera-)4 1233(1 \),)1 140 2 3667 2856 t
(ture was such that only about 3)6 1507 1 720 3006 t
12 I f
(%)2227 3006 w
12 R f
( speed up run-)3 686( To)1 194( were rejected.)2 704(of the proposed moves)3 1097 4 2359 3006 t
( 4, but)2 328(ning times, we do not explicitly compute the exponential in Step 3.1.4 of Figure)13 3992 2 720 3156 t
( table lookup scheme of Johnson, Aragon, McGeoch, and)8 2812(instead find its value using the)5 1508 2 720 3306 t
( runs for each 100-city testbed)5 1608( table reports averages over 10)5 1615( The)1 275(Schevon [1989].)1 822 4 720 3456 t
( is not enough to obtain)5 1158( This)1 279( 5 runs for each of the larger testbed instances.)9 2280(instance and)1 603 4 720 3606 t
( algorithms,)1 581( with our other)3 723( \(As)1 237(tight confidence intervals, but enough to illustrate trends.)7 2779 4 720 3756 t
( the same)2 522(there is a considerable variation between instances and between runs on)10 3798 2 720 3906 t
(instance when)1 683 1 720 4056 t
12 I f
(N)1433 4056 w
12 S f
(=)1563 4056 w
12 R f
(100, although this shrinks as)4 1374 1 1679 4056 t
12 I f
(N)3083 4056 w
12 R f
(increases.\))3193 4056 w
10 S f
(_ ____________________________________________________)1 2607 1 1576 4211 t
10 R f
(Random Euclidean Instances)2 1159 1 2300 4331 t
10 S f
(_ ____________________________________________________)1 2607 1 1576 4381 t
10 R f
(10)3244 4531 w
7 R f
(2)3349 4491 w
10 R f
(10)3571 4531 w
7 R f
(2. 5)1 93 1 3676 4491 t
10 R f
(10)3956 4531 w
7 R f
(3)4061 4491 w
10 S f
(_ ____________________________________________________)1 2607 1 1576 4581 t
10 R f
(SA)1626 4731 w
7 R f
(1)1765 4751 w
10 R f
( 3170)1 356( 188)1 356( 12.4)1 546(Running Time in Seconds)3 1042 4 1833 4731 t
( 0.09 0.34)2 712( 0.03)1 495(2-Opt Running Time in Seconds)4 1300 3 1626 4911 t
( 0.11 0.41)2 712( 0.04)1 495(3-Opt Running Time in Seconds)4 1300 3 1626 5031 t
( 0.20 0.77)2 712( 0.06)1 595(LK Running Time in Seconds)4 1200 3 1626 5151 t
10 S f
(_ ____________________________________________________)1 2607 1 1576 5201 t
10 R f
( 143 171)2 712( 117)1 787(Number of Temperatures)2 1008 3 1626 5351 t
10 S f
(_ ____________________________________________________)1 2607 1 1576 5401 t
10 R f
(Average SA)1 490 1 1626 5551 t
7 R f
(1)2127 5571 w
10 R f
( 4.1 4.1)2 712( 5.2)1 487(Percentage Excess)1 739 3 2195 5551 t
(Average SA)1 490 1 1626 5671 t
7 R f
(1)2127 5691 w
10 R f
( 3.4 3.7 4.0)3 1068(Excess after 2-Opting)2 870 2 2195 5671 t
( 4.8 4.9)2 712( 4.5)1 898(Average 2-Opt Excess)2 897 3 1626 5821 t
( 2.5 3.1)2 712( 2.5)1 898(Average 3-Opt Excess)2 897 3 1626 5941 t
( 1.7 2.0)2 712( 1.5)1 998(Average LK Excess)2 797 3 1626 6061 t
10 S f
( \347)1 -2607(_ ____________________________________________________)1 2607 2 1576 6111 t
(\347)1576 6011 w
(\347)1576 5911 w
(\347)1576 5811 w
(\347)1576 5711 w
(\347)1576 5611 w
(\347)1576 5511 w
(\347)1576 5411 w
(\347)1576 5311 w
(\347)1576 5211 w
(\347)1576 5111 w
(\347)1576 5011 w
(\347)1576 4911 w
(\347)1576 4811 w
(\347)1576 4711 w
(\347)1576 4611 w
(\347)1576 4511 w
(\347)1576 4411 w
(\347)1576 4311 w
(\347)3140 6111 w
(\347)3140 6081 w
(\347)3140 5981 w
(\347)3140 5881 w
(\347)3140 5781 w
(\347)3140 5681 w
(\347)3140 5581 w
(\347)3140 5481 w
(\347)3140 5381 w
(\347)3140 5281 w
(\347)3140 5181 w
(\347)3140 5081 w
(\347)3140 4981 w
(\347)3140 4881 w
(\347)3140 4781 w
(\347)3140 4681 w
(\347)3140 4581 w
(\347)3140 4481 w
(\347)4183 6111 w
(\347)4183 6011 w
(\347)4183 5911 w
(\347)4183 5811 w
(\347)4183 5711 w
(\347)4183 5611 w
(\347)4183 5511 w
(\347)4183 5411 w
(\347)4183 5311 w
(\347)4183 5211 w
(\347)4183 5111 w
(\347)4183 5011 w
(\347)4183 4911 w
(\347)4183 4811 w
(\347)4183 4711 w
(\347)4183 4611 w
(\347)4183 4511 w
(\347)4183 4411 w
(\347)4183 4311 w
11 B f
(Table 9.)1 381 1 903 6351 t
11 R f
(Results for SA)2 649 1 1340 6351 t
8 R f
(1)2002 6373 w
11 R f
(using the full 2-Opt neighborhood and high initial temperature.)8 2778 1 2079 6351 t
12 R f
( with)1 272(Note that because the number of temperatures grows)7 2720 2 970 6669 t
12 I f
(N)4020 6669 w
12 R f
(, the running time)3 940 1 4100 6669 t
( the end)2 394( of this growth takes place at)6 1430( Most)1 316(growth rate is actually worse than quadratic.)6 2180 4 720 6819 t
( solu-)1 276(of the annealing schedule, when very few moves are being accepted but the current)13 4044 2 720 6969 t
( process is not considered)4 1307( this implementation, the)3 1256( In)1 179(tion is still not locally optimal.)5 1578 4 720 7119 t
( consecutive temperatures have passed without a new champion solution)9 3640(frozen until 5)2 680 2 720 7269 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 50 50
%%Page: 51 51
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
51 pagesetup
12 R f
(- 51 -)2 260 1 2750 500 t
( going above 2)3 713(and without the acceptance percentage)4 1860 2 720 870 t
12 I f
(%)3293 870 w
12 R f
(. As)1 224 1 3393 870 t
12 I f
(N)3648 870 w
12 R f
(grows, so does the propor-)4 1281 1 3759 870 t
( the acceptance percentage below this threshold \(while the tour)9 3169(tion of time spent with)4 1151 2 720 1020 t
( typically not 2-optimal, and so this)6 1782( so, the final tours are)5 1107( Even)1 319(continues to improve\).)2 1112 4 720 1170 t
( Note)1 305( a post-processing phase in which 2-Opt is applied.)8 2549(annealing implementation has)2 1466 3 720 1320 t
( effect of this post-processing on tour length is substantial for)10 2955(that the percentage)2 909 2 720 1470 t
12 I f
(N)4614 1470 w
12 S f
(=)4744 1470 w
12 R f
(100)4860 1470 w
( significantly as)2 783(but decreases)1 652 2 720 1620 t
12 I f
(N)2195 1620 w
12 R f
( final tour quality degrades slightly as)6 1879(increases. The)1 726 2 2315 1620 t
12 I f
(N)4960 1620 w
12 R f
( when)1 313(increases, but this is also true for 2-Opt, 3-Opt, and Lin-Kernighan)10 3457 2 720 1770 t
12 I f
(N)4544 1770 w
12 S f
(\243)4664 1770 w
12 R f
(1000.)4770 1770 w
( size constant, as we have)5 1288(Thus holding the ratio of temperature length to neighborhood)8 3032 2 720 1920 t
( appears to provide roughly a constant level of performance relative to those)12 3808(done here,)1 512 2 720 2070 t
(competitors, independent of)2 1346 1 720 2220 t
12 I f
(N)2096 2220 w
12 R f
( a temperature length simply equal to the neigh-)8 2313(. Choosing)1 551 2 2176 2220 t
( percentage)1 557( average final)2 671( The)1 255(borhood size has not yielded impressive results, however.)7 2837 4 720 2370 t
(excesses, although better than those for 2-Opt, are not as good as those for 3-Opt.)14 3913 1 720 2520 t
(In summary, this baseline implementation SA)5 2227 1 970 2706 t
9 R f
(1)3212 2730 w
12 R f
( 3-Opt on)2 470(produces worse tours than)3 1269 2 3301 2706 t
(average, while taking almost 300 times as long when)8 2651 1 720 2856 t
12 I f
(N)3414 2856 w
12 S f
(=)3544 2856 w
12 R f
( 7500 times as)3 728(100 and over)2 652 2 3660 2856 t
(long when)1 504 1 720 3006 t
12 I f
(N)1255 3006 w
12 S f
(=)1385 3006 w
12 R f
( annealing, however, bet-)3 1222( one is willing to spend even more time)8 1906(1000. If)1 411 3 1501 3006 t
( a factor of 10 \(by increasing tem-)7 1652( running time by)3 808( Increasing)1 563(ter results can be obtained.)4 1297 4 720 3156 t
(perature length to 10)3 1019 1 720 3306 t
12 I f
(N)1749 3306 w
12 R f
(\()1839 3306 w
12 I f
(N)1889 3306 w
12 S f
(-)1999 3306 w
12 R f
( final percentage excess for)4 1345( reduces the average)3 996(1 \)\))1 150 3 2085 3306 t
12 I f
(N)4614 3306 w
12 S f
(=)4744 3306 w
12 R f
(100)4860 3306 w
(from 3.4)1 418 1 720 3456 t
12 I f
(%)1138 3456 w
12 R f
(to 1.9)1 278 1 1272 3456 t
12 I f
(%)1550 3456 w
12 R f
( This)1 277( as long\).)2 450(, significantly better than 3-Opt \(but taking 3000 times)8 2663 3 1650 3456 t
(new excess is still worse than the 1.5)7 1804 1 720 3606 t
12 I f
(%)2524 3606 w
12 R f
( tempera-)1 462( Increasing)1 565(of Lin-Kernighan, however.)2 1355 3 2658 3606 t
( the average final percentage excess for)6 2066(ture length by another factor of 10 reduces)7 2254 2 720 3756 t
12 I f
(N)720 3906 w
12 S f
(=)850 3906 w
12 R f
(100 to 1.3)2 484 1 966 3906 t
12 I f
(%)1450 3906 w
12 R f
(, now better than Lin-Kernighan \(but taking 20,000 times as long\).)10 3201 1 1550 3906 t
(Such increases in temperature length are not a practical option as)10 3134 1 970 4092 t
12 I f
(N)4135 4092 w
12 R f
( given)1 299(gets large,)1 495 2 4246 4092 t
(the quadratic growth in running time for SA)7 2491 1 720 4242 t
9 R f
(1)3226 4266 w
12 R f
(: Using a temperature length of)5 1759 1 3281 4242 t
(100)720 4392 w
12 I f
(N)910 4392 w
12 R f
(\()1000 4392 w
12 I f
(N)1050 4392 w
12 S f
(-)1160 4392 w
12 R f
( for)1 175(1 \))1 110 2 1246 4392 t
12 I f
(N)1566 4392 w
12 S f
(=)1696 4392 w
12 R f
( times that for LK,)4 916(1000 would yield a running time some 400,000)7 2312 2 1812 4392 t
( the fact that simulated annealing can)6 1814( Moreover,)1 568(i.e., some 3.5 days versus 0.77 seconds.)6 1938 3 720 4542 t
(do better than LK if allowed to spend so much more time is not necessarily an argument)16 4320 1 720 4692 t
( shall consider more)3 1026( We)1 244( too can profit from extra time.)6 1595( Lin-Kernighan)1 792(on its behalf.)2 663 5 720 4842 t
( in Section 6, but even a very simple scheme,)9 2254(sophisticated ways of using the extra time)6 2066 2 720 4992 t
( taking the best solution found,)5 1526(such as performing multiple independent runs of LK and)8 2794 2 720 5142 t
( instance, simply taking the best of 100 different runs of LK \(using)12 3288( For)1 233(can be effective.)2 799 3 720 5292 t
( percentage excess of)3 1046(independently chosen randomized Greedy starts\) yields an average)7 3274 2 720 5442 t
(0.9)720 5592 w
12 I f
(%)870 5592 w
12 R f
(for)1001 5592 w
12 I f
(N)1172 5592 w
12 S f
(=)1302 5592 w
12 R f
( above for SA, and still in signifi-)7 1632(100, better than the best average reported)6 1990 2 1418 5592 t
( one run, since)3 715( these 100 runs take only 70 times as long as)10 2204( \(Moreover,)1 609(cantly less time.)2 792 4 720 5742 t
( construction only needs to be performed once and so can be)11 3168(the initial neighbor-list)2 1152 2 720 5892 t
(amortized across all 100 runs.\))4 1479 1 720 6042 t
( to be useful for the TSP, we need to find ways to get)13 2607(Thus if simulated annealing is)4 1463 2 970 6228 t
( simultaneously reducing the)3 1459(the effect of longer temperature lengths while somehow)7 2861 2 720 6378 t
( clear that speeding up the algorithm)6 1829( is intuitively)2 660( It)1 145(overall running time substantially.)3 1686 4 720 6528 t
( make)1 297(by simply reducing the temperature length \(or using fewer temperatures\) can only)11 4023 2 720 6678 t
( follow-ups on Kirkpatrick et al. [1983] that in effect)9 2546( Early)1 321( tour length worse.)3 904(the average)1 549 4 720 6828 t
( and Golden and Skis-)4 1107(took this approach, such as Nahar, Sahni, and Shragowitz [1984])9 3213 2 720 6978 t
( to just 6 temperatures)4 1202( et. al restricted their runs)5 1390( Nahar)1 384(cim [1986], bear this out.)4 1344 4 720 7128 t
( and adjusted the temperature length to keep)7 2210(\(obtained using a reduction factor of 0.90\))6 2110 2 720 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 51 51
%%Page: 52 52
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
52 pagesetup
12 R f
(- 52 -)2 260 1 2750 500 t
( and Skis-)2 483( Golden)1 414( time.)1 276(the overall time within a fixed low multiple of the Lin-Kernighan)10 3147 4 720 870 t
( as an adap-)3 596(cim used 25 temperatures \(evenly rather than geometrically spaced\) as well)10 3724 2 720 1020 t
( whose average)2 766(tive temperature length that varied from temperature to temperature but)9 3554 2 720 1170 t
( likely to grow as)4 859(value was not)2 674 2 720 1320 t
12 I f
(N)2289 1320 w
9 R f
(2)2384 1272 w
12 R f
( as comparisons can be made, both resulting)7 2165(. Insofar)1 436 2 2439 1320 t
(algorithms appear to have found worse tours than those found by SA)11 3306 1 720 1470 t
9 R f
(1)4041 1494 w
12 R f
(, while still remain-)3 944 1 4096 1470 t
( Lin-)1 277(ing significantly slower than the neighbor-list implementations of 3-Opt and)9 4043 2 720 1620 t
(Kernighan.)720 1770 w
14 B f
( Speed-Up Techniques)2 1339(5.2. Key)1 521 2 720 2100 t
12 R f
( and Lutton [1984] described two)5 1634( Bonomi)1 454( fortunately.)1 594(Effective speed-up ideas do exist,)4 1638 4 720 2323 t
(key ones in another early follow-up to the Kirkpatrick et al. [1983] paper.)12 3536 1 720 2473 t
14 I f
(Neighborhood Pruning)1 1304 1 720 2803 t
12 R f
( Although)1 535( more crucial\) idea was to prune the neighborhood structure.)9 3091(The first \(and)2 694 3 720 3026 t
(there are)1 429 1 720 3176 t
12 S f
(Q)1192 3176 w
12 R f
(\()1291 3176 w
12 I f
(N)1341 3176 w
9 R f
(2)1436 3128 w
12 R f
(\) possible 2-Opt moves that can be made from any tour, a 2-Opt move)13 3539 1 1501 3176 t
( good tour will typically make things much worse, and)9 2688(that introduces a long edge into a)6 1632 2 720 3326 t
( exclude such moves)3 1024( we can find a way to)6 1085( If)1 150(hence is unlikely to be accepted.)5 1611 4 720 3476 t
12 I f
(a priori)1 381 1 4629 3476 t
12 R f
(,)5010 3476 w
( be able to greatly speed up the algorithm without significant loss in perfor-)13 3853(we might)1 467 2 720 3626 t
( to geometric)2 661( and Lutton suggested the following approach, applicable)7 2854(mance. Bonomi)1 805 3 720 3776 t
( implementation of 2-Opt itself, let us view a 2-Opt move as deter-)12 3318( in our)2 330(instances. As)1 672 3 720 3926 t
(mined by a choice of a city)6 1313 1 720 4076 t
12 I f
(t)2065 4076 w
9 R f
(1)2114 4100 w
12 R f
(, one of its tour neighbors)5 1246 1 2169 4076 t
12 I f
(t)3447 4076 w
9 R f
(2)3496 4100 w
12 R f
(, and a third city)4 793 1 3551 4076 t
12 I f
(t)4375 4076 w
9 R f
(3)4424 4100 w
12 R f
(which is to)2 530 1 4510 4076 t
(replace)720 4226 w
12 I f
(t)1102 4226 w
9 R f
(1)1151 4250 w
12 R f
(as a tour neighbor of)4 1018 1 1242 4226 t
12 I f
(t)2296 4226 w
9 R f
(2)2345 4250 w
12 R f
( of)1 137( restrict the choice)3 903(. We)1 262 3 2400 4226 t
12 I f
(t)3739 4226 w
9 R f
(3)3788 4250 w
12 R f
( the)1 184( Identify)1 448(as follows.)1 528 3 3880 4226 t
( all the cities, and divide it up into)8 1659(smallest square containing)2 1283 2 720 4376 t
12 I f
(m)3694 4376 w
9 R f
(2)3795 4328 w
12 R f
(grid cells for some inte-)4 1158 1 3882 4376 t
(ger)720 4526 w
12 I f
(m)907 4526 w
12 R f
( consider for)2 615(. Then)1 340 2 993 4526 t
12 I f
(t)1982 4526 w
9 R f
(3)2031 4550 w
12 R f
( same cell as)3 626(only those cities that are either in the)7 1803 2 2120 4526 t
12 I f
(t)4584 4526 w
9 R f
(2)4633 4550 w
12 R f
(or in a)2 317 1 4723 4526 t
( one)1 210( random geometric instances with uniformly distributed cities,)7 3052( For)1 235(neighboring cell.)1 823 4 720 4676 t
(can reduce the expected number of choices for)7 2277 1 720 4833 t
12 I f
(t)3033 4833 w
9 R f
(3)3082 4857 w
12 R f
(to)3173 4833 w
12 I f
(O)3304 4833 w
12 R f
( by choosing)2 628(\( 1 \))2 160 2 3400 4833 t
12 I f
(m)4225 4833 w
12 R f
(to be)1 244 1 4348 4833 t
12 S f
(Q)4629 4833 w
12 R f
(\()4728 4833 w
13 S f
(\326` `)1 172 1 4778 4833 t
12 I f
(N)4860 4833 w
12 R f
(\).)4970 4833 w
( reduces the expected number of neighbors of a given tour from)11 3201(This in turn)2 590 2 720 4983 t
12 S f
(Q)4554 4983 w
12 R f
(\()4653 4983 w
12 I f
(N)4703 4983 w
9 R f
(2)4798 4935 w
12 R f
(\) to)1 177 1 4863 4983 t
12 S f
(Q)720 5133 w
12 R f
(\()819 5133 w
12 I f
(N)869 5133 w
12 R f
( Lutton combined neighborhood pruning with the following addi-)8 3320( and)1 223(\). Bonomi)1 538 3 959 5133 t
(tional key idea.)2 738 1 720 5283 t
14 I f
(Low Temperature Starts)2 1364 1 720 5613 t
12 R f
( of the annealing schedule)4 1290(The second idea was to abandon the high temperature portion)9 3030 2 720 5836 t
( reduce the probability that the)5 1553( To)1 210(and instead start with a relatively low temperature.)7 2557 3 720 5986 t
( an unproductive region, they proposed using a)7 2318(process might be immediately trapped in)5 2002 2 720 6136 t
( \(as in traditional local optimiza-)5 1626(tour construction heuristic to generate the starting tour)7 2694 2 720 6286 t
( by Kirkpatrick [1984], who)4 1374( idea of low temperature starts was also proposed)8 2409(tion\). This)1 537 3 720 6436 t
(used it without neighborhood pruning but still got sufficient speedups to make longer)12 4320 1 720 6586 t
( results obtainable by baseline)4 1562(temperature lengths possible and thus improve on the)7 2758 2 720 6736 t
(implementations like SA)2 1216 1 720 6886 t
9 R f
(1)1951 6910 w
12 R f
( Nearest Neighbor starting tours on 400- and 900-city)8 2648(. Using)1 386 2 2006 6886 t
( instances, he appears to have obtained average percentage excesses of)10 3438(random geometric)1 882 2 720 7036 t
(roughly 2.1)1 563 1 720 7186 t
12 I f
(%)1283 7186 w
12 R f
(and 2.4)1 362 1 1422 7186 t
12 I f
(%)1784 7186 w
12 R f
( than those for Lin-Kernighan.)4 1496(, respectively, only slightly worse)4 1660 2 1884 7186 t
( average)1 448(Kirkpatrick used the rectilinear as opposed to the Euclidean metric, but)10 3872 2 720 7336 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 41 536 764
%%EndPage: 52 52
%%Page: 53 53
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
53 pagesetup
12 R f
(- 53 -)2 260 1 2750 500 t
( significantly effected by)3 1223(percentage excesses for 2-Opt, 3-Opt, and LK typically are not)9 3097 2 720 870 t
( did not compute the Held-Karp lower bounds for his)9 2813( He)1 228( change in metric.)3 948(such a)1 331 4 720 1020 t
( the average)2 627(instances, so we have estimated his average percentage excess based on)10 3693 2 720 1170 t
( using the tech-)3 756(Held-Karp lower bound for instances of this type and size, as determined)11 3564 2 720 1320 t
(niques of Johnson, McGeoch, and Rothberg [1996].)6 2490 1 720 1470 t
14 I f
(Combining the Two)2 1106 1 720 1800 t
12 R f
( done)1 267(Combining the two ideas of low-temperature starts and neighborhood pruning, as is)11 4053 2 720 2023 t
( tours,)1 331( starting)1 423( For)1 258(by Bonomi and Lutton [1984], should yield even better results.)9 3308 4 720 2173 t
( by stringing)2 655(Bonomi and Lutton [1984] used a simple heuristic that generates a tour)11 3665 2 720 2323 t
( one overall tour, with the tour for each cell)9 2224(together tours for the individual cells into)6 2096 2 720 2473 t
( concentrated on random Euclidean instances)5 2206( They)1 313(connected to tours in adjoining cells.)5 1801 3 720 2623 t
( of 50 temperatures with an initial temperature)7 2263(and used an annealing schedule consisting)5 2057 2 720 2773 t
(of)720 2930 w
12 I f
(L /)1 111 1 862 2930 t
13 S f
(\326` `)1 172 1 983 2930 t
12 I f
(N)1065 2930 w
12 R f
(, where)1 364 1 1165 2930 t
12 I f
(L)1571 2930 w
12 R f
( They)1 319( the cities are randomly placed.)5 1567(is the side of square in which)6 1474 3 1680 2930 t
( temperature length, but it)4 1315( do not specify their)4 1034( They)1 324(used a reduction factor of 0.925.)5 1647 4 720 3080 t
( neighborhood size, which for random geometric)6 2393(apparently grew more slowly than their)5 1927 2 720 3230 t
(instances can be expected to grow as)6 1820 1 720 3380 t
12 S f
(Q)2579 3380 w
12 R f
(\()2678 3380 w
12 I f
(N)2728 3380 w
12 R f
( means that the ratio of their tempera-)7 1870(\). This)1 352 2 2818 3380 t
(ture length to neighborhood size decreased as)6 2194 1 720 3530 t
12 I f
(N)2945 3530 w
12 R f
( the results summarized)3 1146(increased. Given)1 838 2 3056 3530 t
( sig-)1 218(in Table 9, this suggests that their average percentage excess should have increased)12 4102 2 720 3680 t
(nificantly as)1 610 1 720 3830 t
12 I f
(N)1378 3830 w
12 R f
( for)1 189( Although)1 533( seems to have been the case.)6 1517(increased, and this indeed)3 1295 4 1506 3830 t
( 400 cities they claim to have beaten 2-Opt substantially, this is not)12 3269(instances from 200 to)3 1051 2 720 3980 t
( 10,000-city random geometric instance.)4 2063(true for the one large instance they treat, a)8 2257 2 720 4130 t
( Johnson, McGeoch, and Rothberg [1996] for such)7 2499(Based on the Held-Karp estimates of)5 1821 2 720 4280 t
( roughly 6.9)2 600(instances, the tour length they report is likely to be)9 2503 2 720 4430 t
12 I f
(%)3823 4430 w
12 R f
(in excess of the Held-)4 1079 1 3961 4430 t
(Karp bound, far worse than the 5.0)6 1684 1 720 4580 t
12 I f
(%)2404 4580 w
12 R f
( all)1 152(that neighbor-list 2-Opt averaged on our testbed,)6 2352 2 2536 4580 t
( is diffi-)2 405( how well their implementation performs on the smaller instances)9 3221( Just)1 255(by itself!)1 439 4 720 4730 t
( annealing and 2-Opt)3 1010(cult to judge, as they only report normalized differences between the)10 3310 2 720 4880 t
( on the details of their \(unspeci-)6 1554(tour lengths, and the quality of the latter depends heavily)9 2766 2 720 5030 t
(fied\) implementation of 2-Opt.)3 1484 1 720 5180 t
( clearer idea of the advantages of low-temperature starts and neighborhood)10 3665(To get a)2 405 2 970 5366 t
( obvious draw-)2 734( An)1 213( added them to our baseline implementation.)6 2184(pruning for the TSP, we)4 1189 4 720 5516 t
( is that its ability to substan-)6 1439(back to the pruning scheme of Bonomi and Lutton [1984])9 2881 2 720 5666 t
( on the fact that the cities are)7 1386(tially reduce the overall neighborhood size depends crucially)7 2934 2 720 5816 t
( used a more robust scheme suggested by the implementation)9 3021( We)1 234(uniformly distributed.)1 1065 3 720 5966 t
( of the notation we used to describe that implementation,)9 2778(of neighbor-list 2-Opt: In terms)4 1542 2 720 6116 t
(we simply restrict)2 863 1 720 6266 t
12 I f
(t)1613 6266 w
9 R f
(3)1662 6290 w
12 R f
(to the nearest 20 neighbors of)5 1425 1 1747 6266 t
12 I f
(t)3202 6266 w
9 R f
(2)3251 6290 w
12 R f
( 40)1 151( results in at most)4 851(. This)1 304 3 3306 6266 t
12 I f
(N)4622 6266 w
12 R f
(neigh-)4733 6266 w
( All)1 215(bors for a given tour.)4 1015 2 720 6416 t
12 I f
(N)1980 6416 w
12 R f
(cities are candidates for)3 1138 1 2090 6416 t
12 I f
(t)3258 6416 w
9 R f
(1)3307 6440 w
12 R f
(, both tour neighbors of)4 1132 1 3362 6416 t
12 I f
(t)4524 6416 w
9 R f
(1)4573 6440 w
12 R f
(are can-)1 382 1 4658 6416 t
(didates for)1 532 1 720 6566 t
12 I f
(t)1304 6566 w
9 R f
(2)1353 6590 w
12 R f
(, and)1 255 1 1408 6566 t
12 I f
(t)1715 6566 w
9 R f
(4)1764 6590 w
12 R f
(is uniquely determined, given prior choices for)6 2386 1 1871 6566 t
12 I f
(t)4309 6566 w
9 R f
(1)4358 6590 w
12 R f
(,)4413 6566 w
12 I f
(t)4495 6566 w
9 R f
(2)4544 6590 w
12 R f
(, and)1 255 1 4599 6566 t
12 I f
(t)4906 6566 w
9 R f
(3)4955 6590 w
12 R f
(.)5010 6566 w
(\(Note that some of these 40)5 1325 1 720 6716 t
12 I f
(N)2055 6716 w
12 R f
(neighbors may actually represent the same tour.\))6 2340 1 2165 6716 t
( for)1 174(For improved performance, we augment the above static pruning rule)9 3363 2 970 6902 t
12 I f
(t)4541 6902 w
9 R f
(3)4590 6926 w
12 R f
(with an)1 361 1 4679 6902 t
( the beginning of each temperature)5 1686( At)1 183(additional dynamic one:)2 1171 3 720 7052 t
12 I f
(T)3793 7052 w
12 R f
(we restrict the neighbor)3 1147 1 3893 7052 t
(list for each city)3 782 1 720 7202 t
12 I f
(c)1533 7202 w
12 R f
(as follows: Let)2 717 1 1617 7202 t
12 I f
(c)2365 7202 w
12 S f
(\242)2428 7202 w
12 R f
(be the current tour neighbor of)5 1476 1 2489 7202 t
12 I f
(c)3996 7202 w
12 R f
(that is farther away.)3 960 1 4080 7202 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 55 536 764
%%EndPage: 53 53
%%Page: 54 54
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
54 pagesetup
12 R f
(- 54 -)2 260 1 2750 500 t
(When)720 870 w
12 I f
(t)1039 870 w
9 R f
(2)1088 894 w
12 S f
(=)1193 870 w
12 I f
(c)1309 870 w
12 R f
(at this temperature, candidates for)4 1645 1 1395 870 t
12 I f
(t)3073 870 w
9 R f
(3)3122 894 w
12 R f
( restricted to those cities)4 1179(will be)1 334 2 3210 870 t
12 I f
(c)4755 870 w
12 S f
(\242 \242)1 70 1 4818 870 t
12 R f
(on)4920 870 w
(the neighbor list for)3 1112 1 720 1020 t
12 I f
(c)1915 1020 w
12 R f
( that increases tour length by)5 1656(such that a 2-Opt move)4 1333 2 2051 1020 t
12 I f
(d)720 1170 w
12 R f
(\()790 1170 w
12 I f
(c)840 1170 w
12 R f
(,)903 1170 w
12 I f
(c)943 1170 w
12 S f
(\242 \242)1 70 1 1006 1170 t
12 R f
(\))1086 1170 w
12 S f
(-)1146 1170 w
12 I f
(d)1232 1170 w
12 R f
(\()1302 1170 w
12 I f
(c)1352 1170 w
12 R f
(,)1415 1170 w
12 I f
(c)1455 1170 w
12 S f
(\242)1518 1170 w
12 R f
( i.e., those cities)3 809(\) would be accepted with probability at least 0.01,)8 2499 2 1558 1170 t
12 I f
(c)4907 1170 w
12 S f
(\242 \242)1 70 1 4970 1170 t
12 R f
(for which)1 483 1 720 1320 t
12 I f
(e)1253 1320 w
9 S f
(-)1321 1272 w
9 R f
(\()1386 1272 w
9 I f
(d)1423 1272 w
9 R f
(\()1475 1272 w
9 I f
(c)1512 1272 w
9 R f
(,)1559 1272 w
9 I f
(c)1589 1272 w
9 S f
(\242 \242)1 53 1 1636 1272 t
9 R f
(\))1696 1272 w
9 S f
(-)1741 1272 w
9 I f
(d)1806 1272 w
9 R f
(\()1858 1272 w
9 I f
(c)1895 1272 w
9 R f
(,)1942 1272 w
9 I f
(c)1972 1272 w
9 S f
(\242)2019 1272 w
9 R f
(\) \))1 67 1 2049 1272 t
9 I f
(/ T)1 82 1 2123 1272 t
12 S f
(\263)2255 1320 w
12 R f
( that the neighbor lists are sorted by)7 1861( Assuming)1 568(0. 01.)1 250 3 2361 1320 t
( accomplished by simply maintaining a pointer to the last)9 2804(increasing distance, this can be)4 1516 2 720 1470 t
( to tem-)2 391( As)1 201( updated once per temperature.)4 1515(acceptable city on each list, with the pointers)7 2213 4 720 1620 t
( we leave that fixed at some constant multi-)8 2130(perature length in this dynamic environment,)5 2190 2 720 1770 t
(ple)720 1920 w
12 S f
(a)926 1920 w
12 R f
( i.e., at)2 384(of the total lengths of the initial neighbor lists,)8 2465 2 1061 1920 t
12 S f
(a)3970 1920 w
12 R f
(20)4056 1920 w
12 I f
(N)4186 1920 w
12 R f
(as opposed to)2 714 1 4326 1920 t
12 S f
(a)720 2070 w
12 I f
(N)806 2070 w
12 R f
(\()896 2070 w
12 I f
(N)946 2070 w
12 S f
(-)1056 2070 w
12 R f
( that this means that the effective tem-)7 1898( Note)1 301( for the unpruned neighborhood.)4 1589(1 \))1 110 4 1142 2070 t
(perature length actually increases as the dynamic pruning starts shrinking neighbor lists.)11 4320 1 720 2220 t
( is typically from the initial)5 1327(The increase)1 612 2 720 2370 t
12 S f
(a)2691 2370 w
12 R f
(times current total neighborhood size to 4 or 5)8 2241 1 2799 2370 t
(times that amount.)2 894 1 720 2520 t
( using Nearest Neigh-)3 1068(As to low temperature starts, we follow Kirkpatrick [1984] in)9 3002 2 970 2706 t
( Bonomi and Lutton [1984] in letting the initial tempera-)9 2741(bor starting tours, and we follow)5 1579 2 720 2856 t
(ture be proportional to)3 1121 1 720 3013 t
12 I f
(L /)1 111 1 1885 3013 t
13 S f
(\326` `)1 172 1 2006 3013 t
12 I f
(N)2088 3013 w
12 R f
( choose the)2 570(for random Euclidean instances, although we)5 2238 2 2232 3013 t
( 5)1 70(value 1.)1 390 2 720 3170 t
12 I f
(L /)1 111 1 1190 3170 t
13 S f
(\326` `)1 172 1 1311 3170 t
12 I f
(N)1393 3170 w
12 R f
(rather than the)2 714 1 1533 3170 t
12 I f
(L /)1 111 1 2287 3170 t
13 S f
(\326` `)1 172 1 2408 3170 t
12 I f
(N)2490 3170 w
12 R f
( results in an)3 639( This)1 283(of Bonomi and Lutton [1984].)4 1488 3 2630 3170 t
(initial acceptance rate of about 50)5 1700 1 720 3320 t
12 I f
(%)2420 3320 w
12 R f
( tour length initially to grow by)6 1608(, and it allows the)4 912 2 2520 3320 t
( other types of instances, we take this)7 1873( For)1 238(about a factor of two from its starting value.)8 2209 3 720 3470 t
(50)720 3620 w
12 I f
(%)840 3620 w
12 R f
( determine an appropriate starting temperature)5 2252(initial accept rate as our criterion and)6 1814 2 974 3620 t
( it appears that multiplying the length of the)8 2274(by trial and error, although in retrospect)6 2046 2 720 3770 t
( 5)1 70( \(1.)1 164(Nearest Neighbor tour by)3 1232 3 720 3920 t
12 I f
(/ N)1 124 1 2196 3920 t
12 R f
(\) typically gives a reasonable value, at least for geomet-)9 2720 1 2320 3920 t
( the temperature reduction factor of 0.95 from our baseline)9 3075( retain)1 333( We)1 255(ric instances.)1 657 4 720 4070 t
(implementation.)720 4220 w
( both)1 268(Results for baseline annealing, annealing with pruning, and annealing with)9 3802 2 970 4406 t
( summarized in Table 10 for various values)7 2093(pruning and low temperature starts are)5 1862 2 720 4556 t
12 S f
(a)4706 4556 w
12 R f
(. For)1 258 1 4782 4556 t
( the average results for 2-Opt, 3-Opt, and)7 2096(comparison purposes, the table also includes)5 2224 2 720 4706 t
( multiple runs of each algorithm)5 1618(Lin-Kernighan, as well as the averages for the best of)9 2702 2 720 4856 t
( estimate these)2 725( To)1 201(\(1,000 and 10,000 runs for 2- and 3-Opt and 10 or 100 runs for LK\).)14 3394 3 720 5006 t
( runs of each algorithm and assumed that the)8 2302(``best of'' results, we performed 10,000)5 2018 2 720 5156 t
( yields)1 324( This)1 280( the true probability distributions.)4 1641(resulting distributions of tour lengths were)5 2075 4 720 5306 t
( estimates are)2 697(fairly good estimates for the best of 1,000, although the best-of-10,000)10 3623 2 720 5456 t
( however, the variance of the underlying distribution is suf-)9 2867( Typically,)1 552(somewhat suspect.)1 901 3 720 5606 t
( of)1 146(ficiently small that the best of 10,000 is not likely to be much better than the best)16 4174 2 720 5756 t
(1,000, and our estimates are consistent with this.)7 2339 1 720 5906 t
( yields significantly faster running times for)6 2306(Note that pruning not only)4 1400 2 970 6092 t
12 S f
(a =)1 192 1 4738 6092 t
12 R f
(1)4980 6092 w
(\(almost a factor of 40 for)5 1235 1 720 6242 t
12 I f
(N)1991 6242 w
12 S f
(=)2121 6242 w
12 R f
( degra-)1 341( Whatever)1 532(1000\), but it also produces better tours!)6 1930 3 2237 6242 t
( neighbor lists might impose appears to have been)8 2541(dation in performance the truncated)4 1779 2 720 6392 t
( up for by the advantage of getting higher effective temperature lengths at)12 3544(more than made)2 776 2 720 6542 t
( values of)2 515( Higher)1 417( the annealing schedule.)3 1226(the end of)2 526 4 720 6692 t
12 S f
(a)3458 6692 w
12 R f
(, now feasible because of the)5 1506 1 3534 6692 t
( average tour quality.)3 1123(speedups provided by pruning, yield further improvements in)7 3197 2 720 6842 t
(Increasing)720 6992 w
12 S f
(a)1252 6992 w
12 R f
(from 1 to 10 reduces the excess over the Held-Karp bound by roughly 40)13 3549 1 1361 6992 t
12 I f
(%)4910 6992 w
12 R f
(.)5010 6992 w
( no negative)2 635(Adding low temperature starts to neighborhood pruning appears to have)9 3685 2 720 7142 t
(effect on tour quality \(and indeed seems to improve it\), while cutting the running time by)15 4320 1 720 7292 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 46 536 764
%%EndPage: 54 54
%%Page: 55 55
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
55 pagesetup
12 R f
(- 55 -)2 260 1 2750 500 t
10 S f
(_ __________________________________________________________________________________)1 4124 1 818 875 t
10 R f
(Random Euclidean Instances)2 1159 1 3169 995 t
10 S f
(_ __________________________________________________________________________________)1 4124 1 818 1045 t
10 R f
( Time in Seconds)3 697( Running)1 560(Average Percent Excess)2 963 3 2605 1195 t
10 S f
(_ __________________________________________________________________________________)1 4124 1 818 1245 t
10 R f
(Variant 10)1 1193 1 1512 1395 t
7 R f
(2)2710 1355 w
10 R f
(10)2983 1395 w
7 R f
(2. 5)1 93 1 3088 1355 t
10 R f
(10)3419 1395 w
7 R f
(3)3524 1355 w
10 R f
(10)3844 1395 w
7 R f
(2)3949 1355 w
10 R f
(10)4211 1395 w
7 R f
(2. 5)1 93 1 4316 1355 t
10 R f
(10)4744 1395 w
7 R f
(3)4849 1355 w
10 S f
(_ __________________________________________________________________________________)1 4124 1 818 1445 t
10 R f
(SA)868 1625 w
7 R f
(1)1007 1645 w
10 R f
(\(Baseline Annealing\))1 851 1 1075 1625 t
10 S f
(a =)1 134 1 2155 1625 t
10 R f
( 188.00 3170.00)2 900( 12.40)1 425( 4.0)1 378( 3.7)1 436(1 3.4)1 448 5 2305 1625 t
(SA)868 1775 w
7 R f
(1)1007 1795 w
10 R f
(+ Pruning)1 398 1 1075 1775 t
10 S f
(a =)1 134 1 2155 1775 t
10 R f
( 81.00)1 475( 18.00)1 425( 3.20)1 425( 3.8)1 378( 3.2)1 436(1 2.7)1 448 6 2305 1775 t
(SA)868 1895 w
7 R f
(1)1007 1915 w
10 R f
(+ Pruning)1 398 1 1075 1895 t
10 S f
(a =)1 134 1 2155 1895 t
10 R f
( 758.00)1 475( 155.00)1 425( 32.00)1 425( 2.2)1 378( 1.9)1 436(10 1.7)1 448 6 2305 1895 t
(SA)868 2045 w
7 R f
(2)1007 2065 w
10 R f
(\(Pruning + Low Temp\))3 930 1 1075 2045 t
10 S f
(a =)1 134 1 2155 2045 t
10 R f
( 14.30 50.30 229.00)3 1325( 2.0)1 378( 1.8)1 436(10 1.6)1 448 4 2305 2045 t
(SA)868 2165 w
7 R f
(2)1007 2185 w
10 S f
(a =)1 134 1 2155 2165 t
10 R f
( 805.00)1 475( 204.00)1 425( 58.00)1 425( 1.7)1 378( 1.5)1 436(40 1.3)1 448 6 2305 2165 t
(SA)868 2285 w
7 R f
(2)1007 2305 w
10 S f
(a =)1 134 1 2155 2285 t
10 R f
( 141.00 655.00 1910.00)3 1325( 1.6)1 378( 1.3)1 436(100 1.1)1 448 4 2305 2285 t
10 S f
(_ __________________________________________________________________________________)1 4124 1 818 2335 t
10 R f
( 0.34)1 475( 0.03 0.09)2 850( 4.9)1 378( 4.8)1 436(2-Opt 4.5)1 1885 5 868 2485 t
( 52.00)1 475( 16.20)1 425( 6.60)1 425( 3.6)1 378( 2.8)1 436( 1.9)1 1077(Best of 1000 2-Opts)3 808 7 868 2605 t
( 517.00)1 475( 161.00)1 425( 66.00)1 425( 3.4)1 378( 2.6)1 436( 1.7)1 1027(Best of 10000 2-Opts)3 858 7 868 2725 t
( 0.41)1 475( 0.04 0.11)2 850( 3.1)1 378( 2.5)1 436(3-Opt 2.5)1 1885 5 868 2875 t
( 11.30 33.00 104.00)3 1325( 2.1)1 378( 1.3)1 436( 1.0)1 1077(Best of 1000 3-Opts)3 808 5 868 2995 t
( 113.00 326.00 1040.00)3 1325( 1.9)1 378( 1.2)1 436( 0.9)1 1027(Best of 10000 3-Opts)3 858 5 868 3115 t
( 0.77)1 475( 0.06 0.20)2 850( 2.0)1 378( 1.7)1 436(Lin-Kernighan 1.5)1 1885 5 868 3265 t
( 48.00)1 475( 14.50)1 425( 4.10)1 425( 1.4)1 378( 1.0)1 436( 0.9)1 1194(Best of 100 LK's)3 691 7 868 3385 t
10 S f
( \347)1 -4124(_ __________________________________________________________________________________)1 4124 2 818 3435 t
(\347)818 3375 w
(\347)818 3275 w
(\347)818 3175 w
(\347)818 3075 w
(\347)818 2975 w
(\347)818 2875 w
(\347)818 2775 w
(\347)818 2675 w
(\347)818 2575 w
(\347)818 2475 w
(\347)818 2375 w
(\347)818 2275 w
(\347)818 2175 w
(\347)818 2075 w
(\347)818 1975 w
(\347)818 1875 w
(\347)818 1775 w
(\347)818 1675 w
(\347)818 1575 w
(\347)818 1475 w
(\347)818 1375 w
(\347)818 1275 w
(\347)818 1175 w
(\347)818 1075 w
(\347)818 975 w
(\347)2530 3435 w
(\347)2530 3375 w
(\347)2530 3275 w
(\347)2530 3175 w
(\347)2530 3075 w
(\347)2530 2975 w
(\347)2530 2875 w
(\347)2530 2775 w
(\347)2530 2675 w
(\347)2530 2575 w
(\347)2530 2475 w
(\347)2530 2375 w
(\347)2530 2275 w
(\347)2530 2175 w
(\347)2530 2075 w
(\347)2530 1975 w
(\347)2530 1875 w
(\347)2530 1775 w
(\347)2530 1675 w
(\347)2530 1575 w
(\347)2530 1475 w
(\347)2530 1375 w
(\347)2530 1275 w
(\347)2530 1175 w
(\347)2530 1075 w
(\347)2530 975 w
(\347)3642 3435 w
(\347)3642 3345 w
(\347)3642 3245 w
(\347)3642 3145 w
(\347)3642 3045 w
(\347)3642 2945 w
(\347)3642 2845 w
(\347)3642 2745 w
(\347)3642 2645 w
(\347)3642 2545 w
(\347)3642 2445 w
(\347)3642 2345 w
(\347)3642 2245 w
(\347)3642 2145 w
(\347)3642 2045 w
(\347)3642 1945 w
(\347)3642 1845 w
(\347)3642 1745 w
(\347)3642 1645 w
(\347)3642 1545 w
(\347)3642 1445 w
(\347)3642 1345 w
(\347)3642 1245 w
(\347)3642 1145 w
(\347)4942 3435 w
(\347)4942 3375 w
(\347)4942 3275 w
(\347)4942 3175 w
(\347)4942 3075 w
(\347)4942 2975 w
(\347)4942 2875 w
(\347)4942 2775 w
(\347)4942 2675 w
(\347)4942 2575 w
(\347)4942 2475 w
(\347)4942 2375 w
(\347)4942 2275 w
(\347)4942 2175 w
(\347)4942 2075 w
(\347)4942 1975 w
(\347)4942 1875 w
(\347)4942 1775 w
(\347)4942 1675 w
(\347)4942 1575 w
(\347)4942 1475 w
(\347)4942 1375 w
(\347)4942 1275 w
(\347)4942 1175 w
(\347)4942 1075 w
(\347)4942 975 w
11 B f
(Table 10.)1 442 1 970 3691 t
11 R f
( length set to)3 588(Results for variants of simulated annealing, with temperature)7 2728 2 1474 3691 t
11 S f
(a)970 3821 w
11 R f
( total length of the initial neighbor lists, compared to results for one or)13 3290(times the)1 417 2 1083 3821 t
(more runs of 2-Opt, 3-Opt, and Lin-Kernighan.)6 2078 1 970 3951 t
12 R f
( speedup factor grows with)4 1348( The)1 258( factor.)1 352(a growing)1 494 4 720 4238 t
12 I f
(N)3214 4238 w
12 R f
(since here the number of tempera-)5 1704 1 3336 4238 t
(tures remains relatively unchanged as)4 1837 1 720 4388 t
12 I f
(N)2594 4388 w
12 R f
( increased with)2 739(increases, whereas it)2 1004 2 2711 4388 t
12 I f
(N)4490 4388 w
12 R f
(when we)1 434 1 4606 4388 t
(did not use low temperature starts.)5 1657 1 720 4538 t
(In what follows, we shall use ``SA)6 1760 1 970 4724 t
9 R f
(2)2745 4748 w
12 R f
('' to denote the algorithm obtained from our)7 2240 1 2800 4724 t
(baseline implementation SA)2 1422 1 720 4874 t
9 R f
(1)2157 4898 w
12 R f
(by adding neighborhood pruning and low temperature)6 2769 1 2271 4874 t
( that under SA)3 739(starts. Note)1 592 2 720 5024 t
9 R f
(2)2066 5048 w
12 R f
(the time for an)3 747 1 2165 5024 t
12 S f
(a =)1 192 1 2956 5024 t
12 R f
( is substantially less)3 1007(10 annealing run)2 835 2 3198 5024 t
( This)1 274( runs of 2-Opt, and the average tour quality is better.)10 2523(than that for performing 10,000)4 1523 3 720 5174 t
( given enough time, simulated annealing)5 2061(illustrates the oft-observed phenomenon that,)4 2259 2 720 5324 t
( local optimization algorithm, even on)5 1849(will outperform multiple runs of the corresponding)6 2471 2 720 5474 t
( this value of)3 700( For)1 252(a time-equalized basis.)2 1149 3 720 5624 t
12 S f
(a)2876 5624 w
12 R f
(, however, annealing remains slower and)5 2088 1 2952 5624 t
( Increasing)1 562( 3-Opt.)1 342(worse than 1000 runs of)4 1172 3 720 5774 t
12 S f
(a)2828 5774 w
12 R f
(to 40 puts annealing ahead of 3-Opt as well)8 2104 1 2936 5774 t
(\(on a time-equalized basis\), at least for)6 1897 1 720 5924 t
12 I f
(N)2652 5924 w
12 S f
(=)2782 5924 w
12 R f
( better average tour)3 948( also produces a)3 785(1000. It)1 409 3 2898 5924 t
( it is strongly dominated by the best of 100 runs of LK,)12 2853(than Lin-Kernighan, although)2 1467 2 720 6074 t
(which take less than 1/10th of SA)6 1628 1 720 6224 t
9 R f
(2)2363 6248 w
12 R f
( increasing)1 525( Even)1 307('s time.)1 363 3 2418 6224 t
12 S f
(a)3644 6224 w
12 R f
( SA)1 185(to 100 doesn't enable)3 1034 2 3751 6224 t
9 R f
(2)4985 6248 w
12 R f
(to catch up.)2 557 1 720 6374 t
(The data in Table 10 nevertheless suggests that SA)8 2689 1 970 6560 t
9 R f
(2)3674 6584 w
12 R f
( gaining on Lin-)3 871(may be)1 380 2 3789 6560 t
(Kernighan as)1 644 1 720 6710 t
12 I f
(N)1402 6710 w
12 R f
(increases. For)1 705 1 1520 6710 t
12 S f
(a =)1 192 1 2262 6710 t
12 R f
(100, the average excess for SA)5 1520 1 2504 6710 t
9 R f
(2)4039 6734 w
12 R f
(is roughly 0.4 per-)3 909 1 4131 6710 t
(centage points below that for Lin-Kernighan for all values of)9 2962 1 720 6860 t
12 I f
(N)3716 6860 w
12 R f
( Meanwhile,)1 635(in the table.)2 575 2 3830 6860 t
(the variance of the LK results for a given instance declines as)11 2985 1 720 7010 t
12 I f
(N)3738 7010 w
12 R f
(increases, seriously less-)2 1190 1 3850 7010 t
( sufficiently large)2 883( For)1 244(ening the value of performing multiple runs.)6 2237 3 720 7160 t
12 I f
(N)4131 7160 w
12 R f
( thus might)2 579(, one)1 250 2 4211 7160 t
( test this hypothesis, we performed comparisons on one of the)10 3155( To)1 211(expect a crossover.)2 954 3 720 7310 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 55 55
%%Page: 56 56
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
56 pagesetup
12 R f
(- 56 -)2 260 1 2750 500 t
( For)1 242(10,000-city instances in our random geometric instance testbed.)7 3174 2 720 870 t
12 S f
(a =)1 192 1 4181 870 t
12 R f
(100 the run-)2 617 1 4423 870 t
(ning time for SA)3 818 1 720 1020 t
9 R f
(2)1553 1044 w
12 R f
(was roughly 14 hours per run, with an average excess of 1.57)11 2964 1 1640 1020 t
12 I f
(%)4604 1020 w
12 R f
(over 5)1 304 1 4736 1020 t
( of which had excesses of 1.56)6 1493(runs, all but one)3 784 2 720 1170 t
12 I f
(%)2997 1170 w
12 R f
( best excess seen in 11,000)5 1314( The)1 250(or less.)1 345 3 3131 1170 t
(LK runs \(which collectively took 24 hours\) was 1.60)8 2650 1 720 1320 t
12 I f
(%)3370 1320 w
12 R f
( not be a significant)4 1001( may)1 251(. This)1 318 3 3470 1320 t
( SA)1 201(difference, but it does seem to lie in favor of)9 2290 2 720 1470 t
9 R f
(2)3226 1494 w
12 R f
( the implementation of)3 1148(. Moreover,)1 611 2 3281 1470 t
(SA)720 1620 w
9 R f
(2)888 1644 w
12 R f
( use of the same sophisticated data structures for tour representation)10 3346(does not make)2 712 2 982 1620 t
( might well have sped the former up by an additional)10 2594( These)1 351(used by in neighbor-list LK.)4 1375 3 720 1770 t
( this case, one run of)5 994( In)1 160(factor of two [Fredman, Johnson, McGeoch, & Ostheimer, 1995].)8 3166 3 720 1920 t
(SA)720 2070 w
9 R f
(2)888 2094 w
12 R f
( of LK, for which the expected best excess is)9 2342(would be equivalent to 3000 runs)5 1705 2 993 2070 t
(roughly 1.64)1 614 1 720 2220 t
12 I f
(%)1334 2220 w
12 R f
(.)1434 2220 w
cleartomark
saveobj restore
end
%%BeginDocument: Fig5.ps
%ps_include: begin
save
/ed {exch def} def
{} /showpage ed
{} /copypage ed
{} /erasepage ed
{} /letter ed
currentdict /findfont known systemdict /findfont known and {
	/findfont systemdict /findfont get def
} if
36 dict dup /PS-include-dict-dw ed begin
/context ed
count array astore /o-stack ed
%ps_include: variables begin
/llx 94 def
/lly 531 def
/urx 500 def
/ury 708 def
/w 0 def
/o 0 def
/s 0 def
/cx 2880 def
/cy -3600 def
/sx 4320 def
/sy 2160 def
/ax 0.5 def
/ay 0.5 def
/rot 0 def
%ps_include: variables end
{llx lly urx ury} /bbox ed
{newpath 2 index exch 2 index exch dup 6 index exch
 moveto 3 {lineto} repeat closepath} /boxpath ed
{dup mul exch dup mul add sqrt} /len ed
{2 copy gt {exch} if pop} /min ed
{2 copy lt {exch} if pop} /max ed
{transform round exch round exch A itransform} /nice ed
{6 array} /n ed
n defaultmatrix n currentmatrix n invertmatrix n concatmatrix /A ed
urx llx sub 0 A dtransform len /Sx ed
0 ury lly sub A dtransform len /Sy ed
llx urx add 2 div lly ury add 2 div A transform /Cy ed /Cx ed
rot dup sin abs /S ed cos abs /C ed
Sx S mul Sy C mul add /H ed
Sx C mul Sy S mul add /W ed
sy H div /Scaley ed
sx W div /Scalex ed
s 0 eq {Scalex Scaley min dup /Scalex ed /Scaley ed} if
sx Scalex W mul sub 0 max ax 0.5 sub mul cx add /cx ed
sy Scaley H mul sub 0 max ay 0.5 sub mul cy add /cy ed
urx llx sub 0 A dtransform exch atan rot exch sub /rot ed
n currentmatrix initgraphics setmatrix
cx cy translate
Scalex Scaley scale
rot rotate
Cx neg Cy neg translate
A concat
bbox boxpath clip newpath
w 0 ne {gsave bbox boxpath 1 setgray fill grestore} if
end
gsave
%ps_include: inclusion begin
/DpostDict 200 dict def
DpostDict begin

/#copies 1 store
/Prologue (dpost.ps) def
/aspectratio 1 def
/formsperpage 1 def
/landscape false def
/linewidth .3 def
/magnification 1 def
/margin 0 def
/orientation 0 def
/resolution 720 def
/rotation 1 def
/xoffset 0 def
/yoffset 0 def

/roundpage true def
/useclippath true def
/pagebbox [0 0 612 792] def

/R  /Times-Roman def
/I  /Times-Italic def
/B  /Times-Bold def
/BI /Times-BoldItalic def
/H  /Helvetica def
/HI /Helvetica-Oblique def
/HB /Helvetica-Bold def
/HX /Helvetica-BoldOblique def
/CW /Courier def
/CO /Courier def
/CI /Courier-Oblique def
/CB /Courier-Bold def
/CX /Courier-BoldOblique def
/PA /Palatino-Roman def
/PI /Palatino-Italic def
/PB /Palatino-Bold def
/PX /Palatino-BoldItalic def
/Hr /Helvetica-Narrow def
/Hi /Helvetica-Narrow-Oblique def
/Hb /Helvetica-Narrow-Bold def
/Hx /Helvetica-Narrow-BoldOblique def
/KR /Bookman-Light def
/KI /Bookman-LightItalic def
/KB /Bookman-Demi def
/KX /Bookman-DemiItalic def
/AR /AvantGarde-Book def
/AI /AvantGarde-BookOblique def
/AB /AvantGarde-Demi def
/AX /AvantGarde-DemiOblique def
/NR /NewCenturySchlbk-Roman def
/NI /NewCenturySchlbk-Italic def
/NB /NewCenturySchlbk-Bold def
/NX /NewCenturySchlbk-BoldItalic def
/ZD /ZapfDingbats def
/ZI /ZapfChancery-MediumItalic def
/S  /S def
/S1 /S1 def
/GR /Symbol def

/inch {72 mul} bind def
/min {2 copy gt {exch} if pop} bind def

/setup {
	counttomark 2 idiv {def} repeat pop

	landscape {/orientation 90 orientation add def} if
	/scaling 72 resolution div def
	linewidth setlinewidth
	1 setlinecap

	pagedimensions
	xcenter ycenter translate
	orientation rotation mul rotate
	width 2 div neg height 2 div translate
	xoffset inch yoffset inch neg translate
	margin 2 div dup neg translate
	magnification dup aspectratio mul scale
	scaling scaling scale

	addmetrics
	0 0 moveto
} def

/pagedimensions {
	useclippath userdict /gotpagebbox known not and {
		/pagebbox [clippath pathbbox newpath] def
		roundpage currentdict /roundpagebbox known and {roundpagebbox} if
	} if
	pagebbox aload pop
	4 -1 roll exch 4 1 roll 4 copy
	landscape {4 2 roll} if
	sub /width exch def
	sub /height exch def
	add 2 div /xcenter exch def
	add 2 div /ycenter exch def
	userdict /gotpagebbox true put
} def

/landscapepage {
	landscape not {
		0 height scaling div neg translate	% not quite
		90 rotate
	} if
} bind def

/portraitpage {
	landscape {
		width scaling div 0 translate	% not quite
		-90 rotate
	} if
} bind def

/addmetrics {
	/Symbol /S null Sdefs cf
	/Times-Roman /S1 StandardEncoding dup length array copy S1defs cf
} def

/pagesetup {
	/page exch def
	currentdict /pagedict known currentdict page known and {
		page load pagedict exch get cvx exec
	} if
} def

/decodingdefs [
	{counttomark 2 idiv {y moveto show} repeat}
	{neg /y exch def counttomark 2 idiv {y moveto show} repeat}
	{neg moveto {2 index stringwidth pop sub exch div 0 32 4 -1 roll widthshow} repeat}
	{neg moveto {spacewidth sub 0.0 32 4 -1 roll widthshow} repeat}
	{counttomark 2 idiv {y moveto show} repeat}
	{neg setfunnytext}
] def

/setdecoding {/t decodingdefs 3 -1 roll get bind def} bind def

/w {neg moveto show} bind def
/m {neg dup /y exch def moveto} bind def
/done {/lastpage where {pop lastpage} if} def

/f {
	dup /font exch def findfont exch
	dup /ptsize exch def scaling div dup /size exch def scalefont setfont
	linewidth ptsize mul scaling 10 mul div setlinewidth
	/spacewidth ( ) stringwidth pop def
} bind def

/changefont {
	/fontheight exch def
	/fontslant exch def
	currentfont [
		1 0
		fontheight ptsize div fontslant sin mul fontslant cos div
		fontheight ptsize div
		0 0
	] makefont setfont
} bind def

/sf {f} bind def

/cf {
	dup length 2 idiv
	/entries exch def
	/chtab exch def
	/newencoding exch def
	/newfont exch def

	findfont dup length 1 add dict
	/newdict exch def
	{1 index /FID ne {newdict 3 1 roll put}{pop pop} ifelse} forall

	newencoding type /arraytype eq {newdict /Encoding newencoding put} if

	newdict /Metrics entries dict put
	newdict /Metrics get
	begin
		chtab aload pop
		1 1 entries {pop def} for
		newfont newdict definefont pop
	end
} bind def


/Sdefs [
	/bracketlefttp		[201 500]
	/bracketleftbt		[201 500]
	/bracketrighttp		[-81 380]
	/bracketrightbt		[-83 380]
	/braceleftbt		[203 490]
	/bracketrightex		[220 -125 500 0]
	/radical		[0 0 550 0]
	/radicalex		[-50 0 500 0]
	/parenleftex		[-20 -170 0 0]
	/integral		[100 -50 500 0]
	/infinity		[10 -75 730 0]
] def

/S1defs [
	/underscore		[0 80 500 0]
	/endash			[7 90 650 0]
] def
end
DpostDict begin
mark
/rotation 1 def
/gotpagebbox true def
/linewidth 0.5 def
/xoffset 0 def
/yoffset 0 def
/#copies 1 store
/magnification 1 def
/formsperpage 1 def
/landscape false def
/resolution 720 def
setup
2 setdecoding

/inpath false def
/savematrix matrix def

/Dl {
	inpath
		{pop pop neg lineto}
		{newpath neg moveto neg lineto stroke}
	ifelse
} bind def

/De {
	/y1 exch 2 div def
	/x1 exch 2 div def
	/savematrix savematrix currentmatrix def
	neg exch x1 add exch translate
	x1 y1 scale
	0 0 1 0 360
	inpath
		{1 0 moveto arc savematrix setmatrix}
		{newpath arc savematrix setmatrix stroke}
	ifelse
} bind def

/Da {
	/dy2 exch def
	/dx2 exch def
	/dy1 exch def
	/dx1 exch def
	dy1 add neg exch dx1 add exch
	dx1 dx1 mul dy1 dy1 mul add sqrt
	dy1 dx1 neg atan
	dy2 neg dx2 atan
	inpath
		{arc}
		{newpath arc stroke}
	ifelse
} bind def

/DA {
	/dy2 exch def
	/dx2 exch def
	/dy1 exch def
	/dx1 exch def
	dy1 add neg exch dx1 add exch
	dx1 dx1 mul dy1 dy1 mul add sqrt
	dy1 dx1 neg atan
	dy2 neg dx2 atan
	inpath
		{arcn}
		{newpath arcn stroke}
	ifelse
} bind def

/Ds {
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	/y0 exch def
	/x0 exch def
	x0 5 x1 mul add 6 div
	y0 5 y1 mul add -6 div
	x2 5 x1 mul add 6 div
	y2 5 y1 mul add -6 div
	x1 x2 add 2 div
	y1 y2 add -2 div
	inpath
		{curveto}
		{newpath x0 x1 add 2 div y0 y1 add -2 div moveto curveto stroke}
	ifelse
} bind def
end
DpostDict begin
/saveobj save def
mark
1 pagesetup
4 S f
(\267)1891 1065 w
(\267)1082 1665 w
(\267)1080 1606 w
(\267)1002 1667 w
(\267)1461 2107 w
(\267)1435 2079 w
(\267)2124 2289 w
(\267)2693 1856 w
(\267)1128 1966 w
(\267)2252 2051 w
(\267)1465 2090 w
(\267)1224 1788 w
(\267)2071 2319 w
(\267)2192 1956 w
(\267)2645 1977 w
(\267)1632 1106 w
(\267)2210 2012 w
(\267)1747 1144 w
(\267)1243 1637 w
(\267)1702 1832 w
(\267)1938 1082 w
(\267)2204 2329 w
(\267)1918 1439 w
(\267)1625 1407 w
(\267)1434 1052 w
(\267)2618 1870 w
(\267)2695 1832 w
(\267)1874 1475 w
(\267)1422 1078 w
(\267)2347 1130 w
(\267)1710 1125 w
(\267)1905 1261 w
(\267)2118 2221 w
(\267)1725 1511 w
(\267)1331 1843 w
(\267)1229 1969 w
(\267)2594 1849 w
(\267)2538 1961 w
(\267)2125 2241 w
(\267)1832 1031 w
(\267)1602 1747 w
(\267)1522 1079 w
(\267)1818 1147 w
(\267)1785 994 w
(\267)1607 1128 w
(\267)1227 2061 w
(\267)1915 1415 w
(\267)2697 1737 w
(\267)1727 1079 w
(\267)1636 1653 w
(\267)1866 1367 w
(\267)2239 1072 w
(\267)1231 2016 w
(\267)1388 1661 w
(\267)1334 1685 w
(\267)2535 2334 w
(\267)1865 953 w
(\267)1317 1725 w
(\267)1553 1534 w
(\267)2556 2031 w
(\267)1230 1665 w
(\267)1897 1454 w
(\267)2195 2138 w
(\267)1820 1112 w
(\267)1144 1539 w
(\267)1561 1010 w
(\267)1356 1766 w
(\267)1128 2015 w
(\267)2328 1988 w
(\267)1380 1756 w
(\267)1533 1165 w
(\267)1931 1426 w
(\267)1457 2059 w
(\267)2511 1048 w
(\267)2504 1951 w
(\267)1796 1101 w
(\267)1911 1045 w
(\267)1105 2023 w
(\267)1633 1476 w
(\267)2243 1069 w
(\267)2726 1908 w
(\267)2539 1884 w
(\267)1800 1336 w
(\267)1602 1678 w
(\267)2039 1004 w
(\267)1140 1550 w
(\267)1792 1517 w
(\267)1544 2115 w
(\267)1582 2006 w
(\267)1554 1743 w
(\267)2560 1991 w
(\267)1295 1743 w
(\267)2517 2336 w
(\267)1632 1058 w
(\267)2600 2349 w
(\267)1509 1000 w
(\267)2589 984 w
(\267)2372 1143 w
(\267)1700 1369 w
(\267)1451 2123 w
(\267)2599 2021 w
(\267)1637 1565 w
(\267)2190 2085 w
(\267)2332 1119 w
(\267)2471 2335 w
(\267)1133 2122 w
(\267)1637 1766 w
(\267)2754 1938 w
(\267)1610 1659 w
(\267)1325 1704 w
(\267)1852 1434 w
(\267)2347 1074 w
(\267)2332 1933 w
(\267)1866 1343 w
(\267)1977 1405 w
(\267)1598 1753 w
(\267)2332 1063 w
(\267)1629 1529 w
(\267)1437 1631 w
(\267)1676 1219 w
(\267)1193 1622 w
(\267)1796 1112 w
(\267)2676 1922 w
(\267)1668 1770 w
(\267)2412 1132 w
(\267)1387 1758 w
(\267)1543 1596 w
(\267)2460 2278 w
(\267)2256 2076 w
(\267)1589 1521 w
(\267)2565 2026 w
(\267)2592 2408 w
(\267)1260 1795 w
(\267)1840 1500 w
(\267)1424 2105 w
(\267)2034 986 w
(\267)1648 1709 w
(\267)1777 1296 w
(\267)1571 1068 w
(\267)1622 1089 w
(\267)2037 1229 w
(\267)1563 1467 w
(\267)2538 1015 w
(\267)1180 1637 w
(\267)1812 1180 w
(\267)2536 1881 w
(\267)2577 2387 w
(\267)1314 1553 w
(\267)1868 1395 w
(\267)2052 1100 w
(\267)1184 1624 w
(\267)1972 1184 w
(\267)2380 1158 w
(\267)2321 932 w
(\267)1960 1338 w
(\267)1344 1819 w
(\267)2588 1696 w
(\267)1953 1466 w
(\267)1366 1665 w
(\267)2252 2041 w
(\267)2514 1926 w
(\267)1604 1699 w
(\267)1580 1604 w
(\267)1587 1092 w
(\267)1403 1719 w
(\267)1536 1709 w
(\267)1274 1760 w
(\267)2131 1928 w
(\267)2498 1087 w
(\267)1890 1429 w
(\267)1287 1889 w
(\267)1571 956 w
(\267)1184 1607 w
(\267)1550 1619 w
(\267)2125 2221 w
(\267)1280 1792 w
(\267)2592 1845 w
(\267)2275 1115 w
(\267)1592 1570 w
(\267)1857 1128 w
(\267)1213 1930 w
(\267)2112 1061 w
(\267)1645 1488 w
(\267)1604 1465 w
(\267)1167 1997 w
(\267)1786 1406 w
(\267)1486 2119 w
(\267)2473 1725 w
(\267)2082 2376 w
(\267)2056 1087 w
(\267)2577 2364 w
(\267)1817 1024 w
(\267)1656 923 w
(\267)2475 1937 w
(\267)1584 1784 w
(\267)1975 1053 w
(\267)1649 1525 w
(\267)2262 2275 w
(\267)1690 1148 w
(\267)1740 1090 w
(\267)2217 2262 w
(\267)1907 950 w
(\267)2198 1961 w
(\267)1949 1444 w
(\267)2409 1053 w
(\267)2665 1818 w
(\267)1849 1054 w
(\267)1503 1006 w
(\267)1553 1475 w
(\267)1562 1016 w
(\267)1249 2007 w
(\267)2077 2293 w
(\267)1824 1309 w
(\267)2553 1900 w
(\267)2527 2412 w
(\267)2343 2141 w
(\267)1934 1469 w
(\267)2169 2236 w
(\267)2417 1012 w
(\267)1220 2028 w
(\267)1319 1694 w
(\267)2583 1946 w
(\267)2476 2414 w
(\267)2619 1811 w
(\267)2218 2054 w
(\267)1864 1399 w
(\267)1571 1717 w
(\267)2404 1223 w
(\267)1810 1038 w
(\267)2521 2375 w
(\267)2200 1950 w
(\267)2525 1984 w
(\267)1404 2278 w
(\267)1170 1966 w
(\267)2492 1804 w
(\267)2293 1022 w
(\267)1656 1160 w
(\267)2328 989 w
(\267)1165 1571 w
(\267)1692 993 w
(\267)1535 1583 w
(\267)1360 1737 w
(\267)2364 1082 w
(\267)1379 1683 w
(\267)2454 1137 w
(\267)2494 2304 w
(\267)1569 1471 w
(\267)1937 1144 w
(\267)1600 950 w
(\267)1934 1064 w
(\267)1277 1639 w
(\267)1514 1649 w
(\267)2496 1079 w
(\267)1503 1654 w
(\267)1880 988 w
(\267)2097 1120 w
(\267)1858 1369 w
(\267)1170 2054 w
(\267)1901 1229 w
(\267)1980 1136 w
(\267)1571 2076 w
(\267)2286 1177 w
(\267)1617 1730 w
(\267)2504 1907 w
(\267)2552 1970 w
(\267)2126 1146 w
(\267)2107 2253 w
(\267)2328 1138 w
(\267)1858 1377 w
(\267)1491 1532 w
(\267)1321 1684 w
(\267)1357 2035 w
(\267)1547 1765 w
(\267)2145 2188 w
(\267)2235 1094 w
(\267)2542 2425 w
(\267)2739 1938 w
(\267)2128 2239 w
(\267)1811 987 w
(\267)2036 1200 w
(\267)1889 1483 w
(\267)1579 1646 w
(\267)2241 1943 w
(\267)2704 1806 w
(\267)1803 1072 w
(\267)1646 1561 w
(\267)2320 1054 w
(\267)1371 1633 w
(\267)1134 1630 w
(\267)2404 1127 w
(\267)1663 1241 w
(\267)1987 1101 w
(\267)1632 1745 w
(\267)1410 1748 w
(\267)2367 2018 w
(\267)2314 1148 w
(\267)1553 1650 w
(\267)2229 2301 w
(\267)1851 1158 w
(\267)1898 1045 w
(\267)2502 1931 w
(\267)1684 1483 w
(\267)1612 2097 w
(\267)2563 1869 w
(\267)1630 1238 w
(\267)2473 1873 w
(\267)1600 1739 w
(\267)2167 2028 w
(\267)1598 1704 w
(\267)1658 1033 w
(\267)2509 2367 w
(\267)1779 1084 w
(\267)2234 2293 w
(\267)2302 1058 w
(\267)1540 2145 w
(\267)1147 1600 w
(\267)2568 983 w
(\267)1340 1782 w
(\267)2721 1903 w
(\267)2219 1120 w
(\267)1781 1066 w
(\267)1557 1756 w
(\267)1527 2103 w
(\267)1895 1052 w
(\267)1720 1207 w
(\267)1203 1622 w
(\267)1667 1510 w
(\267)1110 1598 w
(\267)1594 964 w
(\267)1242 2087 w
(\267)1596 947 w
(\267)2568 1097 w
(\267)1145 1813 w
(\267)1146 1600 w
(\267)2631 1777 w
(\267)1807 1393 w
(\267)1880 1442 w
(\267)1264 1584 w
(\267)2356 988 w
(\267)1786 998 w
(\267)1370 1762 w
(\267)2502 1824 w
(\267)1520 2072 w
(\267)1080 1894 w
(\267)1633 1053 w
(\267)2576 1817 w
(\267)1113 2082 w
(\267)2006 1040 w
(\267)1897 1493 w
(\267)1755 1298 w
(\267)1427 1722 w
(\267)2545 2375 w
(\267)2550 2361 w
(\267)2251 2054 w
(\267)2537 1018 w
(\267)1625 1094 w
(\267)1190 1603 w
(\267)1264 1981 w
(\267)2119 2221 w
(\267)1764 1012 w
(\267)2212 2256 w
(\267)1677 1561 w
(\267)2571 2259 w
(\267)1748 1143 w
(\267)1421 1836 w
(\267)2604 1055 w
(\267)1455 2044 w
(\267)1613 1000 w
(\267)2136 2077 w
(\267)1380 2138 w
(\267)1445 2122 w
(\267)2050 1052 w
(\267)1837 1089 w
(\267)1216 1729 w
(\267)1679 1807 w
(\267)1827 1393 w
(\267)1301 1796 w
(\267)2418 1094 w
(\267)1542 1537 w
(\267)1208 1750 w
(\267)2632 1843 w
(\267)2653 1838 w
(\267)1454 2122 w
(\267 \267)1 -492 1 2445 1030 t
(\267)2088 1170 w
(\267)2082 1047 w
(\267)1425 1683 w
(\267)1612 1422 w
(\267)1799 1403 w
(\267)1894 1390 w
(\267)2478 981 w
(\267)2550 1791 w
(\267)1259 1514 w
(\267)1547 1441 w
(\267)2347 1068 w
(\267)1758 1229 w
(\267)2301 1077 w
(\267)2187 2020 w
(\267)1993 1391 w
(\267)1514 1732 w
(\267)1107 1711 w
(\267)1246 1897 w
(\267)1942 1560 w
(\267)1538 1637 w
(\267)1838 1202 w
(\267)2650 1659 w
(\267)2211 2054 w
(\267)2221 1112 w
(\267)2089 2180 w
(\267)1735 1282 w
(\267)2049 2061 w
(\267)2195 2257 w
(\267)1624 1503 w
(\267)1649 1632 w
(\267)2536 1031 w
(\267)2490 1055 w
(\267)1589 1759 w
(\267)1292 1680 w
(\267)2337 1145 w
(\267)1581 1474 w
(\267)1926 1128 w
(\267)2383 1833 w
(\267)2471 1806 w
(\267)1239 1753 w
(\267)2632 1982 w
(\267)1935 1433 w
(\267)1944 1334 w
(\267)2274 2099 w
(\267)2523 2409 w
(\267)1636 1023 w
(\267)2497 2417 w
(\267)2535 1141 w
(\267)1540 1480 w
(\267)2460 1007 w
(\267)2556 2024 w
(\267)2140 2205 w
(\267)1848 1208 w
(\267)1490 973 w
(\267)1223 1591 w
(\267)1693 934 w
(\267)1542 1642 w
(\267)2669 1099 w
(\267)1391 2072 w
(\267)1483 1755 w
(\267)2690 1773 w
(\267)1753 1044 w
(\267)2563 1119 w
(\267)1578 964 w
(\267)2538 2426 w
(\267)2278 1965 w
(\267)1696 1086 w
(\267)1171 1600 w
(\267)2576 1983 w
(\267)2499 1192 w
(\267)2127 2215 w
(\267)2261 2198 w
(\267)1427 1712 w
(\267)2527 995 w
(\267)1251 2006 w
(\267)1548 1755 w
(\267)1634 1598 w
(\267)1309 2092 w
(\267)1609 1905 w
(\267)2522 2318 w
(\267)1761 1081 w
(\267)2466 1082 w
(\267)1270 1929 w
(\267)1183 1734 w
(\267)1171 1536 w
(\267)1501 1699 w
(\267)1956 1391 w
(\267)2235 2440 w
(\267)1516 2095 w
(\267)1296 1808 w
(\267)1358 2119 w
(\267)2511 1941 w
(\267)1851 1474 w
(\267)1652 1058 w
(\267)1609 1596 w
(\267)2221 2059 w
(\267)2083 2192 w
(\267)1260 2030 w
(\267)2434 978 w
(\267)2192 1960 w
(\267)1986 1435 w
(\267)1159 1612 w
(\267)2511 1012 w
(\267)1396 1843 w
(\267)2378 2069 w
(\267)1160 1570 w
(\267)2604 1750 w
(\267)1982 1443 w
(\267)1874 1303 w
(\267)2460 1065 w
(\267)2108 2027 w
(\267)1457 2108 w
(\267)1581 1647 w
(\267)1785 1121 w
(\267)1225 2011 w
(\267)2695 1812 w
(\267)1641 1880 w
(\267)1698 1564 w
(\267)1707 1772 w
(\267)1799 1066 w
(\267)1162 1595 w
(\267)2534 2473 w
(\267)1116 2079 w
(\267)1440 1532 w
(\267)1758 1090 w
(\267)1718 1125 w
(\267)2044 1105 w
(\267)1565 1391 w
(\267)2057 1126 w
(\267)2620 1807 w
(\267)1429 2127 w
(\267)1560 1675 w
(\267)2487 1850 w
(\267)1553 1642 w
(\267)2667 1907 w
(\267)1996 1055 w
(\267)1278 1990 w
(\267)2521 1989 w
(\267)1966 1011 w
(\267)2148 2195 w
(\267)1350 1744 w
(\267)1826 1437 w
(\267)1570 1121 w
(\267)1674 1627 w
(\267)2142 2027 w
(\267)1792 1399 w
(\267)1820 1167 w
(\267)2340 1200 w
(\267)1973 1001 w
(\267)2005 1441 w
(\267)2622 1764 w
(\267)2121 2360 w
(\267)1893 1141 w
(\267)1751 1182 w
(\267)1804 1410 w
(\267)2396 1024 w
(\267)2702 1113 w
(\267)2722 2005 w
(\267)2056 1112 w
(\267)1457 2098 w
(\267)2603 1928 w
(\267)2359 1080 w
(\267)2610 1856 w
(\267)1674 1550 w
(\267)2486 1053 w
(\267)1474 1062 w
(\267)2623 2341 w
(\267)1383 1748 w
(\267)2146 2379 w
(\267)1904 1246 w
(\267)1843 1415 w
(\267)1742 1172 w
(\267)1446 2072 w
(\267)1123 1948 w
(\267)1545 1031 w
(\267)2016 1094 w
(\267)2095 1137 w
(\267)1712 1486 w
(\267)2556 2298 w
(\267)2630 1781 w
(\267)1874 1434 w
(\267)1727 1061 w
(\267)1697 1663 w
(\267)1071 1660 w
(\267)1773 1409 w
(\267)2499 1018 w
(\267)1146 2049 w
(\267)2102 2177 w
(\267)1382 2155 w
(\267)1703 1118 w
(\267)2322 1058 w
(\267)1629 1473 w
(\267)2587 2003 w
(\267)1848 1398 w
(\267)2476 2367 w
(\267)1645 1557 w
(\267)1807 1435 w
(\267)2477 1987 w
(\267)1686 1794 w
(\267)2354 1192 w
(\267)2466 2384 w
(\267)1820 1476 w
(\267)1653 1530 w
(\267)2070 2192 w
(\267)2248 2212 w
(\267)2261 1092 w
(\267)1920 1397 w
(\267)1980 1462 w
(\267)1674 1158 w
(\267)1955 1496 w
(\267)2521 2383 w
(\267)2510 1885 w
(\267)2607 1804 w
(\267)1294 1757 w
(\267)1727 1116 w
(\267)1976 1135 w
(\267)1488 1542 w
(\267)2489 1139 w
(\267)2299 1051 w
(\267)1848 1460 w
(\267)1155 2035 w
(\267)2619 2094 w
(\267)1957 1056 w
(\267)1224 2005 w
(\267)2031 1111 w
(\267)2202 1966 w
(\267)1838 1336 w
(\267)1229 1742 w
(\267)1847 963 w
(\267)2052 1030 w
(\267)2184 2226 w
(\267)1325 1658 w
(\267)1162 1647 w
(\267)1850 1418 w
(\267)1984 1110 w
(\267)1630 1141 w
(\267)2129 2128 w
(\267)2392 1081 w
(\267)1941 1066 w
(\267)2142 992 w
(\267)1296 1724 w
(\267)2719 1942 w
(\267)1167 1717 w
(\267)2433 1069 w
(\267)2184 2288 w
(\267)1090 1663 w
(\267)1815 1042 w
(\267)1982 1043 w
(\267)1865 1015 w
(\267)1762 1061 w
(\267)1735 1138 w
(\267)1164 1649 w
(\267)2517 1968 w
(\267)2229 2017 w
(\267)2131 1016 w
(\267)2008 1336 w
(\267)1760 1130 w
(\267)1223 1830 w
(\267)2406 943 w
(\267)2594 1815 w
(\267)1913 1441 w
(\267)2471 2349 w
(\267)2362 1025 w
(\267)2393 1009 w
(\267)1627 1206 w
(\267)1999 1213 w
(\267)1556 1165 w
(\267)1225 1956 w
(\267)1370 1789 w
(\267)2082 1111 w
(\267)1838 1314 w
(\267)2327 1064 w
(\267)1608 1049 w
(\267)1926 1106 w
(\267)1617 1706 w
(\267)1586 1486 w
(\267)1840 1112 w
(\267)2269 1961 w
(\267)1587 1074 w
(\267)1323 1745 w
(\267)1833 1096 w
(\267)2540 1925 w
(\267)2379 2346 w
(\267)1180 1731 w
(\267)2168 2247 w
(\267)1629 985 w
(\267)1514 1125 w
(\267)2591 1912 w
(\267)1675 1781 w
(\267)2463 2334 w
(\267)1076 1805 w
(\267)1740 1364 w
(\267)1599 1453 w
(\267)2161 1111 w
(\267)1879 1417 w
(\267)1992 1292 w
(\267)1617 1088 w
(\267)1110 1846 w
(\267)1661 1575 w
(\267)2481 1951 w
(\267)1674 1085 w
(\267)1850 1308 w
(\267)2065 1224 w
(\267)1418 1766 w
(\267)1801 1114 w
(\267)1134 1691 w
(\267)1437 1711 w
(\267)1304 1735 w
(\267)1550 1018 w
(\267)1856 1340 w
(\267)1715 1519 w
(\267)2646 1903 w
(\267)2646 1905 w
(\267)1512 1435 w
(\267)2257 2250 w
(\267)1385 1659 w
(\267)2259 1160 w
(\267)2372 1079 w
(\267)1727 1056 w
(\267)1622 2131 w
(\267)2589 2457 w
(\267)2571 1925 w
(\267)2502 963 w
(\267)1136 1722 w
(\267)1198 1720 w
(\267)1911 1354 w
(\267)2468 1937 w
(\267)2555 1832 w
(\267)1542 1075 w
(\267)1103 1965 w
(\267)1211 1894 w
(\267)1198 1596 w
(\267)2149 1000 w
(\267)2226 2066 w
(\267)1902 1431 w
(\267)2202 2264 w
(\267)1400 1849 w
(\267)1211 1556 w
(\267)1148 1964 w
(\267)1695 1592 w
(\267)1674 1734 w
(\267)2042 1100 w
(\267)1907 1070 w
(\267)2390 981 w
(\267)1059 1763 w
(\267)1170 1543 w
(\267)1598 1790 w
(\267)2157 2037 w
(\267)1613 1053 w
(\267)1468 2134 w
(\267)1401 1678 w
(\267)2289 2056 w
(\267)2369 1107 w
(\267)2571 2388 w
(\267)1720 1381 w
(\267)2135 1190 w
(\267)2621 2331 w
(\267)1806 1336 w
(\267)1740 1211 w
(\267)2591 987 w
(\267)1283 1595 w
(\267)1823 1182 w
(\267)1685 1148 w
(\267)2482 1028 w
(\267)1518 1139 w
(\267)1257 1694 w
(\267)2146 2185 w
(\267)2216 2176 w
(\267)1506 2120 w
(\267)2292 1132 w
(\267)1897 1413 w
(\267)1922 1031 w
(\267)1332 1614 w
(\267)2589 1063 w
(\267)1674 1197 w
(\267)2107 2312 w
(\267)1716 1507 w
(\267)1730 1174 w
(\267)2537 1823 w
(\267)2718 2342 w
(\267)2440 1809 w
(\267)2262 930 w
(\267)2482 1916 w
(\267)1856 1028 w
(\267)1545 1465 w
(\267)2638 1807 w
(\267)1419 2087 w
(\267)2591 1106 w
(\267)2504 1057 w
(\267)1560 1746 w
(\267)2322 1174 w
(\267)1750 1167 w
(\267)2142 2003 w
(\267)2530 1897 w
(\267)2487 1032 w
(\267)2446 1132 w
(\267)1527 2131 w
(\267)2537 1910 w
(\267)2604 1889 w
(\267)2237 2281 w
(\267)1522 1035 w
(\267)2424 1089 w
(\267)1924 1383 w
(\267)1716 1469 w
(\267)2084 2269 w
(\267)1319 1785 w
(\267)2425 1907 w
(\267)1460 1667 w
(\267)2566 1927 w
(\267)2461 2393 w
(\267)1908 1359 w
(\267)1997 1114 w
(\267)1924 1281 w
(\267)1245 1765 w
(\267)1773 1173 w
(\267)2205 2271 w
(\267)2323 1914 w
(\267)1214 1788 w
(\267)1411 2151 w
(\267)1531 2155 w
(\267)1728 1136 w
(\267)2629 1958 w
(\267)1466 2181 w
(\267)1144 1934 w
(\267)2634 1910 w
(\267)1753 1195 w
(\267)2571 2385 w
(\267)1234 1791 w
(\267)1221 1603 w
(\267)1252 1771 w
(\267)1314 1987 w
(\267)1905 1070 w
(\267)1122 1581 w
(\267)1887 1362 w
(\267)2407 2400 w
(\267)1883 1382 w
(\267)2298 1110 w
(\267)1244 1569 w
(\267)2371 1159 w
(\267)1910 1178 w
(\267)2314 1070 w
(\267)1243 1985 w
(\267)1564 1448 w
(\267)1861 1115 w
(\267)1880 1133 w
(\267)1437 1766 w
(\267)1698 1105 w
(\267)2278 2025 w
(\267)2705 1883 w
(\267)1473 1061 w
(\267)1532 1134 w
(\267)2140 2221 w
(\267)1495 1657 w
(\267)1589 1738 w
(\267)1858 1432 w
(\267)1690 1541 w
(\267)2128 1068 w
(\267)2401 2439 w
(\267)1999 1476 w
(\267)1360 1953 w
(\267)1252 1871 w
(\267)1492 1555 w
(\267)2193 2086 w
(\267)2215 2030 w
(\267)1397 1688 w
(\267)1441 2097 w
(\267)2473 1104 w
(\267)2570 1902 w
(\267)1723 1079 w
(\267)1886 1393 w
(\267)2181 1910 w
(\267)1889 1298 w
(\267)1993 1076 w
(\267)1527 1526 w
(\267)1694 1689 w
(\267)2563 2354 w
(\267)2367 997 w
(\267)1473 1722 w
(\267)1850 1000 w
(\267)1635 1137 w
(\267)2481 2375 w
(\267)2159 2158 w
(\267)1882 1331 w
(\267)2181 2180 w
(\267)2173 2074 w
(\267)1914 1092 w
(\267)2279 2131 w
(\267)2080 2324 w
(\267)2427 1196 w
(\267)1228 1989 w
(\267)1804 984 w
(\267)1208 1531 w
(\267)2342 1075 w
(\267)1535 1591 w
(\267)1419 1691 w
(\267)2067 2243 w
(\267)2154 1132 w
(\267)1201 1778 w
(\267)1973 1130 w
(\267)1917 1414 w
(\267)2321 1038 w
(\267)1152 1799 w
(\267)1196 1681 w
(\267)1131 1781 w
(\267)1134 1544 w
(\267)2597 2341 w
(\267)1896 1169 w
(\267)1852 1021 w
(\267)1611 1519 w
(\267)2522 2555 w
(\267)1841 1106 w
(\267)1675 1773 w
(\267)2663 1758 w
(\267)1562 1658 w
(\267)1814 1005 w
(\267)1468 2020 w
(\267)1648 1413 w
(\267)1053 1652 w
(\267)1834 1357 w
(\267)1928 1454 w
(\267)1932 1471 w
(\267)2435 1120 w
(\267)1993 1399 w
(\267)1749 1706 w
(\267)1234 1573 w
(\267)2049 2260 w
(\267)1170 1698 w
(\267)2672 2275 w
(\267)1884 1064 w
(\267)1170 1634 w
(\267)2480 1048 w
(\267)1576 1093 w
(\267)2630 2273 w
(\267)1662 1602 w
(\267)1213 1683 w
(\267)1880 1472 w
(\267)1188 2082 w
(\267)1656 1688 w
(\267)1288 1784 w
(\267)1956 1452 w
(\267)2090 2079 w
(\267)2043 2280 w
(\267)2128 2229 w
(\267)1198 1680 w
(\267)1841 1147 w
(\267)1615 1233 w
(\267)2173 2259 w
(\267)1532 1742 w
(\267)1164 1672 w
(\267)1869 1415 w
(\267)1324 1750 w
(\267)2224 1089 w
(\267)1595 1574 w
(\267)2268 2043 w
(\267)1859 1357 w
(\267)1479 2150 w
(\267)2297 1159 w
(\267)1784 1505 w
(\267)1771 1366 w
(\267)2466 1945 w
(\267)2604 2316 w
(\267)1175 1686 w
(\267)1635 1544 w
(\267)2504 1741 w
(\267)1341 1796 w
(\267)1604 1532 w
(\267)2001 1109 w
(\267)1838 1182 w
(\267)1437 2053 w
(\267)1598 1696 w
(\267)1156 1687 w
(\267)2588 1902 w
(\267)1550 1486 w
(\267)2444 1061 w
(\267)2704 1962 w
(\267)2567 2484 w
(\267)1388 1788 w
(\267)2566 1957 w
(\267)2099 1061 w
(\267)1723 1341 w
(\267)1261 1669 w
(\267)2033 1048 w
(\267)1197 1813 w
(\267)2211 2096 w
(\267)1556 1073 w
(\267)1911 1035 w
(\267)2568 1957 w
(\267)2582 1939 w
(\267)1888 1372 w
(\267)2139 2228 w
(\267)1725 1787 w
(\267)1635 1220 w
(\267)1639 1691 w
(\267)1578 1077 w
(\267)1530 971 w
(\267)2640 1855 w
(\267)1906 1450 w
(\267)1164 1650 w
(\267)2278 2063 w
(\267)1221 1707 w
(\267)2368 1179 w
(\267)1703 1186 w
(\267)2559 1100 w
(\267)1928 1430 w
(\267)1782 1403 w
(\267)1628 1312 w
(\267)1752 1187 w
(\267)1393 2069 w
(\267)1720 1095 w
(\267)1753 1362 w
(\267)1586 1164 w
(\267)1840 1105 w
(\267)1694 1765 w
(\267)1241 1653 w
(\267)1321 1750 w
942 2602 942 840 Dl
2834 2602 942 2602 Dl
2834 840 2834 2602 Dl
942 840 2834 840 Dl
(\267)3162 2307 w
(\267)3162 2204 w
(\267)3162 2111 w
(\267)3162 1817 w
(\267)3162 1713 w
(\267)3162 1620 w
(\267)3162 1326 w
(\267)3162 1223 w
(\267)3162 1130 w
(\267)3171 2235 w
(\267)3171 1744 w
(\267)3171 1254 w
(\267)3180 2555 w
(\267)3180 2157 w
(\267)3180 2136 w
(\267)3180 1667 w
(\267)3180 1646 w
(\267)3180 1177 w
(\267)3180 1156 w
(\267)3188 2297 w
(\267)3188 1806 w
(\267)3188 1316 w
(\267)3197 2224 w
(\267)3197 1734 w
(\267)3197 1244 w
(\267)3206 2318 w
(\267)3206 2255 w
(\267)3206 2209 w
(\267)3206 2152 w
(\267)3206 1827 w
(\267)3206 1765 w
(\267)3206 1718 w
(\267)3206 1662 w
(\267)3206 1336 w
(\267)3206 1274 w
(\267)3206 1228 w
(\267)3206 1171 w
(\267)3232 2188 w
(\267)3232 1698 w
(\267)3232 1208 w
(\267)3240 2162 w
(\267)3240 1672 w
(\267)3240 1182 w
(\267)3257 2245 w
(\267)3257 2069 w
(\267)3257 1755 w
(\267)3257 1579 w
(\267)3257 1264 w
(\267)3257 1088 w
(\267)3266 2534 w
(\267)3266 2157 w
(\267)3266 2136 w
(\267)3266 2105 w
(\267)3266 2054 w
(\267)3266 1667 w
(\267)3266 1646 w
(\267)3266 1615 w
(\267)3266 1563 w
(\267)3266 1177 w
(\267)3266 1156 w
(\267)3266 1125 w
(\267)3266 1073 w
(\267)3283 2245 w
(\267)3283 2147 w
(\267)3283 1755 w
(\267)3283 1656 w
(\267)3283 1264 w
(\267)3283 1166 w
(\267)3300 2545 w
(\267)3300 2121 w
(\267)3300 2085 w
(\267)3300 1631 w
(\267)3300 1594 w
(\267)3300 1140 w
(\267)3300 1104 w
(\267)3309 2105 w
(\267)3309 2028 w
(\267)3309 2012 w
(\267)3309 1997 w
(\267)3309 1615 w
(\267)3309 1537 w
(\267)3309 1522 w
(\267)3309 1506 w
(\267)3309 1125 w
(\267)3309 1047 w
(\267)3309 1031 w
(\267)3309 1016 w
(\267)3317 2524 w
(\267)3317 2188 w
(\267)3317 2147 w
(\267)3317 1698 w
(\267)3317 1656 w
(\267)3317 1208 w
(\267)3317 1166 w
(\267)3343 2193 w
(\267)3343 2178 w
(\267)3343 1703 w
(\267)3343 1687 w
(\267)3343 1213 w
(\267)3343 1197 w
(\267)3352 2147 w
(\267)3352 1656 w
(\267)3352 1166 w
(\267)3377 2312 w
(\267)3377 1822 w
(\267)3377 1331 w
(\267)3386 2555 w
(\267)3386 2121 w
(\267)3386 2100 w
(\267)3386 1631 w
(\267)3386 1610 w
(\267)3386 1140 w
(\267)3386 1120 w
(\267)3394 2297 w
(\267)3394 2281 w
(\267)3394 2219 w
(\267)3394 2193 w
(\267)3394 2178 w
(\267)3394 2142 w
(\267)3394 2043 w
(\267)3394 2028 w
(\267)3394 2012 w
(\267)3394 1997 w
(\267)3394 1806 w
(\267)3394 1791 w
(\267)3394 1729 w
(\267)3394 1703 w
(\267)3394 1687 w
(\267)3394 1651 w
(\267)3394 1553 w
(\267)3394 1537 w
(\267)3394 1522 w
(\267)3394 1506 w
(\267)3394 1316 w
(\267)3394 1300 w
(\267)3394 1238 w
(\267)3394 1213 w
(\267)3394 1197 w
(\267)3394 1161 w
(\267)3394 1063 w
(\267)3394 1047 w
(\267)3394 1031 w
(\267)3394 1016 w
(\267)3420 2240 w
(\267)3420 2199 w
(\267)3420 2105 w
(\267)3420 1997 w
(\267)3420 1749 w
(\267)3420 1708 w
(\267)3420 1615 w
(\267)3420 1506 w
(\267)3420 1259 w
(\267)3420 1218 w
(\267)3420 1125 w
(\267)3420 1016 w
(\267)3429 2178 w
(\267)3429 1687 w
(\267)3429 1197 w
(\267)3438 2059 w
(\267)3438 1568 w
(\267)3438 1078 w
(\267)3446 2028 w
(\267)3446 1538 w
(\267)3446 1047 w
(\267)3446 2281 w
(\267)3446 2142 w
(\267)3446 1791 w
(\267)3446 1651 w
(\267)3446 1300 w
(\267)3446 1161 w
(\267)3455 2240 w
(\267)3455 2199 w
(\267)3455 2126 w
(\267)3455 1749 w
(\267)3455 1708 w
(\267)3455 1636 w
(\267)3455 1259 w
(\267)3455 1218 w
(\267)3455 1145 w
(\267)3463 2312 w
(\267)3463 2043 w
(\267)3463 1822 w
(\267)3463 1553 w
(\267)3463 1331 w
(\267)3463 1063 w
(\267)3464 2028 w
(\267)3464 2018 w
(\267)3464 1538 w
(\267)3464 1526 w
(\267)3464 1047 w
(\267)3464 1037 w
(\267)3480 2297 w
(\267)3480 2235 w
(\267)3480 2219 w
(\267)3480 2152 w
(\267)3480 2043 w
(\267)3480 1806 w
(\267)3480 1744 w
(\267)3480 1729 w
(\267)3480 1662 w
(\267)3480 1553 w
(\267)3480 1316 w
(\267)3480 1254 w
(\267)3480 1238 w
(\267)3480 1171 w
(\267)3480 1063 w
(\267)3506 2069 w
(\267)3506 2028 w
(\267)3506 1997 w
(\267)3506 1579 w
(\267)3506 1538 w
(\267)3506 1506 w
(\267)3506 1088 w
(\267)3506 1047 w
(\267)3506 1016 w
(\267)3515 2240 w
(\267)3515 2204 w
(\267)3515 2178 w
(\267)3515 2152 w
(\267)3515 1749 w
(\267)3515 1713 w
(\267)3515 1687 w
(\267)3515 1662 w
(\267)3515 1259 w
(\267)3515 1223 w
(\267)3515 1197 w
(\267)3515 1171 w
(\267)3524 2028 w
(\267)3524 1538 w
(\267)3524 1047 w
(\267)3525 2018 w
(\267)3525 1526 w
(\267)3525 1037 w
(\267)3532 2136 w
(\267)3532 1646 w
(\267)3532 1156 w
(\267)3540 2126 w
(\267)3540 2033 w
(\267)3540 1997 w
(\267)3540 1636 w
(\267)3540 1543 w
(\267)3540 1506 w
(\267)3540 1145 w
(\267)3540 1052 w
(\267)3540 1016 w
(\267)3549 2209 w
(\267)3549 1718 w
(\267)3549 1228 w
(\267)3558 2111 w
(\267)3558 2100 w
(\267)3558 2085 w
(\267)3558 2059 w
(\267)3558 1997 w
(\267)3558 1620 w
(\267)3558 1610 w
(\267)3558 1594 w
(\267)3558 1568 w
(\267)3558 1506 w
(\267)3558 1130 w
(\267)3558 1120 w
(\267)3558 1104 w
(\267)3558 1078 w
(\267)3558 1016 w
(\267)3566 2142 w
(\267)3566 2043 w
(\267)3566 1956 w
(\267)3566 1904 w
(\267)3566 1651 w
(\267)3566 1553 w
(\267)3566 1465 w
(\267)3566 1413 w
(\267)3566 1161 w
(\267)3566 1063 w
(\267)3566 975 w
(\267)3566 923 w
(\267)3584 1946 w
(\267)3584 1904 w
(\267)3584 1455 w
(\267)3584 1413 w
(\267)3584 964 w
(\267)3584 923 w
(\267)3592 2043 w
(\267)3592 1553 w
(\267)3592 1063 w
(\267)3600 2545 w
(\267)3610 1956 w
(\267)3610 1904 w
(\267)3610 1465 w
(\267)3610 1413 w
(\267)3610 975 w
(\267)3610 923 w
(\267)3626 2230 w
(\267)3626 2111 w
(\267)3626 2033 w
(\267)3626 1946 w
(\267)3626 1904 w
(\267)3626 1739 w
(\267)3626 1620 w
(\267)3626 1543 w
(\267)3626 1455 w
(\267)3626 1413 w
(\267)3626 1249 w
(\267)3626 1130 w
(\267)3626 1052 w
(\267)3626 964 w
(\267)3626 923 w
(\267)3643 2318 w
(\267)3643 2255 w
(\267)3643 2100 w
(\267)3643 2085 w
(\267)3643 1827 w
(\267)3643 1765 w
(\267)3643 1610 w
(\267)3643 1594 w
(\267)3643 1336 w
(\267)3643 1274 w
(\267)3643 1120 w
(\267)3643 1104 w
(\267)3661 2178 w
(\267)3661 1687 w
(\267)3661 1197 w
(\267)3669 2199 w
(\267)3669 2033 w
(\267)3669 1708 w
(\267)3669 1543 w
(\267)3669 1218 w
(\267)3669 1052 w
(\267)3678 2043 w
(\267)3678 1553 w
(\267)3678 1063 w
(\267)3695 2230 w
(\267)3695 1739 w
(\267)3695 1249 w
(\267)3713 2318 w
(\267)3713 2255 w
(\267)3713 1827 w
(\267)3713 1765 w
(\267)3713 1336 w
(\267)3713 1274 w
(\267)3729 2240 w
(\267)3729 2214 w
(\267)3729 2178 w
(\267)3729 1904 w
(\267)3729 1749 w
(\267)3729 1724 w
(\267)3729 1687 w
(\267)3729 1413 w
(\267)3729 1259 w
(\267)3729 1233 w
(\267)3729 1197 w
(\267)3729 923 w
(\267)3738 2199 w
(\267)3738 2033 w
(\267)3738 1708 w
(\267)3738 1543 w
(\267)3738 1218 w
(\267)3738 1052 w
(\267)3756 2214 w
(\267)3756 1976 w
(\267)3756 1904 w
(\267)3756 1724 w
(\267)3756 1486 w
(\267)3756 1413 w
(\267)3756 1233 w
(\267)3756 995 w
(\267)3756 923 w
(\267)3764 2199 w
(\267)3764 1997 w
(\267)3764 1708 w
(\267)3764 1506 w
(\267)3764 1218 w
(\267)3764 1016 w
(\267)3772 2018 w
(\267)3772 1527 w
(\267)3772 1037 w
(\267)3781 2250 w
(\267)3781 1971 w
(\267)3781 1760 w
(\267)3781 1481 w
(\267)3781 1269 w
(\267)3781 990 w
(\267)3790 1930 w
(\267)3790 1439 w
(\267)3790 949 w
(\267)3798 2225 w
(\267)3798 2116 w
(\267)3798 1734 w
(\267)3798 1626 w
(\267)3798 1244 w
(\267)3798 1135 w
(\267)3807 2328 w
(\267)3807 1982 w
(\267)3807 1837 w
(\267)3807 1491 w
(\267)3807 1347 w
(\267)3807 1000 w
(\267)3816 2240 w
(\267)3816 1749 w
(\267)3816 1259 w
(\267)3817 2225 w
(\267)3817 2213 w
(\267)3817 1734 w
(\267)3817 1723 w
(\267)3817 1244 w
(\267)3817 1233 w
(\267)3824 1971 w
(\267)3824 1481 w
(\267)3824 990 w
(\267)3832 2240 w
(\267)3832 2121 w
(\267)3832 2080 w
(\267)3832 2064 w
(\267)3832 1749 w
(\267)3832 1631 w
(\267)3832 1589 w
(\267)3832 1574 w
(\267)3832 1259 w
(\267)3832 1140 w
(\267)3832 1099 w
(\267)3832 1083 w
(\267)3849 2219 w
(\267)3849 1728 w
(\267)3849 1238 w
(\267)3850 2199 w
(\267)3850 1708 w
(\267)3850 1218 w
(\267)3859 2131 w
(\267)3859 2080 w
(\267)3859 2064 w
(\267)3859 2044 w
(\267)3859 2018 w
(\267)3859 1987 w
(\267)3859 1961 w
(\267)3859 1930 w
(\267)3859 1641 w
(\267)3859 1589 w
(\267)3859 1574 w
(\267)3859 1553 w
(\267)3859 1527 w
(\267)3859 1496 w
(\267)3859 1470 w
(\267)3859 1439 w
(\267)3859 1151 w
(\267)3859 1099 w
(\267)3859 1083 w
(\267)3859 1063 w
(\267)3859 1037 w
(\267)3859 1006 w
(\267)3859 980 w
(\267)3859 949 w
(\267)3867 2250 w
(\267)3867 1760 w
(\267)3867 1269 w
(\267)3868 2230 w
(\267)3868 2219 w
(\267)3868 1739 w
(\267)3868 1728 w
(\267)3868 1249 w
(\267)3868 1238 w
(\267)3877 2033 w
(\267)3877 1542 w
(\267)3877 1051 w
(\267)3877 2044 w
(\267)3877 1553 w
(\267)3877 1063 w
(\267)3893 2069 w
(\267)3893 1982 w
(\267)3893 1579 w
(\267)3893 1491 w
(\267)3893 1088 w
(\267)3893 1000 w
(\267)3901 2142 w
(\267)3901 1651 w
(\267)3901 1161 w
(\267)3910 1971 w
(\267)3910 1481 w
(\267)3910 990 w
(\267)3918 2240 w
(\267)3918 2069 w
(\267)3918 1749 w
(\267)3918 1579 w
(\267)3918 1259 w
(\267)3918 1088 w
(\267)3936 2271 w
(\267)3936 2255 w
(\267)3936 2224 w
(\267)3936 1982 w
(\267)3936 1781 w
(\267)3936 1765 w
(\267)3936 1734 w
(\267)3936 1490 w
(\267)3936 1290 w
(\267)3936 1274 w
(\267)3936 1244 w
(\267)3936 1000 w
(\267)3944 2183 w
(\267)3944 2090 w
(\267)3944 2074 w
(\267)3944 1961 w
(\267)3944 1693 w
(\267)3944 1599 w
(\267)3944 1584 w
(\267)3944 1470 w
(\267)3944 1202 w
(\267)3944 1109 w
(\267)3944 1094 w
(\267)3944 980 w
(\267)3952 2199 w
(\267)3952 2142 w
(\267)3952 2116 w
(\267)3952 2105 w
(\267)3952 1708 w
(\267)3952 1651 w
(\267)3952 1626 w
(\267)3952 1615 w
(\267)3952 1218 w
(\267)3952 1161 w
(\267)3952 1135 w
(\267)3952 1125 w
(\267)3954 1992 w
(\267)3954 1982 w
(\267)3954 1501 w
(\267)3954 1490 w
(\267)3954 1011 w
(\267)3954 1000 w
(\267)3961 2168 w
(\267)3961 1677 w
(\267)3961 1187 w
(\267)3970 2131 w
(\267)3970 2090 w
(\267)3970 2074 w
(\267)3970 1641 w
(\267)3970 1599 w
(\267)3970 1584 w
(\267)3970 1151 w
(\267)3970 1109 w
(\267)3970 1094 w
(\267)4004 2271 w
(\267)4004 2255 w
(\267)4004 2224 w
(\267)4004 1781 w
(\267)4004 1765 w
(\267)4004 1734 w
(\267)4004 1290 w
(\267)4004 1274 w
(\267)4004 1244 w
(\267)4013 2183 w
(\267)4013 1693 w
(\267)4013 1202 w
(\267)4021 2116 w
(\267)4021 1626 w
(\267)4021 1135 w
(\267)4030 2168 w
(\267)4030 1677 w
(\267)4030 1187 w
(\267)4039 2199 w
(\267)4039 2142 w
(\267)4039 2131 w
(\267)4039 2105 w
(\267)4039 1708 w
(\267)4039 1651 w
(\267)4039 1641 w
(\267)4039 1615 w
(\267)4039 1218 w
(\267)4039 1161 w
(\267)4039 1151 w
(\267)4039 1125 w
(\267)4047 2043 w
(\267)4047 1930 w
(\267)4047 1553 w
(\267)4047 1439 w
(\267)4047 1063 w
(\267)4047 949 w
(\267)4056 2090 w
(\267)4056 1599 w
(\267)4056 1109 w
(\267)4065 2224 w
(\267)4065 1734 w
(\267)4065 1244 w
(\267)4073 1930 w
(\267)4073 1439 w
(\267)4073 949 w
(\267)4116 2328 w
(\267)4116 2131 w
(\267)4116 2043 w
(\267)4116 1837 w
(\267)4116 1641 w
(\267)4116 1553 w
(\267)4116 1347 w
(\267)4116 1151 w
(\267)4116 1063 w
(\267)4168 2224 w
(\267)4168 1734 w
(\267)4168 1244 w
(\267)4176 2054 w
(\267)4176 1940 w
(\267)4176 1563 w
(\267)4176 1449 w
(\267)4176 1073 w
(\267)4176 959 w
(\267)4193 2323 w
(\267)4193 2204 w
(\267)4193 2183 w
(\267)4193 2080 w
(\267)4193 1832 w
(\267)4193 1713 w
(\267)4193 1693 w
(\267)4193 1589 w
(\267)4193 1341 w
(\267)4193 1223 w
(\267)4193 1202 w
(\267)4193 1099 w
(\267)4211 2323 w
(\267)4211 1832 w
(\267)4211 1341 w
(\267)4228 2193 w
(\267)4228 2090 w
(\267)4228 2049 w
(\267)4228 1904 w
(\267)4228 1703 w
(\267)4228 1599 w
(\267)4228 1558 w
(\267)4228 1413 w
(\267)4228 1213 w
(\267)4228 1109 w
(\267)4228 1068 w
(\267)4228 923 w
(\267)4245 2209 w
(\267)4245 1718 w
(\267)4245 1228 w
(\267)4253 2224 w
(\267)4253 1734 w
(\267)4253 1244 w
(\267)4262 2261 w
(\267)4262 2043 w
(\267)4262 1770 w
(\267)4262 1553 w
(\267)4262 1280 w
(\267)4262 1063 w
(\267)4271 2193 w
(\267)4271 2090 w
(\267)4271 1703 w
(\267)4271 1599 w
(\267)4271 1213 w
(\267)4271 1109 w
(\267)4288 1982 w
(\267)4288 1920 w
(\267)4288 1491 w
(\267)4288 1429 w
(\267)4288 1000 w
(\267)4288 938 w
(\267)4314 2183 w
(\267)4314 2080 w
(\267)4314 1693 w
(\267)4314 1589 w
(\267)4314 1202 w
(\267)4314 1099 w
(\267)4330 2224 w
(\267)4330 2209 w
(\267)4330 1734 w
(\267)4330 1718 w
(\267)4330 1244 w
(\267)4330 1228 w
(\267)4348 2002 w
(\267)4348 1951 w
(\267)4348 1512 w
(\267)4348 1460 w
(\267)4348 1021 w
(\267)4348 969 w
(\267)4366 2142 w
(\267)4366 2043 w
(\267)4366 1651 w
(\267)4366 1553 w
(\267)4366 1161 w
(\267)4366 1063 w
(\267)4374 2028 w
(\267)4374 1966 w
(\267)4374 1537 w
(\267)4374 1475 w
(\267)4374 1047 w
(\267)4374 985 w
(\267)4391 2043 w
(\267)4391 2028 w
(\267)4391 1997 w
(\267)4391 1966 w
(\267)4391 1553 w
(\267)4391 1537 w
(\267)4391 1506 w
(\267)4391 1475 w
(\267)4391 1063 w
(\267)4391 1047 w
(\267)4391 1016 w
(\267)4391 985 w
(\267)4408 1992 w
(\267)4408 1501 w
(\267)4408 1011 w
(\267)4416 1961 w
(\267)4416 1470 w
(\267)4416 980 w
(\267)4417 2193 w
(\267)4417 2090 w
(\267)4417 1971 w
(\267)4417 1703 w
(\267)4417 1599 w
(\267)4417 1481 w
(\267)4417 1213 w
(\267)4417 1109 w
(\267)4417 990 w
(\267)4434 2018 w
(\267)4434 2007 w
(\267)4434 1527 w
(\267)4434 1517 w
(\267)4434 1037 w
(\267)4434 1026 w
(\267)4435 1971 w
(\267)4435 1481 w
(\267)4435 990 w
(\267)4451 2193 w
(\267)4451 2090 w
(\267)4451 2018 w
(\267)4451 1703 w
(\267)4451 1599 w
(\267)4451 1527 w
(\267)4451 1213 w
(\267)4451 1109 w
(\267)4451 1037 w
(\267)4459 1992 w
(\267)4459 1982 w
(\267)4459 1951 w
(\267)4459 1940 w
(\267)4459 1910 w
(\267)4459 1501 w
(\267)4459 1491 w
(\267)4459 1460 w
(\267)4459 1449 w
(\267)4459 1418 w
(\267)4459 1011 w
(\267)4459 1000 w
(\267)4459 969 w
(\267)4459 959 w
(\267)4459 928 w
(\267)4486 1971 w
(\267)4486 1910 w
(\267)4486 1481 w
(\267)4486 1418 w
(\267)4486 990 w
(\267)4486 928 w
(\267)4494 2245 w
(\267)4494 2028 w
(\267)4494 1755 w
(\267)4494 1537 w
(\267)4494 1264 w
(\267)4494 1047 w
(\267)4502 2261 w
(\267)4502 2224 w
(\267)4502 1946 w
(\267)4502 1770 w
(\267)4502 1734 w
(\267)4502 1455 w
(\267)4502 1280 w
(\267)4502 1244 w
(\267)4502 964 w
(\267)4520 2323 w
(\267)4520 1961 w
(\267)4520 1910 w
(\267)4520 1832 w
(\267)4520 1470 w
(\267)4520 1418 w
(\267)4520 1341 w
(\267)4520 980 w
(\267)4520 928 w
(\267)4537 2307 w
(\267)4537 2230 w
(\267)4537 2219 w
(\267)4537 1817 w
(\267)4537 1739 w
(\267)4537 1729 w
(\267)4537 1326 w
(\267)4537 1249 w
(\267)4537 1238 w
(\267)4546 2276 w
(\267)4546 1786 w
(\267)4546 1295 w
(\267)4562 2043 w
(\267)4562 1553 w
(\267)4562 1063 w
(\267)4571 1971 w
(\267)4571 1910 w
(\267)4571 1481 w
(\267)4571 1418 w
(\267)4571 990 w
(\267)4571 928 w
(\267)4580 2245 w
(\267)4580 1755 w
(\267)4580 1264 w
(\267)4589 2199 w
(\267)4589 2085 w
(\267)4589 2049 w
(\267)4589 1930 w
(\267)4589 1708 w
(\267)4589 1594 w
(\267)4589 1558 w
(\267)4589 1439 w
(\267)4589 1218 w
(\267)4589 1104 w
(\267)4589 1068 w
(\267)4589 949 w
(\267)4597 2033 w
(\267)4597 1982 w
(\267)4597 1971 w
(\267)4597 1940 w
(\267)4597 1543 w
(\267)4597 1491 w
(\267)4597 1481 w
(\267)4597 1449 w
(\267)4597 1052 w
(\267)4597 1000 w
(\267)4597 990 w
(\267)4597 959 w
(\267)4605 2230 w
(\267)4605 1739 w
(\267)4605 1249 w
(\267)4623 2219 w
(\267)4623 2023 w
(\267)4623 1961 w
(\267)4623 1729 w
(\267)4623 1532 w
(\267)4623 1470 w
(\267)4623 1238 w
(\267)4623 1042 w
(\267)4623 980 w
(\267)4640 2033 w
(\267)4640 2002 w
(\267)4640 1992 w
(\267)4640 1940 w
(\267)4640 1543 w
(\267)4640 1512 w
(\267)4640 1501 w
(\267)4640 1449 w
(\267)4640 1052 w
(\267)4640 1021 w
(\267)4640 1011 w
(\267)4640 959 w
(\267)4657 2261 w
(\267)4657 2240 w
(\267)4657 2219 w
(\267)4657 1770 w
(\267)4657 1749 w
(\267)4657 1729 w
(\267)4657 1280 w
(\267)4657 1259 w
(\267)4657 1238 w
(\267)4666 2018 w
(\267)4666 1956 w
(\267)4666 1920 w
(\267)4666 1527 w
(\267)4666 1465 w
(\267)4666 1429 w
(\267)4666 1037 w
(\267)4666 975 w
(\267)4666 938 w
(\267)4674 2199 w
(\267)4674 2085 w
(\267)4674 2049 w
(\267)4674 2033 w
(\267)4674 1930 w
(\267)4674 1708 w
(\267)4674 1594 w
(\267)4674 1558 w
(\267)4674 1543 w
(\267)4674 1439 w
(\267)4674 1218 w
(\267)4674 1104 w
(\267)4674 1068 w
(\267)4674 1052 w
(\267)4674 949 w
(\267)4683 2023 w
(\267)4683 2002 w
(\267)4683 1971 w
(\267)4683 1532 w
(\267)4683 1512 w
(\267)4683 1481 w
(\267)4683 1042 w
(\267)4683 1021 w
(\267)4683 990 w
(\267)4700 2028 w
(\267)4700 1935 w
(\267)4700 1537 w
(\267)4700 1444 w
(\267)4700 1047 w
(\267)4700 954 w
(\267)4708 2307 w
(\267)4708 1951 w
(\267)4708 1817 w
(\267)4708 1460 w
(\267)4708 1326 w
(\267)4708 969 w
(\267)4718 2276 w
(\267)4718 1940 w
(\267)4718 1920 w
(\267)4718 1786 w
(\267)4718 1449 w
(\267)4718 1429 w
(\267)4718 1295 w
(\267)4718 959 w
(\267)4718 938 w
(\267)4726 2193 w
(\267)4726 2080 w
(\267)4726 2049 w
(\267)4726 1703 w
(\267)4726 1589 w
(\267)4726 1558 w
(\267)4726 1213 w
(\267)4726 1099 w
(\267)4726 1068 w
(\267)4743 2323 w
(\267)4743 1946 w
(\267)4743 1832 w
(\267)4743 1455 w
(\267)4743 1341 w
(\267)4743 964 w
(\267)4777 2188 w
(\267)4777 2085 w
(\267)4777 2049 w
(\267)4777 1698 w
(\267)4777 1594 w
(\267)4777 1558 w
(\267)4777 1208 w
(\267)4777 1104 w
(\267)4777 1068 w
(\267)4812 2039 w
(\267)4812 2028 w
(\267)4812 1976 w
(\267)4812 1548 w
(\267)4812 1537 w
(\267)4812 1486 w
(\267)4812 1057 w
(\267)4812 1047 w
(\267)4812 995 w
(\267)4821 2292 w
(\267)4821 2188 w
(\267)4821 2085 w
(\267)4821 1801 w
(\267)4821 1698 w
(\267)4821 1594 w
(\267)4821 1310 w
(\267)4821 1208 w
(\267)4821 1104 w
(\267)4829 2261 w
(\267)4829 2240 w
(\267)4829 2219 w
(\267)4829 2049 w
(\267)4829 2023 w
(\267)4829 1992 w
(\267)4829 1770 w
(\267)4829 1749 w
(\267)4829 1729 w
(\267)4829 1558 w
(\267)4829 1532 w
(\267)4829 1501 w
(\267)4829 1280 w
(\267)4829 1259 w
(\267)4829 1238 w
(\267)4829 1068 w
(\267)4829 1042 w
(\267)4829 1011 w
(\267)4837 2276 w
(\267)4837 1786 w
(\267)4837 1295 w
(\267)4846 1946 w
(\267)4846 1455 w
(\267)4846 964 w
(\267)4863 2007 w
(\267)4863 1987 w
(\267)4863 1517 w
(\267)4863 1496 w
(\267)4863 1026 w
(\267)4863 1006 w
(\267)4872 2276 w
(\267)4872 2261 w
(\267)4872 1786 w
(\267)4872 1770 w
(\267)4872 1295 w
(\267)4872 1280 w
(\267)4898 2261 w
(\267)4898 2039 w
(\267)4898 1997 w
(\267)4898 1770 w
(\267)4898 1548 w
(\267)4898 1506 w
(\267)4898 1280 w
(\267)4898 1057 w
(\267)4898 1016 w
(\267)4906 2292 w
(\267)4906 1801 w
(\267)4906 1310 w
(\267)4915 2142 w
(\267)4915 2049 w
(\267)4915 1651 w
(\267)4915 1558 w
(\267)4915 1161 w
(\267)4915 1068 w
3102 2602 3102 840 Dl
4994 2602 3102 2602 Dl
4994 840 4994 2602 Dl
3102 840 4994 840 Dl
cleartomark
showpage
saveobj restore
end
DpostDict begin
done
end
%ps_include: inclusion end
grestore
PS-include-dict-dw begin
o 0 ne {gsave A defaultmatrix /A ed llx lly nice urx ury nice
	initgraphics 0.1 setlinewidth boxpath stroke grestore} if
clear o-stack aload pop
context end restore
%ps_include: end
%%EndDocument
DpostDict begin
/saveobj save def
mark
11 B f
(Figure 5.)1 422 1 1387 4867 t
11 C f
(TSPLIB)1865 4867 w
11 R f
(instances)2289 4867 w
11 C f
(dsj1000)2719 4867 w
11 R f
(\(left\) and)1 404 1 3209 4867 t
11 C f
(pr1002)3641 4867 w
11 R f
(\(right\).)4065 4867 w
12 R f
(For certain structured geometric instances, SA)5 2365 1 970 5200 t
9 R f
(2)3350 5224 w
12 R f
(can catch up to Lin-Kernighan)4 1578 1 3462 5200 t
(when)720 5350 w
12 I f
(N)1018 5350 w
12 R f
( as observed in Section 4, LK often is signifi-)9 2256(is much smaller, especially since,)4 1647 2 1137 5350 t
( for the)2 395( Thus)1 324( such instances than it is for random geometric ones.)9 2741(cantly slower for)2 860 4 720 5500 t
(1000-city clustered instance)2 1359 1 720 5650 t
12 C f
(dsj1000)2114 5650 w
12 R f
(from)2653 5650 w
12 C f
(TSPLIB)2922 5650 w
12 R f
( of Figure)2 482(depicted on the left side)4 1169 2 3389 5650 t
( LK can be made in the time required for one)10 2267(5, fewer than 500 runs of)5 1251 2 720 5800 t
12 S f
(a =)1 192 1 4278 5800 t
12 R f
(100 run of)2 520 1 4520 5800 t
(SA)720 5950 w
9 R f
(2)888 5974 w
12 R f
(\(as opposed to over 2000 LK runs for a 1000-city random geometric instance\), and)13 4060 1 980 5950 t
( for the best of 500 LK runs is 1.35)9 1778(the average excess)2 910 2 720 6100 t
12 I f
(%)3408 6100 w
12 R f
(, compared to a 1.27)4 1020 1 3508 6100 t
12 I f
(%)4528 6100 w
12 R f
(average)4668 6100 w
(excess for SA)2 670 1 720 6250 t
9 R f
(2)1405 6274 w
12 R f
( however, that)2 687(. Note,)1 355 2 1460 6250 t
12 C f
(dsj1000)2534 6250 w
12 R f
( of an outlier in)4 746(is somewhat)1 600 2 3070 6250 t
12 C f
(TSPLIB)4447 6250 w
12 R f
(, as)1 161 1 4879 6250 t
( Most)1 327( to be a hard instance for Lin-Kernighan.)7 2093(it was specifically generated)3 1419 3 720 6400 t
12 C f
(TSPLIB)4608 6400 w
12 R f
( typical is the sit-)4 839( More)1 322(instances do not exhibit such strongly separated clusters of cities.)9 3159 3 720 6550 t
( instance)1 428(uation with the printed circuit board)5 1749 2 720 6700 t
12 C f
(pr1002)2973 6700 w
12 R f
(depicted on the right side of Fig-)6 1601 1 3439 6700 t
( instance, 1000 runs of Lin-)5 1353( this)1 211( For)1 233(ure 5, where the LK slowdown is much less severe.)9 2523 4 720 6850 t
( be performed in the time required by a single run of SA)12 2799(Kernighan can)1 709 2 720 7000 t
9 R f
(2)4243 7024 w
12 R f
(with)4336 7000 w
12 S f
(a =)1 192 1 4588 7000 t
12 R f
(100,)4830 7000 w
(and yield an expected best excess of excess of 1.57)9 2471 1 720 7150 t
12 I f
(%)3191 7150 w
12 R f
( 1.89)1 241(versus excess of)2 784 2 3323 7150 t
12 I f
(%)4348 7150 w
12 R f
(for an aver-)2 561 1 4479 7150 t
(age SA)1 349 1 720 7300 t
9 R f
(2)1084 7324 w
12 R f
(run.)1169 7300 w
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 56 56
%%Page: 57 57
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
57 pagesetup
12 R f
(- 57 -)2 260 1 2750 500 t
(Nevertheless, SA)1 833 1 970 870 t
9 R f
(2)1818 894 w
12 R f
( capable of catching Lin-Kernighan on geometric)6 2373(does seem to be)3 764 2 1903 870 t
( random distance)2 873( For)1 253( increases.)1 526(instances as the number of cities \(or the clustering\))8 2668 4 720 1020 t
(matrix instances, ones that in effect have no structural complexity at all, something quite)13 4320 1 720 1170 t
( when)1 327( Although)1 552(different happens, as illustrated in Table 11.)6 2345 3 720 1320 t
12 I f
(N)4012 1320 w
12 S f
(=)4142 1320 w
12 R f
(100, SA)1 431 1 4258 1320 t
9 R f
(2)4704 1344 w
12 R f
(with)4826 1320 w
12 S f
(a =)1 192 1 720 1470 t
12 R f
( be better than 2-Opt even on a time-equalized basis, when)10 3028(100 again appears to)3 1050 2 962 1470 t
12 I f
(N)720 1620 w
12 S f
(=)850 1620 w
12 R f
(1000 it is worse on average than just a)8 1906 1 966 1620 t
12 I f
(single)2910 1620 w
12 R f
(run of 2-Opt, with an average excess)6 1804 1 3236 1620 t
(of 99)1 250 1 720 1770 t
12 I f
(%)970 1770 w
12 R f
(versus 70)1 457 1 1100 1770 t
12 I f
(%)1557 1770 w
12 R f
( can this be?)3 597( How)1 292(for 2-Opt.)1 480 3 1687 1770 t
10 S f
(_ ___________________________________________________________________)1 3396 1 1182 1925 t
10 R f
(Random Distance Matrices)2 1087 1 2840 2045 t
10 S f
(_ ___________________________________________________________________)1 3396 1 1182 2095 t
10 R f
( Time in Seconds)3 697( Running)1 561(Average Percent Excess)2 963 3 2240 2245 t
10 S f
(_ ___________________________________________________________________)1 3396 1 1182 2295 t
10 R f
(Algorithm 10)1 915 1 1452 2445 t
7 R f
(2)2372 2405 w
10 R f
(10)2632 2445 w
7 R f
(2. 5)1 93 1 2737 2405 t
10 R f
(10)3055 2445 w
7 R f
(3)3160 2405 w
10 R f
(10)3480 2445 w
7 R f
(2)3585 2405 w
10 R f
(10)3847 2445 w
7 R f
(2. 5)1 93 1 3952 2405 t
10 R f
(10)4380 2445 w
7 R f
(3)4485 2405 w
10 S f
(_ ___________________________________________________________________)1 3396 1 1182 2495 t
10 R f
(SA)1232 2645 w
7 R f
(2)1371 2665 w
10 R f
(,)1414 2645 w
10 S f
(a =)1 158 1 1464 2645 t
10 R f
( 101.00 447.00 2250.00)3 1325( 99)1 365( 37)1 423(100 12)1 753 4 1662 2645 t
10 S f
(_ ___________________________________________________________________)1 3396 1 1182 2695 t
10 R f
( 1.0)1 475( 0.01 0.12)2 850( 70)1 365( 51)1 423(2-Opt 40)1 1183 5 1232 2845 t
( 70.00)1 475( 17.40)1 425( 6.80)1 425( 61)1 365( 38)1 423( 23)1 375(Best of 1000 2-Opts)3 808 7 1232 2965 t
( 690.00)1 475( 173.00)1 425( 68.00)1 425( 59)1 365( 36)1 423( 21)1 325(Best of 10000 2-Opts)3 858 7 1232 3085 t
( 1.2)1 475( 0.02 0.16)2 850( 33)1 365( 20)1 423(3-Opt 10.2)1 1183 5 1232 3235 t
( 14.00 48.00 241.00)3 1325( 28)1 365( 13)1 423( 2.8)1 375(Best of 1000 3-Opts)3 808 5 1232 3355 t
( 139.00 481.00 2400.00)3 1325( 27)1 365( 12)1 423( 2.3)1 325(Best of 10000 3-Opts)3 858 5 1232 3475 t
( 2.0)1 475( 0.05 0.32)2 850( 3.6)1 365( 2.5)1 423(Lin-Kernighan 1.4)1 1183 5 1232 3625 t
10 S f
( \347)1 -3396(_ ___________________________________________________________________)1 3396 2 1182 3675 t
(\347)1182 3625 w
(\347)1182 3525 w
(\347)1182 3425 w
(\347)1182 3325 w
(\347)1182 3225 w
(\347)1182 3125 w
(\347)1182 3025 w
(\347)1182 2925 w
(\347)1182 2825 w
(\347)1182 2725 w
(\347)1182 2625 w
(\347)1182 2525 w
(\347)1182 2425 w
(\347)1182 2325 w
(\347)1182 2225 w
(\347)1182 2125 w
(\347)1182 2025 w
(\347)2165 3675 w
(\347)2165 3625 w
(\347)2165 3525 w
(\347)2165 3425 w
(\347)2165 3325 w
(\347)2165 3225 w
(\347)2165 3125 w
(\347)2165 3025 w
(\347)2165 2925 w
(\347)2165 2825 w
(\347)2165 2725 w
(\347)2165 2625 w
(\347)2165 2525 w
(\347)2165 2425 w
(\347)2165 2325 w
(\347)2165 2225 w
(\347)2165 2125 w
(\347)2165 2025 w
(\347)3278 3675 w
(\347)3278 3595 w
(\347)3278 3495 w
(\347)3278 3395 w
(\347)3278 3295 w
(\347)3278 3195 w
(\347)3278 3095 w
(\347)3278 2995 w
(\347)3278 2895 w
(\347)3278 2795 w
(\347)3278 2695 w
(\347)3278 2595 w
(\347)3278 2495 w
(\347)3278 2395 w
(\347)3278 2295 w
(\347)3278 2195 w
(\347)4578 3675 w
(\347)4578 3625 w
(\347)4578 3525 w
(\347)4578 3425 w
(\347)4578 3325 w
(\347)4578 3225 w
(\347)4578 3125 w
(\347)4578 3025 w
(\347)4578 2925 w
(\347)4578 2825 w
(\347)4578 2725 w
(\347)4578 2625 w
(\347)4578 2525 w
(\347)4578 2425 w
(\347)4578 2325 w
(\347)4578 2225 w
(\347)4578 2125 w
(\347)4578 2025 w
11 B f
(Table 11.)1 436 1 1621 3915 t
11 R f
(Results for SA)2 649 1 2113 3915 t
8 R f
(2)2775 3937 w
11 R f
(on random distance matrices.)3 1287 1 2852 3915 t
12 R f
( performance)1 643(Recall from Section 3.2 that for random distance matrix instances, the)10 3427 2 970 4233 t
( the)1 197( If)1 160( the method chosen for generating starting tours.)7 2471(of 2-Opt depends strongly on)4 1492 4 720 4383 t
( 70)1 183(Greedy algorithm is used, we have an average excess of)9 2973 2 720 4533 t
12 I f
(%)3876 4533 w
12 R f
(when)4039 4533 w
12 I f
(N)4361 4533 w
12 S f
(=)4491 4533 w
12 R f
(1000, as)1 433 1 4607 4533 t
( we use Nearest Neighbor starts, however, as does SA)9 2642( If)1 146( 4.)1 126(reported in Table)2 841 4 720 4683 t
9 R f
(2)4490 4707 w
12 R f
(, the aver-)2 495 1 4545 4683 t
( 96)1 163(age excess increases to)3 1139 2 720 4833 t
12 I f
(%)2022 4833 w
12 R f
( if we start with a random tour, which the SA)10 2302(. And)1 309 2 2122 4833 t
9 R f
(2)4748 4857 w
12 R f
(tour)4846 4833 w
( a few temperatures during which over half of all proposed moves are)12 3389(may resemble after)2 931 2 720 4983 t
(accepted, the average excess for 2-Opt balloons to 290)8 2727 1 720 5133 t
12 I f
(%)3447 5133 w
12 R f
( seems to be the reason)5 1176(. This)1 317 2 3547 5133 t
(SA)720 5283 w
9 R f
(2)888 5307 w
12 R f
(has so much trouble with random distance matrices, since other experiments imply)11 4059 1 981 5283 t
( starts in SA)3 619(that replacing NN starts by random)5 1732 2 720 5433 t
9 R f
(2)3086 5457 w
12 R f
(does not significantly affect final tour)5 1860 1 3180 5433 t
( that if we view SA)5 935(quality. Note)1 659 2 720 5583 t
9 R f
(2)2329 5607 w
12 R f
( random-start 2-Opt,)2 985(simply as a method for improving)5 1640 2 2415 5583 t
( from 290)2 486( reduces the average percentage excess)5 1892( It)1 139(it is stunningly successful.)3 1287 4 720 5733 t
12 I f
(%)4524 5733 w
12 R f
(to 99)1 250 1 4660 5733 t
12 I f
(%)4910 5733 w
12 R f
(,)5010 5733 w
( best of 10,000 runs of random-start 2-Opt still has an aver-)11 2869(almost a factor of 3, while the)6 1451 2 720 5883 t
(age excess of 240)3 861 1 720 6033 t
12 I f
(%)1581 6033 w
12 R f
( the true competition is Greedy-start 2-Opt, and here)8 2560(. Unfortunately,)1 799 2 1681 6033 t
(SA)720 6183 w
9 R f
(2)888 6207 w
12 R f
( a disadvantage because the randomization inherent in its operation prevents it)11 3851(is at)1 207 2 982 6183 t
( flaw)1 250( This)1 281( with instances of this type.)5 1352(from exploiting a good starting tour when dealing)7 2437 4 720 6333 t
(becomes more damaging as)3 1355 1 720 6483 t
12 I f
(N)2112 6483 w
12 R f
(increases, and it is fatal when)5 1450 1 2229 6483 t
12 I f
(N)3716 6483 w
12 R f
( at still)2 344( \(Starting)1 489(= 1000.)1 374 3 3833 6483 t
( the starting tour, does not improve things)7 2076(lower temperatures, so as to preserve more of)7 2244 2 720 6633 t
(much. SA)1 528 1 720 6783 t
9 R f
(2)1263 6807 w
12 R f
( more like 2-Opt itself, and so does not get much)10 2518(now behaves more and)3 1156 2 1366 6783 t
(advantage from the annealing process.\))4 1884 1 720 6933 t
(If we consider 3-Opt and Lin-Kernighan, SA)6 2281 1 970 7119 t
9 R f
(2)3266 7143 w
12 R f
( distance)1 446(is outclassed on random)3 1222 2 3372 7119 t
(matrices even for smaller values of)5 1976 1 720 7269 t
12 I f
(N)2783 7269 w
12 R f
(and even when ignoring running time)5 2090 1 2950 7269 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 57 57
%%Page: 58 58
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
58 pagesetup
12 R f
(- 58 -)2 260 1 2750 500 t
( allowing SA)2 640(considerations. Even)1 1034 2 720 870 t
9 R f
(2)2409 894 w
12 R f
( not enough)2 575(a further factor of 100 in running time is)8 1968 2 2497 870 t
( Setting)1 423(for it to catch Lin-Kernighan.)4 1502 2 720 1020 t
12 S f
(a =)1 192 1 2696 1020 t
12 R f
( SA)1 203( reduces)1 417(10 , 000)2 350 3 2938 1020 t
9 R f
(2)3923 1044 w
12 R f
('s average excess for)3 1062 1 3978 1020 t
12 I f
(N)720 1170 w
12 S f
(=)850 1170 w
12 R f
(100 only to 3.6)3 728 1 966 1170 t
12 I f
(%)1694 1170 w
12 R f
(, still much worse than the average of 1.4)8 1982 1 1794 1170 t
12 I f
(%)3776 1170 w
12 R f
(for a single run of LK.)5 1080 1 3906 1170 t
14 B f
( Potential Improvements)2 1475(5.3. Other)1 637 2 720 1500 t
12 R f
( bring simulated)2 809(In the previous section we saw how two key speedup ideas sufficed to)12 3511 2 720 1723 t
( Lin-Kernighan, at least for certain types of)7 2082(annealing to the brink of competitiveness with)6 2238 2 720 1873 t
( have been proposed for)4 1184( this section, we consider four additional ideas that)8 2498(instances. In)1 638 3 720 2023 t
( permutation-)1 673(pushing annealing to the front of the race: adaptive scheduling, using a)11 3647 2 720 2173 t
( for generating random moves, expanding the neighborhood structure to)9 3637(based method)1 683 2 720 2323 t
(include 3-Opt moves, and exploiting parallelism.)5 2356 1 720 2473 t
14 I f
(Adaptive Scheduling)1 1154 1 720 2803 t
12 R f
(Both SA)1 425 1 720 3026 t
9 R f
(1)1160 3050 w
12 R f
(and SA)1 364 1 1253 3026 t
9 R f
(2)1632 3050 w
12 R f
(use cooling schedules in which the number of trials is the same for)12 3314 1 1726 3026 t
( this)1 207( Although)1 516( same factor.)2 621(each temperature and temperatures are always reduced by the)8 2976 4 720 3176 t
( in the original Kirkpatrick et al. [1983] paper, that paper)10 2837(sort of schedule was proposed)4 1483 2 720 3326 t
( to the analogy to physical annealing)6 1793( According)1 571( adaptive approach.)2 946(also suggests a more)3 1010 4 720 3476 t
( spend enough time to reach)5 1441(emphasized in that paper, one should)5 1867 2 720 3626 t
12 I f
(equilibrium)4076 3626 w
12 R f
(at each)1 354 1 4686 3626 t
( term ``equilibrium'' was not defined, however,)6 2350( The)1 255(temperature before cooling further.)3 1715 3 720 3776 t
( technical meaning in terms of Markov chains was intended.)9 3059(and it is doubtful that its)5 1261 2 720 3926 t
( seemed to have something more physical in mind, emphasizing)9 3089(Instead, Kirkpatrick et al.)3 1231 2 720 4076 t
(an analogy to)2 693 1 720 4226 t
12 I f
(specific heat)1 629 1 1466 4226 t
12 R f
(, which they measured by the variance of solution values)9 2945 1 2095 4226 t
( the variance, the longer it presumably)6 1930( higher)1 352( The)1 261(encountered at a given temperature.)4 1777 4 720 4376 t
( the longer one should spend at the temperature, or)9 2607(takes to reach equilibrium, and so)5 1713 2 720 4526 t
(alternatively, the slower one should lower the temperature.)7 2827 1 720 4676 t
( the)1 195( At)1 198( adaptive schedules.)2 1000(Various ways have been proposed to implement such)7 2677 4 970 4862 t
( Golden and Skiscim [1986] proposed performing a number of trials at each)12 3680(simplest end,)1 640 2 720 5012 t
(temperature that was a varying multiple of a fixed, small)9 2753 1 720 5162 t
12 I f
(epoch length L)2 720 1 3506 5162 t
12 R f
( end of)2 341( at the)2 300(. If)1 173 3 4226 5162 t
(a sequence of)2 670 1 720 5312 t
12 I f
(L)1429 5312 w
12 R f
( fixed bound)2 623(trials the current tour length was more than a)8 2229 2 1535 5312 t
12 S f
(e)4425 5312 w
12 R f
(away from)1 524 1 4516 5312 t
(the length at the beginning, another)5 1798 1 720 5462 t
12 I f
(L)2567 5462 w
12 R f
( at the same temperature.)4 1285(trials were performed)2 1072 2 2683 5462 t
( several)1 422( the more complicated end,)4 1517( At)1 233(Otherwise the temperature was lowered.)4 2148 4 720 5612 t
( more literally)2 737(researchers have followed the suggestions of Kirkpatrick et al. [1983])9 3583 2 720 5762 t
( 1986], [Aarts & van Laarhoven, 1985], [Lam & Delosme, 1986], [Lam,)11 3635([Huang et al.,)2 685 2 720 5912 t
( detailed statistics are kept on the tour lengths encoun-)9 2688( these implementations,)2 1155(1988]. In)1 477 3 720 6062 t
( the variance can be com-)5 1289(tered at the current temperature, so that a precise estimate of)10 3031 2 720 6212 t
( formula \(differing from approach to)5 1814( estimate is then used in a complicated)7 1925(puted. This)1 581 3 720 6362 t
(approach\) to determine the next temperature, thus controlling the cooling rate.)10 3760 1 720 6512 t
( studies of these adaptive cooling schedules provide enough)8 2973(None of the published)3 1097 2 970 6698 t
( tuned)1 307( appears possible that when properly)5 1813( It)1 145(information for us to fully evaluate them.)6 2055 4 720 6848 t
( a given average tour quality)5 1401(they might yield something like a factor-of-two speedup for)8 2919 2 720 6998 t
( spend less time at unproductive temperatures\), although it is not clear)11 3430(\(by allowing us to)3 890 2 720 7148 t
( is it clear how far the)6 1138( Nor)1 261(that this remains true when we use low-temperature starts.)8 2921 3 720 7298 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 58 58
%%Page: 59 59
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
59 pagesetup
12 R f
(- 59 -)2 260 1 2750 500 t
( processes differ from nonadaptive schedules of)6 2331(schedules that result from these adaptive)5 1989 2 720 870 t
(SA)720 1020 w
9 R f
(1)888 1044 w
12 R f
(and SA)1 373 1 990 1020 t
9 R f
(2)1378 1044 w
12 R f
( to)1 142( detailed study that compares these approaches to each other and)10 3272(. A)1 193 3 1433 1020 t
(non-adaptive schedules on a wide spectrum of instances would be welcome.)10 3658 1 720 1170 t
(One simple idea that we)4 1213 1 970 1356 t
12 I f
(have)2226 1356 w
12 R f
( ``cutoffs'' \261 another idea)4 1290(evaluated is that of using)4 1255 2 2495 1356 t
( the number of)3 704( suggested that as soon as)5 1237( Kirkpatrick)1 615(due originally to Kirkpatrick [1982].)4 1764 4 720 1506 t
( had reached a large figure like 10)7 1650(accepted moves)1 764 2 720 1656 t
12 I f
(%)3134 1656 w
12 R f
(of the planned trials for a given tem-)7 1774 1 3266 1656 t
( This)1 280( declare equilibrium and lower the temperature at once.)8 2707(perature, one might as well)4 1333 3 720 1806 t
( times even for low temperature starts, given that)8 2395(can have a significant effect on running)6 1925 2 720 1956 t
( with a 50)3 477(we have defined the latter to mean starting)7 2053 2 720 2106 t
12 I f
(%)3250 2106 w
12 R f
( on limited test-)3 761( Based)1 353(accept rate.)1 546 3 3380 2106 t
( appears that adding such cutoffs to SA)7 1913(ing, it)1 285 2 720 2256 t
9 R f
(2)2933 2280 w
12 R f
(yields speedups of from 10 to 25)6 1600 1 3022 2256 t
12 I f
(%)4622 2256 w
12 R f
(, with-)1 318 1 4722 2256 t
(out measurable effect on average tour length.)6 2171 1 720 2406 t
14 I f
(Permutation-Based Move Generation)2 2106 1 720 2736 t
12 R f
(One way in which SA)4 1134 1 720 2959 t
9 R f
(1)1869 2983 w
12 R f
(and SA)1 375 1 1973 2959 t
9 R f
(2)2363 2983 w
12 I f
(are)2467 2959 w
12 R f
( choice of when to stop the)6 1414(adaptive is in their)3 950 2 2676 2959 t
( we have)2 469( As)1 215( 2-Opt phase.)2 687(annealing process and switch over to a final deterministic)8 2949 4 720 3109 t
( at low temperatures)3 1023(already observed, a significant portion of the overall time spent is)10 3297 2 720 3259 t
( Theo-)1 349( is being pondered and few moves are being accepted.)9 2619(while this adaptive decision)3 1352 3 720 3409 t
( is worthwhile to continue annealing in this)7 2138(retical results about annealing suggest that it)6 2182 2 720 3559 t
( the time could be)4 914(situation, rather than to switch to 2-Opt, but it still would seem that)12 3406 2 720 3709 t
( have to try many moves)5 1235( such low temperatures, we typically)5 1807( At)1 189(more effectively used.)2 1089 4 720 3859 t
( such a situation, the)4 1010( In)1 167(before we find one that has a realistic chance of being accepted.)11 3143 3 720 4009 t
( with)1 290(standard move-selection rule used by simulated annealing, random selection)8 4030 2 720 4159 t
( be random)2 558(replacement, seems inherently less efficient as a search heuristic than would)10 3762 2 720 4309 t
(selection)720 4459 w
12 I f
(without)1179 4459 w
12 R f
( desirable to have)3 850( at higher temperatures, it might be)6 1694(replacement. Even)1 924 3 1572 4459 t
(a fixed bound on how long one can go without examining a given potential move.)14 3934 1 720 4609 t
( Schevon [1989])2 811(This issue was first addressed by Johnson, Aragon, McGeoch, and)9 3259 2 970 4795 t
( that problem, one chose a ran-)6 1526( In)1 167( in the context of Graph Partitioning.)6 1816(who discussed it)2 811 4 720 4945 t
( than sim-)2 488( Rather)1 383( graph being partitioned.)3 1191(dom move by choosing a random vertex of the)8 2258 4 720 5095 t
( replacement, Johnson et al. considered the following alterna-)8 2981(ply sample vertices without)3 1339 2 720 5245 t
( the beginning of each sequence of)6 1690(tive. At)1 395 2 720 5395 t
12 I f
(N)2839 5395 w
12 R f
(trials, where)1 599 1 2953 5395 t
12 I f
(N)3587 5395 w
12 R f
(is the number of vertices in)5 1338 1 3702 5395 t
( the vertices were)3 855( Then)1 310( vertices was constructed.)3 1246(the graph, a random permutation of the)6 1909 4 720 5545 t
( sequence, in the order determined by the permutation, after which a new)12 3664(considered in)1 656 2 720 5695 t
( one gets the advantage of sampling without)7 2232( Thus)1 316(random permutation was generated.)3 1772 3 720 5845 t
( on limited tests,)3 813( Based)1 358(replacement while still enjoying a high degree of randomization.)8 3149 3 720 5995 t
( be a good idea, although the result was surprisingly not so much a reduc-)14 3555(this appeared to)2 765 2 720 6145 t
(tion in running time as an improvement in final solution value.)10 3020 1 720 6295 t
( the beginning of each temperature,)5 1706( At)1 181( this idea to the TSP as follows.)7 1531(We can adapt)2 652 4 970 6481 t
(we construct a list of triples \()6 1446 1 720 6631 t
12 I f
(i)2176 6631 w
12 R f
(,)2220 6631 w
12 I f
(j)2270 6631 w
12 R f
(,)2314 6631 w
12 I f
(a)2354 6631 w
12 R f
(\), where)1 399 1 2424 6631 t
12 I f
(i)2860 6631 w
12 R f
(is a city,)2 419 1 2931 6631 t
12 I f
(j)3387 6631 w
12 R f
(is a city on)3 546 1 3458 6631 t
12 I f
(i)4040 6631 w
12 R f
('s current neighbor-)2 966 1 4074 6631 t
( itself can change from temperature to temperature when we are using)11 3512(hood list \(which)2 808 2 720 6781 t
(dynamic pruning\), and)2 1093 1 720 6931 t
12 I f
(a)1844 6931 w
12 S f
(\316)1944 6931 w
12 R f
( triple represents the move in which)6 1729({0,1}. This)1 571 2 2059 6931 t
12 I f
(i)4390 6931 w
12 R f
(is)4455 6931 w
12 I f
(t)4567 6931 w
9 R f
(2)4616 6955 w
12 R f
(,)4671 6931 w
12 I f
(j)4731 6931 w
12 R f
(is)4795 6931 w
12 I f
(t)4906 6931 w
9 R f
(3)4955 6955 w
12 R f
(,)5010 6931 w
(and)720 7081 w
12 I f
(t)930 7081 w
9 R f
(1)979 7105 w
12 R f
(is the tour predecessor \(successor\) of)5 1818 1 1071 7081 t
12 I f
(i)2927 7081 w
12 R f
(if)2999 7081 w
12 I f
(a)3111 7081 w
12 S f
(=)3221 7081 w
12 R f
(0 \()1 138 1 3337 7081 t
12 I f
(a)3475 7081 w
12 S f
(=)3585 7081 w
12 R f
( then randomly per-)3 975(1\). We)1 364 2 3701 7081 t
( the corresponding moves according to their order in the)9 2943(mute this list and consider)4 1377 2 720 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 59 59
%%Page: 60 60
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
60 pagesetup
12 R f
(- 60 -)2 260 1 2750 500 t
( we construct a new random permu-)6 1744( the last one has been considered,)6 1616(permutation. When)1 960 3 720 870 t
( been)1 268(tation and repeat, until the total number of trials allowed for this temperature has)13 4052 2 720 1020 t
(exhausted.)720 1170 w
( of a version SA)4 860(Based on limited tests)3 1118 2 970 1356 t
9 R f
(2)2963 1380 w
12 R f
(augmented to include this permutation-)4 1972 1 3068 1356 t
( do)1 163( We)1 240(based randomization, the augmentation appears to offer significant advantages.)8 3917 3 720 1506 t
( solution quality observed for graph partitioning, but we do)9 3089(not obtain the improved)3 1231 2 720 1656 t
( of)1 156(obtain substantial reductions in running time without any noticeable deterioration)9 4164 2 720 1806 t
( 1000-city random Euclidean instances, this running time reduc-)8 3113( our)1 192( For)1 229(solution quality.)1 786 4 720 1956 t
(tion ranges from 20 to 35)5 1234 1 720 2106 t
12 I f
(%)1954 2106 w
12 R f
( to more rapid termination of the)6 1583( this, perhaps half is due)5 1184(. Of)1 219 3 2054 2106 t
( total number of temperatures considered is reduced by about)9 3192(annealing process \(the)2 1128 2 720 2256 t
(10)720 2406 w
12 I f
(%)840 2406 w
12 R f
( other half comes from the fact that this way of generating moves can be sig-)15 3778(\). The)1 322 2 940 2406 t
( comes about because of the different)6 1824( This)1 278(nificantly more efficient on a per-move basis.)6 2218 3 720 2556 t
(way topologically illegal moves are handled under the two schemes.)9 3284 1 720 2706 t
(In our ordinary scheme,)3 1159 1 970 2892 t
12 I f
(t)2163 2892 w
9 R f
(2)2212 2916 w
12 R f
( to be on)3 432('s two tour neighbors are very likely)6 1773 2 2267 2892 t
12 I f
(t)4507 2892 w
9 R f
(2)4556 2916 w
12 R f
('s neigh-)1 429 1 4611 2892 t
( random)1 398(bor list, and so there is always a chance that they will be picked when we make a)17 3922 2 720 3042 t
(choice for)1 493 1 720 3192 t
12 I f
(t)1253 3192 w
9 R f
(3)1302 3216 w
12 R f
( we pick again, and there is a chance we will pick one of)13 2855( this happens)2 648(. If)1 180 3 1357 3192 t
( of fruitless choices, we declare the trial)7 1937( avoid getting in an endless loop)6 1581( \(To)1 237(them again.)1 565 4 720 3342 t
(an)720 3492 w
12 I f
(a priori)1 372 1 863 3492 t
12 R f
(failure if the current neighbor list for our)7 1961 1 1265 3492 t
12 I f
(t)3256 3492 w
9 R f
(2)3305 3516 w
12 R f
( not contain at least)4 940(candidate does)1 710 2 3390 3492 t
( the average number of calls to random number generator is more)11 3234( Thus)1 309(three elements.\))1 777 3 720 3642 t
( move under the original scheme, whereas it is precisely one under the new)13 3713(than one per)2 607 2 720 3792 t
(permutation-based scheme \(made at the time the permutation is constructed\).)9 3708 1 720 3942 t
( a worthwhile)2 696(It would thus appear that a permutation-based randomization offers)8 3374 2 970 4128 t
( Moreover,)1 604( one that is relatively straightforward to incorporate.)7 2799(improvement, and)1 917 3 720 4278 t
( idea of cutoffs mentioned in)5 1471(permutation-based randomization combines well with the)5 2849 2 720 4428 t
( our limited tests, the speedup)5 1443( In)1 161( speedups.)1 501(the previous subsection to obtain even greater)6 2215 4 720 4578 t
( raw SA)2 402(of this combined approach over)4 1537 2 720 4728 t
9 R f
(2)2674 4752 w
12 R f
(was typically by a factor of two or more, all at)10 2276 1 2764 4728 t
( tests will be summarized in Section 5.4)7 1919( These)1 346( cost in terms of tour quality.)6 1395(no significant)1 660 4 720 4878 t
(\(Table 14\), where we examine a still faster alternative to standard annealing.)11 3680 1 720 5028 t
( ideas is the reduction of running)6 1673(Note that although the direct advantage of these)7 2397 2 970 5214 t
( a given total amount)4 1032( For)1 231( reduction can be traded for improved tour quality:)8 2469(time, such a)2 588 4 720 5364 t
( can now double the temperature length, and as we have already seen,)12 3369(of running time, we)3 951 2 720 5514 t
(increases in temperature length are likely to result in better average tour quality.)12 3851 1 720 5664 t
(The ideas of adaptive scheduling, cutoffs, and permutation-based randomization are)9 4070 1 970 5850 t
( an application area.)3 997(all generic ones, in that they are not specifically tied to the TSP as)13 3323 2 720 6000 t
( second)1 366( The)1 249( mentioned above originated in other domains.)6 2259(Indeed, some of the proposals)4 1446 4 720 6150 t
( more problem-specific,)2 1174(proposal we consider in this section, also due to Kirkpatrick, is)10 3146 2 720 6300 t
(although it too might be relevant to other problem domains, at least by analogy.)13 3833 1 720 6450 t
14 I f
(Including 3-Opt Moves)2 1297 1 720 6780 t
12 R f
( optimization algorithm as 3-Opt, it is natu-)7 2116(Given that 2-Opt is not nearly as good a local)9 2204 2 720 7003 t
( just to 2-Opt)3 699(ral to wonder whether we are losing something by restricting ourselves)10 3621 2 720 7153 t
( this as motivation,)3 1065( With)1 349(moves in our implementations of simulated annealing.)6 2906 3 720 7303 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 60 60
%%Page: 61 61
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
61 pagesetup
12 R f
(- 61 -)2 260 1 2750 500 t
( based on 3-Opt)3 796(Kirkpatrick [1984] proposed an alternative TSP neighborhood structure)7 3524 2 720 870 t
( he was using unpruned neighborhoods, Kirkpatrick could not afford to)10 3629(moves. Since)1 691 2 720 1020 t
( 3-Opt moves and the resulting)5 1526(consider all possible)2 1001 2 720 1170 t
12 S f
(Q)3285 1170 w
12 R f
(\()3384 1170 w
12 I f
(N)3434 1170 w
9 R f
(3)3529 1122 w
12 R f
( thus)1 239( He)1 207(\) neighborhood size.)2 1000 3 3594 1170 t
( 3-Opt moves similar to the)5 1331(restricted attention to a particular easy-to-generate subclass of)7 2989 2 720 1320 t
(one used in the Or-Opt algorithm [Or,1976] described in Section 3.5.)10 3320 1 720 1470 t
( is restricted to 3-Opt moves in which one of the three segments)12 3108(In Or-Opt, attention)2 962 2 970 1656 t
( this to)2 335( expanded)1 493( Kirkpatrick)1 618(into which the tour is initially broken is of length 3 or less.)12 2874 4 720 1806 t
( can randomly)2 707( One)1 269( less.)1 251(include moves in which one of the segments is of length 10 or)12 3093 4 720 1956 t
( 10)1 158(pick this segment \(for which there are)6 1876 2 720 2106 t
12 I f
(N)2754 2106 w
12 R f
(possibilities\) and then randomly decide how)5 2168 1 2872 2106 t
(to reinsert it into the tour \(for which there are roughly 2)11 2719 1 720 2256 t
12 I f
(N)3449 2256 w
12 R f
(possibilities, depending on the)3 1477 1 3563 2256 t
( the segment is inserted and on whether it is inserted in)11 2687(neighboring cities between which)3 1633 2 720 2406 t
( yields a total of roughly 20)6 1354( This)1 278(its original order or is reversed\).)5 1570 3 720 2556 t
12 I f
(N)3932 2556 w
9 R f
(2)4027 2508 w
12 R f
(possibilities, larger)1 923 1 4117 2556 t
( by a constant)3 676(than the unpruned 2-Opt neighborhood size that Kirkpatrick used, but only)10 3644 2 720 2706 t
( 3-)1 141( 100-city random geometric instances, he reports that using this restricted)10 3632(factor. For)1 547 3 720 2856 t
( factor-of-8.5 running time increase, he obtained a 1.2)8 2928(Opt neighborhood and a)3 1292 2 720 3006 t
12 I f
(%)4940 3006 w
12 R f
(improvement in average tour length over 2-Opt annealing.)7 2803 1 720 3156 t
( As)1 201( best way to spend the extra time.)7 1665(It is not clear, however, whether this was the)8 2204 3 970 3342 t
( annealing \(with-)2 825(we have observed, increasing the running time for ordinary 2-Opt-based)9 3495 2 720 3492 t
( average per-)2 649(out changing the neighborhood structure\) will typically by itself lower the)10 3671 2 720 3642 t
( evaluate the value of 3-Opt moves for simulated annealing more)10 3344( To)1 215(centage excess.)1 761 3 720 3792 t
( SA)1 203(fully, we augmented our implementation)4 2037 2 720 3942 t
9 R f
(2)2975 3966 w
12 R f
( resulting)1 472( The)1 266(to include 3-Opt moves.)3 1222 3 3080 3942 t
(implementation, which we shall denote by SA)6 2220 1 720 4092 t
9 R f
(3)2955 4116 w
12 R f
(, was then extensively tested.)4 1402 1 3010 4092 t
( we had learned from our experience with normal 2-Opt annealing and)11 3504(Given what)1 566 2 970 4278 t
(with 2- and 3-Opt themselves, SA)5 1725 1 720 4428 t
9 R f
(3)2460 4452 w
12 R f
( as did)2 348(does not take precisely the same approach)6 2129 2 2563 4428 t
( structure with one based)4 1209( rather than replacing the 2-Opt neighborhood)6 2214(Kirkpatrick. First,)1 897 3 720 4578 t
( includes both sorts of)4 1163(solely on 3-Opt moves, we use a neighborhood structure that)9 3157 2 720 4728 t
( as the neighbor-list implementation of 3-Opt itself looks for 2-Opt as well as)13 3759(moves \(just)1 561 2 720 4878 t
( each temperature using a 3-Opt-)5 1602( do this by spending half our time at)8 1786( We)1 232(3-Opt moves\).)1 700 4 720 5028 t
( Second,)1 457( and half using our standard pruned 2-Opt neighborhood.)8 2850(based neighborhood,)1 1013 3 720 5178 t
( instead prune the 3-Opt)4 1173(we don't require that our 3-Opt moves have a short segment, but)11 3147 2 720 5328 t
( to that in which we pruned the 2-Opt neigh-)9 2174(neighborhood structure in an analogous way)5 2146 2 720 5478 t
( neighbor lists to restrict)4 1224( be specific, we use our bounded-length)6 1994( To)1 207(borhood structure.)1 895 4 720 5628 t
(the possibilities for both)3 1169 1 720 5778 t
12 I f
(t)1919 5778 w
9 R f
(5)1968 5802 w
12 R f
(and)2053 5778 w
12 I f
(t)2256 5778 w
9 R f
(3)2305 5802 w
12 R f
(.)2360 5778 w
( We)1 243( description of how a ``random'' 3-Opt move is chosen.)9 2835(Here is a high-level)3 992 3 970 5964 t
(first randomly choose)2 1069 1 720 6114 t
12 I f
(t)1829 6114 w
9 R f
(1)1878 6138 w
12 R f
( tour neighbors)2 746(and one of its)3 681 2 1973 6114 t
12 I f
(t)3439 6114 w
9 R f
(2)3488 6138 w
12 R f
(. Next,)1 362 1 3543 6114 t
12 I f
(t)3944 6114 w
9 R f
(3)3993 6138 w
12 R f
(is randomly chosen)2 953 1 4087 6114 t
( \(pruned\) neighbor list for)4 1265(from the current)2 787 2 720 6264 t
12 I f
(t)2806 6264 w
9 R f
(2)2855 6288 w
12 R f
( then randomly choose)3 1103(. We)1 260 2 2910 6264 t
12 I f
(t)4307 6264 w
9 R f
(4)4356 6288 w
12 R f
(\(both neigh-)1 595 1 4445 6264 t
(bors of)1 345 1 720 6414 t
12 I f
(t)1103 6414 w
9 R f
(3)1152 6438 w
12 R f
( randomly)1 498(are now possible, whereas under 2-Opt the choice was forced\), and)10 3297 2 1245 6414 t
(choose)720 6564 w
12 I f
(t)1083 6564 w
9 R f
(5)1132 6588 w
12 R f
( for)1 171(from the current neighbor list)4 1417 2 1217 6564 t
12 I f
(t)2836 6564 w
9 R f
(4)2885 6588 w
12 R f
( that some members of the neighbor)6 1736(. \(Note)1 364 2 2940 6564 t
(list may for topological reasons be ineligible to serve as)9 2729 1 720 6714 t
12 I f
(t)3484 6714 w
9 R f
(5)3533 6738 w
12 R f
( the search for a topologi-)5 1258(. In)1 194 2 3588 6714 t
( Finally,)1 445( choices before giving up.\))4 1336(cally legal candidate, we allow ourselves 5 random)7 2539 3 720 6864 t
( or two possibilities for)4 1154(there will be either one)4 1148 2 720 7014 t
12 I f
(t)3061 7014 w
9 R f
(6)3110 7038 w
12 R f
(, and in the latter case we choose ran-)8 1875 1 3165 7014 t
( at most 3200)3 667( initial neighbor lists of length 20, this yields a total of)11 2662(domly. For)1 569 3 720 7164 t
12 I f
(N)4618 7164 w
12 R f
(neigh-)4733 7164 w
(bors and typically far fewer because of topological considerations.)8 3193 1 720 7314 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 61 61
%%Page: 62 62
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
62 pagesetup
12 R f
(- 62 -)2 260 1 2750 500 t
(Table 12 summarizes some of the results obtained for SA)9 2770 1 970 870 t
9 R f
(3)3755 894 w
12 R f
( testbeds.)1 450(on our standard)2 749 2 3841 870 t
( and)1 206(For these results we used pruned neighborhoods based on neighbor lists of length 20)13 4114 2 720 1020 t
(performed runs with)2 997 1 720 1170 t
12 S f
(a)1755 1170 w
12 R f
(20)1841 1170 w
12 I f
(N)1971 1170 w
12 R f
( the values of)3 671( that for)2 397( Note)1 301(moves per temperature.)2 1147 4 2089 1170 t
12 S f
(a)4644 1170 w
12 R f
(tested)4759 1170 w
( 3-Opt moves that survive our)5 1484(\(40 and 100\), this means that only a small fraction of the)11 2836 2 720 1320 t
( move-generation would thus)3 1468( Permutation-based)1 983( investigated.)1 663(pruning will actually be)3 1206 4 720 1470 t
( and so we used)4 815(have been more expensive than the standard move-generation method,)8 3505 2 720 1620 t
( experiments indi-)2 878( did not use cutoffs for the results reported here, although)10 2761( We)1 226(the latter.)1 455 4 720 1770 t
(cate that, as with SA)4 1047 1 720 1920 t
9 R f
(2)1782 1944 w
12 R f
( 15-30)1 323(, they would yield a)4 1007 2 1837 1920 t
12 I f
(%)3167 1920 w
12 R f
(speedup without significant loss of)4 1730 1 3310 1920 t
( simplicity, we spend the first half of each temperature \()10 2795( For)1 237(tour quality.)1 598 3 720 2070 t
12 S f
(a)4350 2070 w
12 R f
(10)4436 2070 w
12 I f
(N)4566 2070 w
12 R f
(moves\))4686 2070 w
( This)1 285( the second half using the 3-Opt neighborhood.)7 2339(using the 2-Opt neighborhood and)4 1696 3 720 2220 t
( would obtain by alternating between neigh-)6 2194(appears to yield similar results to those we)7 2126 2 720 2370 t
(borhoods or randomly choosing a neighborhood at each move.)8 3005 1 720 2520 t
10 S f
(_ ______________________________________________________________)1 3145 1 1307 2675 t
10 R f
( Time in Seconds)3 697( Running)1 494(Average Percent Excess)2 963 3 2248 2825 t
10 S f
(_ ______________________________________________________________)1 3145 1 1307 2875 t
10 R f
(10)2248 3025 w
7 R f
(2)2353 2985 w
10 R f
(10)2626 3025 w
7 R f
(2. 5)1 93 1 2731 2985 t
10 R f
(10)3062 3025 w
7 R f
(3)3167 2985 w
10 S f
(\347)3285 3035 w
(\347)3285 2975 w
(\347)3285 2875 w
(\347)3285 2775 w
10 R f
(10)3362 3025 w
7 R f
(2)3467 2985 w
10 R f
(10)3753 3025 w
7 R f
(2. 5)1 93 1 3858 2985 t
10 R f
(10)4254 3025 w
7 R f
(3)4359 2985 w
10 S f
(_ ______________________________________________________________)1 3145 1 1307 3065 t
(_ ______________________________________________________________)1 3145 1 1307 3085 t
10 R f
( Euclidean Matrices)2 798(Algorithm Random)1 1576 2 1519 3225 t
10 S f
(_ ______________________________________________________________)1 3145 1 1307 3275 t
10 R f
(SA)1357 3425 w
7 R f
(2)1496 3445 w
10 S f
(a =)1 158 1 1689 3425 t
10 R f
( 805)1 443( 204)1 449( 58)1 300( 1.7)1 378( 1.5)1 436(40 1.3)1 509 6 1887 3425 t
(SA)1357 3545 w
7 R f
(3)1496 3565 w
10 S f
(a =)1 158 1 1689 3545 t
10 R f
( 1150)1 443( 269)1 449( 81)1 300( 1.5)1 378( 1.2)1 436(40 1.2)1 509 6 1887 3545 t
(SA)1357 3695 w
7 R f
(2)1496 3715 w
10 S f
(a =)1 158 1 1689 3695 t
10 R f
( 1910)1 443( 655)1 449( 141)1 300( 1.6)1 378( 1.3)1 436(100 1.1)1 509 6 1887 3695 t
(SA)1357 3815 w
7 R f
(3)1496 3835 w
10 S f
(a =)1 158 1 1689 3815 t
10 R f
( 2700)1 443( 674)1 449( 206)1 300( 1.3)1 378( 1.2)1 436(100 1.1)1 509 6 1887 3815 t
10 S f
(_ ______________________________________________________________)1 3145 1 1307 3865 t
10 R f
( 1.3)1 378( 0.9)1 436( 0.9)1 298(Best of 1000 LK's)3 741 4 1357 4015 t
10 S f
(\347)3285 4025 w
(\347)3285 3975 w
(\347)3285 3875 w
(\347)3285 3775 w
(\347)3285 3675 w
(\347)3285 3575 w
(\347)3285 3475 w
(\347)3285 3375 w
10 R f
( 478)1 443(40 144)1 549 2 3410 4015 t
10 S f
(_ ______________________________________________________________)1 3145 1 1307 4055 t
(_ ______________________________________________________________)1 3145 1 1307 4075 t
10 R f
( Distance Matrices)2 748(Algorithm Random)1 1601 2 1519 4215 t
10 S f
(_ ______________________________________________________________)1 3145 1 1307 4265 t
10 R f
(SA)1357 4415 w
7 R f
(2)1496 4435 w
10 S f
(a =)1 158 1 1689 4415 t
10 R f
( 2250)1 443( 447)1 449( 101)1 300( 99)1 378( 37)1 436(100 12)1 509 6 1887 4415 t
(SA)1357 4565 w
7 R f
(3)1496 4585 w
10 S f
(a =)1 158 1 1689 4565 t
10 R f
( 1520)1 443( 294)1 449( 61)1 300( 23)1 378( 8)1 436(40 5)1 509 6 1887 4565 t
(SA)1357 4685 w
7 R f
(3)1496 4705 w
10 S f
(a =)1 158 1 1689 4685 t
10 R f
( 3670)1 443( 881)1 449( 147)1 300( 18)1 378( 7)1 436(100 4)1 509 6 1887 4685 t
10 S f
(_ ______________________________________________________________)1 3145 1 1307 4735 t
10 R f
( 2)1 443( 0)1 449( 0)1 300( 3.5)1 378( 2.5)1 436( 1.4)1 298(One LK)1 324 7 1774 4885 t
10 S f
( \347)1 -3145(_ ______________________________________________________________)1 3145 2 1307 4935 t
(\347)1307 4875 w
(\347)1307 4775 w
(\347)1307 4675 w
(\347)1307 4575 w
(\347)1307 4475 w
(\347)1307 4375 w
(\347)1307 4275 w
(\347)1307 4175 w
(\347)1307 4075 w
(\347)1307 3975 w
(\347)1307 3875 w
(\347)1307 3775 w
(\347)1307 3675 w
(\347)1307 3575 w
(\347)1307 3475 w
(\347)1307 3375 w
(\347)1307 3275 w
(\347)1307 3175 w
(\347)1307 3075 w
(\347)1307 2975 w
(\347)1307 2875 w
(\347)1307 2775 w
(\347)2173 4935 w
(\347)2173 4875 w
(\347)2173 4775 w
(\347)2173 4675 w
(\347)2173 4575 w
(\347)2173 4475 w
(\347)2173 4375 w
(\347)2173 4275 w
(\347)2173 4175 w
(\347)2173 4075 w
(\347)2173 3975 w
(\347)2173 3875 w
(\347)2173 3775 w
(\347)2173 3675 w
(\347)2173 3575 w
(\347)2173 3475 w
(\347)2173 3375 w
(\347)2173 3275 w
(\347)2173 3175 w
(\347)2173 3075 w
(\347)2173 2975 w
(\347)2173 2875 w
(\347)2173 2775 w
(\347)3285 4935 w
(\347)3285 4865 w
(\347)3285 4765 w
(\347)3285 4665 w
(\347)3285 4565 w
(\347)3285 4465 w
(\347)3285 4365 w
(\347)4452 4935 w
(\347)4452 4875 w
(\347)4452 4775 w
(\347)4452 4675 w
(\347)4452 4575 w
(\347)4452 4475 w
(\347)4452 4375 w
(\347)4452 4275 w
(\347)4452 4175 w
(\347)4452 4075 w
(\347)4452 3975 w
(\347)4452 3875 w
(\347)4452 3775 w
(\347)4452 3675 w
(\347)4452 3575 w
(\347)4452 3475 w
(\347)4452 3375 w
(\347)4452 3275 w
(\347)4452 3175 w
(\347)4452 3075 w
(\347)4452 2975 w
(\347)4452 2875 w
(\347)4452 2775 w
11 B f
(Table 12.)1 436 1 1238 5175 t
11 R f
(Results for simulated annealing with and without 3-Opt moves.)8 2792 1 1730 5175 t
12 R f
( our 2-Opt moves at each temper-)6 1632(Note from the table that the replacement of half of)9 2438 2 970 5493 t
( Moreover,)1 565(ature by 3-Opt moves does seem to yield significantly improved tour lengths.)11 3755 2 720 5643 t
( more effective)2 737(although the replacement also increases running time, this appears to be a)11 3583 2 720 5793 t
( simply to perform 2-Opt annealing with a slightly larger)9 2818(way to use the extra time than)6 1502 2 720 5943 t
(value of)1 397 1 720 6093 t
12 S f
(a)1154 6093 w
12 R f
( random Euclidean instances with)4 1654( for)1 177(. Indeed,)1 453 3 1230 6093 t
12 I f
(N)3552 6093 w
12 S f
(>)3682 6093 w
12 R f
(100, SA)1 401 1 3798 6093 t
9 R f
(3)4214 6117 w
12 R f
(with)4307 6093 w
12 S f
(a =)1 192 1 4559 6093 t
12 R f
(40 is)1 239 1 4801 6093 t
(both better and faster than SA)5 1558 1 720 6243 t
9 R f
(2)2293 6267 w
12 R f
(with)2402 6243 w
12 S f
(a =)1 192 1 2669 6243 t
12 R f
( the one 10,000-city instance we)5 1669(100. For)1 460 2 2911 6243 t
( enough runs to determine which produced better tours, both)9 3011(tested, we did not perform)4 1309 2 720 6393 t
(algorithms producing excesses in the 1.5 to 1.6)7 2275 1 720 6543 t
12 I f
(%)2995 6543 w
12 R f
(range, but some relative speed informa-)5 1914 1 3126 6543 t
(tion is as follows: SA)4 1077 1 720 6693 t
9 R f
(2)1812 6717 w
12 R f
(with)1907 6693 w
12 S f
(a =)1 192 1 2161 6693 t
12 R f
( cutoffs and permutation-)3 1252(100 took 14 hours \(6.5 with)5 1385 2 2403 6693 t
(based move generation\) and SA)4 1533 1 720 6843 t
9 R f
(3)2268 6867 w
12 R f
(with)2353 6843 w
12 S f
(a =)1 192 1 2597 6843 t
12 R f
(40 took 8 hours \(5.5 with cutoffs\).)6 1649 1 2839 6843 t
(The advantage of SA)3 1027 1 970 7029 t
9 R f
(3)2012 7053 w
12 R f
(with)2102 7029 w
12 S f
(a =)1 192 1 2351 7029 t
12 R f
(40 over SA)2 556 1 2593 7029 t
9 R f
(2)3164 7053 w
12 R f
(with)3254 7029 w
12 S f
(a =)1 192 1 3503 7029 t
12 R f
(100 is even more dramatic)4 1295 1 3745 7029 t
( average percentage excess by over)5 1707(for random distance matrices, for example cutting the)7 2613 2 720 7179 t
(a factor of four when)4 1040 1 720 7329 t
12 I f
(N)1797 7329 w
12 S f
(=)1927 7329 w
12 R f
( real-world instances from)3 1286(1000. For)1 504 2 2043 7329 t
12 C f
(TSPLIB)3870 7329 w
12 R f
( advantage)1 524(, the)1 214 2 4302 7329 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 42 536 764
%%EndPage: 62 62
%%Page: 63 63
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
63 pagesetup
12 R f
(- 63 -)2 260 1 2750 500 t
(of SA)1 306 1 720 870 t
9 R f
(3)1041 894 w
12 R f
( instances, although results for)4 1555(typically resembles that for random Euclidean)5 2336 2 1149 870 t
( instance, on)2 650( For)1 249(individual instances may vary.)3 1536 3 720 1020 t
12 C f
(dsj1000)3208 1020 w
12 R f
(, no improvement is seen,)4 1328 1 3712 1020 t
(while on)1 436 1 720 1170 t
12 C f
(pr1002)1205 1170 w
12 R f
(, using SA)2 542 1 1637 1170 t
9 R f
(3)2194 1194 w
12 R f
(with)2298 1170 w
12 S f
(a =)1 192 1 2561 1170 t
12 R f
( average excess \(over 20 runs\))5 1545(100 drops the)2 692 2 2803 1170 t
(from 1.89)1 474 1 720 1320 t
12 I f
(%)1194 1320 w
12 R f
(to 1.70)1 334 1 1324 1320 t
12 I f
(%)1658 1320 w
12 R f
( times increase by 10-20)4 1175(. Running)1 504 2 1758 1320 t
12 I f
(%)3437 1320 w
12 R f
(.)3537 1320 w
( improvements obtainable by incorporating 3-Opt moves into the)8 3279(In summary the)2 791 2 970 1506 t
( indicate,)1 462(neighborhood structure are significant but, as comparisons to Lin-Kernighan)8 3858 2 720 1656 t
( basis with LK)3 770(unlikely to make simulated annealing competitive on a time-equalized)8 3550 2 720 1806 t
(except in those situations where SA)5 1719 1 720 1956 t
9 R f
(2)2454 1980 w
12 R f
(was already fairly close.)3 1167 1 2539 1956 t
14 I f
(Exploiting Parallelism)1 1272 1 720 2286 t
12 R f
( basic schemes for exploiting parallelism in local search)8 2749(In Section 3.4 we discussed two)5 1571 2 720 2509 t
( discussion of the)3 881( The)1 260( and parallel move generation.)4 1514(for the TSP: instance partitioning)4 1665 4 720 2659 t
(best-of-)720 2809 w
12 I f
(k)1094 2809 w
12 R f
(-runs approach in this section suggests a third scheme: performing multiple runs)11 3893 1 1147 2809 t
( these parallelization schemes has been stud-)6 2150( the annealing domain, none of)5 1493( In)1 161(in parallel.)1 516 4 720 2959 t
( Carpenter)1 534( two-path tour-partitioning scheme of Allwright and)6 2685( \(The)1 316(ied extensively.)1 785 4 720 3109 t
([1989], mentioned in Section 3.4, was originally proposed in the context of annealing,)12 4320 1 720 3259 t
( easiest to)2 519( The)1 268( authors did not present any significant computational results.\))8 3181(but the)1 352 4 720 3409 t
(implement, however, would be the multiple parallel run approach.)8 3181 1 720 3559 t
( the other algorithms we have discussed in this chapter,)9 2811(Simulated annealing, like)2 1259 2 970 3745 t
( variance, especially for small values of)6 2026(produces tour lengths with a high)5 1711 2 720 3895 t
12 I f
(N)4507 3895 w
12 R f
( a)1 103(. Thus)1 350 2 4587 3895 t
(best-of-)720 4045 w
12 I f
(k)1094 4045 w
12 R f
( seen it)2 355(-runs approach might be as effective for simulated annealing as we have)11 3538 2 1147 4045 t
( may be true even if we don't have paral-)9 1976( This)1 275(to be for 2-Opt, 3-Opt, and Lin-Kernighan.)6 2069 3 720 4195 t
( might well be that performing)5 1539( It)1 147(lel processors.)1 701 3 720 4345 t
12 I f
(k)3150 4345 w
12 R f
(runs with)1 464 1 3246 4345 t
12 S f
(a =)1 192 1 3754 4345 t
12 I f
(x)3996 4345 w
12 R f
(and taking the best)3 947 1 4093 4345 t
(solution found is a better approach than performing one run with)10 3111 1 720 4495 t
12 S f
(a =)1 192 1 3861 4495 t
12 I f
(kx)4103 4495 w
12 R f
(.)4209 4495 w
( Table)1 314(Some idea of the relative merits of the two approaches can be gleaned from)13 3756 2 970 4681 t
( estimates for the best of 1, 2, and 4 runs for the random)13 2863(13, where we have computed)4 1457 2 720 4831 t
( selected values of)3 929(Euclidean instances in our testbed and)5 1909 2 720 4981 t
12 S f
(a)3603 4981 w
12 R f
(under both SA)2 730 1 3724 4981 t
9 R f
(2)4469 5005 w
12 R f
(and SA)1 371 1 4569 4981 t
9 R f
(3)4955 5005 w
12 R f
(.)5010 4981 w
( in computing the averages given in ear-)7 1953(These estimates are based on the same runs used)8 2367 2 720 5131 t
( for the given)3 674(lier tables, and much of this data is based on only 5 runs)12 2810 2 720 5281 t
12 S f
(a)4244 5281 w
12 R f
(and neighbor-)1 680 1 4360 5281 t
( values of)2 499( we cannot accurately estimate results for larger)7 2418( Thus)1 317(hood structure.)1 738 4 720 5431 t
12 I f
(k)4738 5431 w
12 R f
(, and)1 249 1 4791 5431 t
(even the values for)3 940 1 720 5581 t
12 I f
(k)1700 5581 w
12 S f
(=)1803 5581 w
12 R f
( We)1 236(4 are suspect, although they still can help to reveal trends.)10 2885 2 1919 5581 t
( to two decimal places of accuracy mainly to prevent the obliteration by)12 3668(give the data)2 652 2 720 5731 t
( given)1 305( Times)1 369(rounding effects of possibly significant differences of a tenth of a percent.)11 3646 3 720 5881 t
( the)1 179(are those for running)3 1013 2 720 6031 t
12 I f
(k)1944 6031 w
12 R f
( evaluate parallel performance, sim-)4 1740( To)1 195(iterations in sequence.)2 1076 3 2029 6031 t
(ply use the)2 527 1 720 6181 t
12 I f
(k)1280 6181 w
12 S f
(=)1383 6181 w
12 R f
(1 time for all values of)5 1108 1 1499 6181 t
12 I f
(k)2640 6181 w
12 R f
( this simple-minded scheme, there is essen-)6 2113(. \(In)1 234 2 2693 6181 t
( to run the algo-)4 776(tially no parallel overhead, assuming each processor has enough memory)9 3544 2 720 6331 t
(rithm.\) The)1 580 1 720 6481 t
12 I f
(k)1332 6481 w
12 S f
(=)1435 6481 w
12 R f
( in some cases differ slightly from those reported in ear-)10 2729(1 running times)2 760 2 1551 6481 t
(lier tables, as we are here reporting the median rather than the mean.)12 3289 1 720 6631 t
( algorithms,)1 587(Note that multiple runs do lead to significantly better tours under both)11 3483 2 970 6817 t
(although the amount of the gain declines as average tour quality improves and as)13 4188 1 720 6967 t
12 I f
(N)4960 6967 w
12 R f
( Euclidean instances,)2 1021( first effect is most marked with the 100-city random)9 2579(increases. The)1 720 3 720 7117 t
( declines from 0.40)3 1003(where improvement obtainable by taking the best of 4 runs)9 3068 2 720 7267 t
12 I f
(%)4791 7267 w
12 R f
(to)4946 7267 w
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 63 63
%%Page: 64 64
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
64 pagesetup
12 R f
(- 64 -)2 260 1 2750 500 t
10 S f
(_ _________________________________________________________________)1 3284 1 1238 875 t
10 R f
( Time in Seconds)3 697( Running)1 494(Average Percent Excess)2 963 3 2318 1025 t
10 S f
(_ _________________________________________________________________)1 3284 1 1238 1075 t
10 R f
(10)2345 1225 w
7 R f
(2)2450 1185 w
10 R f
(10)2696 1225 w
7 R f
(2. 5)1 93 1 2801 1185 t
10 R f
(10)3132 1225 w
7 R f
(3)3237 1185 w
10 S f
(\347)3355 1235 w
(\347)3355 1175 w
(\347)3355 1075 w
(\347)3355 975 w
10 R f
(10)3432 1225 w
7 R f
(2)3537 1185 w
10 R f
(10)3798 1225 w
7 R f
(2. 5)1 93 1 3903 1185 t
10 R f
(10)4324 1225 w
7 R f
(3)4429 1185 w
10 S f
(_ _________________________________________________________________)1 3284 1 1238 1265 t
(_ _________________________________________________________________)1 3284 1 1238 1285 t
10 R f
(Algorithm)1419 1425 w
10 I f
(k)2118 1425 w
10 R f
(Random Euclidean Matrices)2 1137 1 2826 1425 t
10 S f
(_ _________________________________________________________________)1 3284 1 1238 1475 t
10 R f
(SA)1288 1625 w
7 R f
(2)1427 1645 w
10 S f
(a =)1 158 1 1620 1625 t
10 R f
( 184)1 468( 50)1 424( 14)1 300( 2.18)1 378( 1.80)1 409( 1.55)1 325(10 1)1 350 7 1818 1625 t
(SA)1288 1745 w
7 R f
(2)1427 1765 w
10 S f
(a =)1 158 1 1620 1745 t
10 R f
( 372)1 468( 100)1 424( 29)1 300( 2.07)1 378( 1.54)1 409( 1.31)1 325(10 2)1 350 7 1818 1745 t
(SA)1288 1865 w
7 R f
(2)1427 1885 w
10 S f
(a =)1 158 1 1620 1865 t
10 R f
( 747)1 468( 201)1 424( 57)1 300( 1.98)1 378( 1.33)1 409( 1.15)1 325(10 4)1 350 7 1818 1865 t
(SA)1288 2015 w
7 R f
(2)1427 2035 w
10 S f
(a =)1 158 1 1620 2015 t
10 R f
( 807)1 468( 201)1 424( 58)1 300( 1.66)1 378( 1.51)1 409( 1.28)1 325(40 1)1 350 7 1818 2015 t
(SA)1288 2135 w
7 R f
(2)1427 2155 w
10 S f
(a =)1 158 1 1620 2135 t
10 R f
( 1610)1 468( 405)1 424( 116)1 300( 1.56)1 378( 1.35)1 409( 1.10)1 325(40 2)1 350 7 1818 2135 t
(SA)1288 2255 w
7 R f
(2)1427 2275 w
10 S f
(a =)1 158 1 1620 2255 t
10 R f
( 3220)1 468( 814)1 424( 232)1 300( 1.50)1 378( 1.23)1 409( 1.00)1 325(40 4)1 350 7 1818 2255 t
(SA)1288 2405 w
7 R f
(2)1427 2425 w
10 S f
(a =)1 158 1 1620 2405 t
10 R f
( 1930)1 468( 655)1 424( 144)1 300( 1.61)1 378( 1.32)1 409(100 1 1.13)2 675 6 1818 2405 t
(SA)1288 2525 w
7 R f
(2)1427 2545 w
10 S f
(a =)1 158 1 1620 2525 t
10 R f
( 3840)1 468( 1310)1 424( 285)1 300( 1.53)1 378( 1.18)1 409(100 2 1.02)2 675 6 1818 2525 t
(SA)1288 2645 w
7 R f
(2)1427 2665 w
10 S f
(a =)1 158 1 1620 2645 t
10 R f
( 7660)1 468( 2620)1 424( 566)1 300( 1.46)1 378( 1.08)1 409( .96)1 325(100 4)1 350 7 1818 2645 t
(SA)1288 2795 w
7 R f
(3)1427 2815 w
10 S f
(a =)1 158 1 1620 2795 t
10 R f
( 1090)1 468( 271)1 424( 81)1 300( 1.48)1 378( 1.24)1 409( 1.19)1 325(40 1)1 350 7 1818 2795 t
(SA)1288 2915 w
7 R f
(3)1427 2935 w
10 S f
(a =)1 158 1 1620 2915 t
10 R f
( 2250)1 468( 539)1 424( 162)1 300( 1.37)1 378( 1.10)1 409( 1.04)1 325(40 2)1 350 7 1818 2915 t
(SA)1288 3035 w
7 R f
(3)1427 3055 w
10 S f
(a =)1 158 1 1620 3035 t
10 R f
( 4570)1 468( 1080)1 424( 323)1 300( 1.28)1 378( 1.00)1 409(40 4 .96)2 675 6 1818 3035 t
(SA)1288 3185 w
7 R f
(3)1427 3205 w
10 S f
(a =)1 158 1 1620 3185 t
10 R f
( 2700)1 468( 666)1 424( 204)1 300( 1.32)1 378( 1.21)1 409(100 1 1.08)2 675 6 1818 3185 t
(SA)1288 3305 w
7 R f
(3)1427 3325 w
10 S f
(a =)1 158 1 1620 3305 t
10 R f
( 5400)1 468( 1340)1 424( 410)1 300( 1.25)1 378( 1.07)1 409( .97)1 325(100 2)1 350 7 1818 3305 t
(SA)1288 3425 w
7 R f
(3)1427 3445 w
10 S f
(a =)1 158 1 1620 3425 t
10 R f
( 10800)1 468( 2700)1 424( 822)1 300( 1.18)1 378( .98)1 409( .93)1 325(100 4)1 350 7 1818 3425 t
10 S f
(_ _________________________________________________________________)1 3284 1 1238 3475 t
10 R f
( 48)1 468( 14)1 424( 4)1 300( 1.41)1 378( 1.00)1 409( .91)1 325(Best of 100 LK's)3 691 7 1477 3625 t
( 478)1 468( 144)1 424( 41)1 300( 1.29)1 378( .89)1 409( .91)1 325(Best of 1,000 LK's)3 766 7 1402 3745 t
( 4780)1 468( 1440)1 424( 406)1 300( 1.23)1 378( .82)1 409( .91)1 325(Best of 10,000 LK's)3 816 7 1352 3865 t
10 S f
( \347)1 -3284(_ _________________________________________________________________)1 3284 2 1238 3915 t
(\347)1238 3875 w
(\347)1238 3775 w
(\347)1238 3675 w
(\347)1238 3575 w
(\347)1238 3475 w
(\347)1238 3375 w
(\347)1238 3275 w
(\347)1238 3175 w
(\347)1238 3075 w
(\347)1238 2975 w
(\347)1238 2875 w
(\347)1238 2775 w
(\347)1238 2675 w
(\347)1238 2575 w
(\347)1238 2475 w
(\347)1238 2375 w
(\347)1238 2275 w
(\347)1238 2175 w
(\347)1238 2075 w
(\347)1238 1975 w
(\347)1238 1875 w
(\347)1238 1775 w
(\347)1238 1675 w
(\347)1238 1575 w
(\347)1238 1475 w
(\347)1238 1375 w
(\347)1238 1275 w
(\347)1238 1175 w
(\347)1238 1075 w
(\347)1238 975 w
(\347)2243 3915 w
(\347)2243 3875 w
(\347)2243 3775 w
(\347)2243 3675 w
(\347)2243 3575 w
(\347)2243 3475 w
(\347)2243 3375 w
(\347)2243 3275 w
(\347)2243 3175 w
(\347)2243 3075 w
(\347)2243 2975 w
(\347)2243 2875 w
(\347)2243 2775 w
(\347)2243 2675 w
(\347)2243 2575 w
(\347)2243 2475 w
(\347)2243 2375 w
(\347)2243 2275 w
(\347)2243 2175 w
(\347)2243 2075 w
(\347)2243 1975 w
(\347)2243 1875 w
(\347)2243 1775 w
(\347)2243 1675 w
(\347)2243 1575 w
(\347)2243 1475 w
(\347)2243 1375 w
(\347)2243 1275 w
(\347)2243 1175 w
(\347)2243 1075 w
(\347)2243 975 w
(\347)3355 3915 w
(\347)3355 3875 w
(\347)3355 3775 w
(\347)3355 3675 w
(\347)3355 3575 w
(\347)3355 3475 w
(\347)3355 3375 w
(\347)3355 3275 w
(\347)3355 3175 w
(\347)3355 3075 w
(\347)3355 2975 w
(\347)3355 2875 w
(\347)3355 2775 w
(\347)3355 2675 w
(\347)3355 2575 w
(\347)3355 2475 w
(\347)3355 2375 w
(\347)3355 2275 w
(\347)3355 2175 w
(\347)3355 2075 w
(\347)3355 1975 w
(\347)3355 1875 w
(\347)3355 1775 w
(\347)3355 1675 w
(\347)3355 1575 w
(\347)4522 3915 w
(\347)4522 3875 w
(\347)4522 3775 w
(\347)4522 3675 w
(\347)4522 3575 w
(\347)4522 3475 w
(\347)4522 3375 w
(\347)4522 3275 w
(\347)4522 3175 w
(\347)4522 3075 w
(\347)4522 2975 w
(\347)4522 2875 w
(\347)4522 2775 w
(\347)4522 2675 w
(\347)4522 2575 w
(\347)4522 2475 w
(\347)4522 2375 w
(\347)4522 2275 w
(\347)4522 2175 w
(\347)4522 2075 w
(\347)4522 1975 w
(\347)4522 1875 w
(\347)4522 1775 w
(\347)4522 1675 w
(\347)4522 1575 w
(\347)4522 1475 w
(\347)4522 1375 w
(\347)4522 1275 w
(\347)4522 1175 w
(\347)4522 1075 w
(\347)4522 975 w
11 B f
(Table 13.)1 436 1 1906 4155 t
11 R f
(Best-of-)2398 4155 w
11 I f
(k)2757 4155 w
11 R f
(runs for SA)2 513 1 2833 4155 t
8 R f
(2)3359 4177 w
11 R f
(and SA)1 327 1 3436 4155 t
8 R f
(3)3776 4177 w
11 R f
(.)3825 4155 w
12 R f
(0.15)720 4437 w
12 I f
(%)930 4437 w
12 R f
( parameter setting in)3 1016(as one goes from the weakest combination of algorithm and)9 2955 2 1069 4437 t
(the table \(SA)2 638 1 720 4587 t
9 R f
(2)1373 4611 w
12 R f
(with)1460 4587 w
12 S f
(a =)1 192 1 1706 4587 t
12 R f
(10\) to the strongest \(SA)4 1157 1 1948 4587 t
9 R f
(3)3120 4611 w
12 R f
(with)3207 4587 w
12 S f
(a =)1 192 1 3453 4587 t
12 R f
( for this is)3 489( reason)1 345(100\). One)1 511 3 3695 4587 t
( shrinks in the latter case to just 0.18)8 1770(that the room available for improvement)5 1948 2 720 4737 t
12 I f
(%)4438 4737 w
12 R f
( best)1 225(. The)1 277 2 4538 4737 t
(possible average excess is the 0.91)5 1703 1 720 4887 t
12 I f
(%)2423 4887 w
12 R f
( random)1 403( \(For)1 273( the best of 100 LK runs.)6 1233(obtained by)1 571 4 2560 4887 t
( optimal solution if given 100)5 1504(Euclidean instances this small, LK will typically find an)8 2816 2 720 5037 t
( runs also declines as)4 1047( fact that the value of multiple)6 1505(tries.\) The)1 533 3 720 5187 t
12 I f
(N)3843 5187 w
12 R f
(increases is consistent)2 1079 1 3961 5187 t
( the tour lengths)3 809(with the already observed fact that for most algorithms, the variance of)11 3511 2 720 5337 t
(produced declines as)2 1016 1 720 5487 t
12 I f
(N)1773 5487 w
12 R f
( if we go out as far as)7 1079(grows. Indeed,)1 746 2 1890 5487 t
12 I f
(N)3752 5487 w
12 S f
(=)3882 5487 w
12 R f
( the improve-)2 662(10 , 000,)2 380 2 3998 5487 t
( for SA)2 377(ment obtainable by taking the best of 4 runs)8 2199 2 720 5637 t
9 R f
(3)3311 5661 w
12 R f
(with)3408 5637 w
12 S f
(a =)1 192 1 3664 5637 t
12 R f
(40 drops to just 0.05)4 1034 1 3906 5637 t
12 I f
(%)4940 5637 w
12 R f
(from the 0.20)2 651 1 720 5787 t
12 I f
(%)1371 5787 w
12 R f
(figure in the table for)4 1022 1 1501 5787 t
12 I f
(N)2553 5787 w
12 S f
(=)2683 5787 w
12 R f
(1000.)2799 5787 w
( also suggest that if one plans to perform the multiple runs in)12 3085(The reported results)2 985 2 970 5973 t
( reduction in average tour length obtained by adding the)9 2729(parallel, the incremental)2 1176 2 720 6123 t
12 I f
(k)4659 6123 w
12 R f
(th pro-)1 328 1 4712 6123 t
(cessor declines as)2 904 1 720 6273 t
12 I f
(k)1679 6273 w
12 R f
( average tour)2 678( there is a bigger reduction in)6 1559(increases. Typically)1 1016 3 1787 6273 t
(length for going from 1 to 2 processors than for going from 2 to 4, suggesting that even)17 4320 1 720 6423 t
( may decline as)3 756(the value of doubling the number of processors)7 2287 2 720 6573 t
12 I f
(k)3797 6573 w
12 R f
( get a bet-)3 489(increases. To)1 667 2 3884 6573 t
( effect, we increased the number of runs of SA)9 2419(ter feel for this)3 775 2 720 6723 t
9 R f
(3)3929 6747 w
12 R f
(with)4034 6723 w
12 S f
(a =)1 192 1 4298 6723 t
12 R f
(40 on our)2 500 1 4540 6723 t
( with)1 248(testbed instances)1 815 2 720 6873 t
12 I f
(N)1817 6873 w
12 S f
(=)1947 6873 w
12 R f
(316 from 5 to 25, so that plausible estimates for the expected)11 2977 1 2063 6873 t
( For)1 231( be obtained.)2 625(best of up to 16 runs could)6 1312 3 720 7023 t
12 I f
(k)2922 7023 w
12 R f
(increasing by factors of two from 1 to 16,)8 2031 1 3009 7023 t
( are 1.27)2 438(these new estimates for the expected best excess)7 2395 2 720 7173 t
12 I f
(%)3553 7173 w
12 R f
(, 1.11)1 281 1 3653 7173 t
12 I f
(%)3934 7173 w
12 R f
(, 1.00)1 281 1 4034 7173 t
12 I f
(%)4315 7173 w
12 R f
(, 0.92)1 281 1 4415 7173 t
12 I f
(%)4696 7173 w
12 R f
(, and)1 244 1 4796 7173 t
(0.86)720 7323 w
12 I f
(%)930 7323 w
12 R f
(, each successive improvement being smaller than the last.)8 2812 1 1030 7323 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 43 536 764
%%EndPage: 64 64
%%Page: 65 65
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
65 pagesetup
12 R f
(- 65 -)2 260 1 2750 500 t
(As to the question of whether performing multiple runs on a single processor is bet-)14 4070 1 970 870 t
(ter than increasing)2 910 1 720 1020 t
12 S f
(a)1671 1020 w
12 R f
( For)1 237(, the answer given by the table is mixed.)8 2024 2 1747 1020 t
12 I f
(N)4048 1020 w
12 S f
(<)4178 1020 w
12 R f
(1000 and SA)2 646 1 4294 1020 t
9 R f
(2)4955 1044 w
12 R f
(,)5010 1020 w
(four runs at)2 556 1 720 1170 t
12 S f
(a =)1 192 1 1307 1170 t
12 R f
( be a significantly better use of time than one run at)11 2497(10 seems to)2 570 2 1549 1170 t
12 S f
(a =)1 192 1 4648 1170 t
12 R f
(40,)4890 1170 w
(and two runs at)3 749 1 720 1320 t
12 S f
(a =)1 192 1 1503 1320 t
12 R f
( to be at least comparable to one at)8 1693(40 seem)1 401 2 1745 1320 t
12 S f
(a =)1 192 1 3872 1320 t
12 R f
( for)1 173(100. Similarly,)1 753 2 4114 1320 t
(SA)720 1470 w
9 R f
(3)888 1494 w
12 R f
(, two runs at)3 669 1 943 1470 t
12 S f
(a =)1 192 1 1667 1470 t
12 R f
(40 are possibly slightly better than one run at)8 2372 1 1909 1470 t
12 S f
(a =)1 192 1 4336 1470 t
12 R f
(100. For)1 462 1 4578 1470 t
12 I f
(N)720 1620 w
12 S f
(=)850 1620 w
12 R f
( these comparisons comes out in favor of multiple runs,)9 2727(1000, however, only one of)4 1347 2 966 1620 t
(and indeed one would expect the best-of-)6 2028 1 720 1770 t
12 I f
(k)2748 1770 w
12 R f
( to lose out as)4 698(-runs approach)1 724 2 2801 1770 t
12 I f
(N)4262 1770 w
12 R f
(increases fur-)1 659 1 4381 1770 t
(ther, again because of the corresponding decline in variance.)8 2907 1 720 1920 t
( that the best-of-)3 825(Finally, it should be noted)4 1301 2 970 2106 t
12 I f
(k)3096 2106 w
12 R f
(-runs approach does not for)4 1364 1 3149 2106 t
12 I f
(N)4554 2106 w
12 S f
(<)4684 2106 w
12 R f
(1000)4800 2106 w
( on a time-equalized basis \(assum-)5 1690(come close to making annealing competitive with LK)7 2630 2 720 2256 t
( For)1 243( two approaches are the same as well\).)7 1958(ing the numbers of processors allowed the)6 2119 3 720 2406 t
12 I f
(N)720 2556 w
12 S f
(=)850 2556 w
12 R f
( runs of SA)3 592(1000, however, using multiple)3 1511 2 966 2556 t
9 R f
(3)3084 2580 w
12 R f
(with)3183 2556 w
12 S f
(a =)1 192 1 3441 2556 t
12 R f
(100 can bring it into parity)5 1357 1 3683 2556 t
( best of 2 annealing runs is essentially just as good as the best of 10,000)15 3619( The)1 257(with LK.)1 444 3 720 2706 t
( for random distance)3 991( Results)1 416(LK runs, and it can be obtained in essentially the same time.)11 2913 3 720 2856 t
( LK seems possible, and the advantage)6 1906(matrices are similar, although here no parity with)7 2414 2 720 3006 t
(of larger)1 410 1 720 3156 t
12 S f
(a)1160 3156 w
12 R f
('s over multiple runs seems to hold even for)8 2118 1 1236 3156 t
12 I f
(N)3384 3156 w
12 S f
(=)3514 3156 w
12 R f
(316.)3630 3156 w
14 B f
( Variants on Annealing)3 1389(5.4. Threshold-Based)1 1301 2 720 3486 t
12 R f
( and the TSP by considering several)6 1812(We conclude our treatment of simulated annealing)6 2508 2 720 3709 t
( to accept a move,)4 898(variants that dispense with the coin-flipping used in deciding whether)9 3422 2 720 3859 t
( less than a precomputed thresh-)5 1557(instead simply testing whether the resulting tour length is)8 2763 2 720 4009 t
( are variants on the)4 914(old. These)1 530 2 720 4159 t
12 I f
(threshold algorithms)1 1007 1 2194 4159 t
12 R f
(described in Chapter 4.)3 1114 1 3231 4159 t
14 I f
(Threshold Accepting)1 1163 1 720 4489 t
12 R f
(The threshold algorithm that is most like standard simulated annealing is the)11 3792 1 720 4712 t
12 I f
(Threshold)4552 4712 w
(Accepting)720 4862 w
12 R f
( this algorithm the temperature)4 1565( In)1 180( [1990].)1 400(algorithm of Dueck and Scheuer)4 1644 4 1251 4862 t
( threshold schedule, and a proposed move is)7 2325(schedule of annealing is replaced by a)6 1995 2 720 5012 t
( length by more than the current)6 1584(accepted so long as it does not increase the current tour)10 2736 2 720 5162 t
( a temperature schedule both yielded the)6 2020( a threshold schedule and)4 1262(threshold. Assuming)1 1038 3 720 5312 t
( number of trials, the former would presumably have a running time advantage)12 3824(same total)1 496 2 720 5462 t
( one call to a random number generator and one exponentiation per trial.)12 3600(in that it saves)3 720 2 720 5612 t
( baseline annealing implementation and its augmentations already)7 3178(Note, however, that our)3 1142 2 720 5762 t
( by using table lookup, so the running)7 1915(save most of the time needed for exponentiation)7 2405 2 720 5912 t
( not)1 188( one would need to have a schedule that)8 1953( Moreover,)1 568(time savings might not be major.)5 1611 4 720 6062 t
( the same number of trials \(or fewer\) but also the same number of accepted)14 3715(only yielded)1 605 2 720 6212 t
( under)1 316(moves \(or fewer\), and there might be a tour-quality penalty for using thresholds)12 4004 2 720 6362 t
(such restrictions.)1 816 1 720 6512 t
( they are able to get bet-)6 1197(Using pruned neighbor lists, Dueck and Scheuer claim that)8 2873 2 970 6698 t
( given number of trials, based on a com-)8 1963(ter solutions than does simulated annealing for a)7 2357 2 720 6848 t
(parison of their results for instance)5 1739 1 720 6998 t
12 C f
(pcb442)2502 6998 w
12 R f
(from)2977 6998 w
12 C f
(TSPLIB)3255 6998 w
12 R f
(to the simulated annealing)3 1309 1 3731 6998 t
( latter implementation uses neigh-)4 1687( The)1 258( and Liebling [1986].)3 1057(results of Rossier, Troyon,)3 1318 4 720 7148 t
( of Bonomi and Lutton [1984])5 1462(borhood pruning, but it is the non-robust geometric version)8 2858 2 720 7298 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 65 65
%%Page: 66 66
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
66 pagesetup
12 R f
(- 66 -)2 260 1 2750 500 t
(rather than one based on nearest neighbors, and it is not clear whether low temperature)14 4320 1 720 870 t
( SA)1 209( we compare Dueck and Scheuer's results to those for)9 2808( If)1 165(starts are used.)2 761 4 720 1020 t
9 R f
(2)4678 1044 w
12 R f
(, their)1 307 1 4733 1020 t
( a target number of tri-)5 1107( schedules were designed to produce)5 1776( Their)1 324(advantage is less clear.)3 1113 4 720 1170 t
( obtained using 4,000,000)3 1275(als, and their best result, an average tour length of 51.36, was)11 3045 2 720 1320 t
( one sets)2 438(trials. If)1 424 2 720 1470 t
12 S f
(a =)1 192 1 1624 1470 t
12 R f
( of)1 141(8 in our implementation, the average tour length and number)9 3033 2 1866 1470 t
(trials over 20 runs are 4,020,000 and 51.33, pretty much a dead heat.)12 3298 1 720 1620 t
( expand the range)3 867( To)1 199( generalize from just one instance, however.)6 2157(It is dangerous to)3 847 4 970 1806 t
(of comparison, we thus modified SA)5 1779 1 720 1956 t
9 R f
(2)2514 1980 w
12 R f
( the)1 178(to do Threshold Accepting, and we tested it on)8 2261 2 2601 1956 t
( and Scheuer do not say)5 1248( Dueck)1 393( Euclidean instances in our testbed.)5 1801(1000-city random)1 878 4 720 2106 t
(much about how to choose an appropriate threshold schedule for a given instance class,)13 4320 1 720 2256 t
( that mimics a temperature schedule in standard anneal-)8 2694(but a natural choice would be one)6 1626 2 720 2406 t
( some appropriately chosen)3 1342(ing: For)1 423 2 720 2556 t
12 S f
(b >)1 182 1 2523 2556 t
12 R f
(0 we simply convert each temperature)5 1866 1 2755 2556 t
12 I f
(T)4658 2556 w
12 R f
(into a)1 278 1 4762 2556 t
(threshold)720 2706 w
12 S f
(q = b)2 294 1 1236 2706 t
12 I f
(T)1540 2706 w
12 R f
( cities and)2 566( our 1000-city random geometric)4 1741(. For)1 295 3 1607 2706 t
12 S f
(a =)1 192 1 4278 2706 t
12 R f
(10, taking)1 520 1 4520 2706 t
12 S f
(b =)1 182 1 720 2856 t
12 R f
( as does standard annealing \(given greedy)6 2019( yields the same initial acceptance ratio)6 1909(1. 0)1 160 3 952 2856 t
( ratio for threshold accepting drops more rapidly, how-)8 2736( acceptance)1 566( The)1 257(starts for both\).)2 761 4 720 3006 t
(ever, so that there are 25)5 1250 1 720 3156 t
12 I f
(%)1970 3156 w
12 R f
( as 8)2 246(fewer acceptances per temperature/threshold as well)5 2580 2 2114 3156 t
12 I f
(%)4940 3156 w
12 R f
( overall running time)3 1043( The)1 255(fewer temperature/thresholds \(because of earlier termination\).)5 3022 3 720 3306 t
(savings for thresholds is about 18)5 1714 1 720 3456 t
12 I f
(%)2434 3456 w
12 R f
( this reduced number of trials and)6 1730(, due mostly to)3 776 2 2534 3456 t
( average)1 420( unfortunately, the)2 919( And,)1 313(acceptances rather than to saved exponentiation time.)6 2668 4 720 3606 t
(excess increases from 2.02)3 1320 1 720 3756 t
12 I f
(%)2040 3756 w
12 R f
(to 2.68)1 345 1 2181 3756 t
12 I f
(%)2526 3756 w
12 R f
(. Choosing)1 562 1 2626 3756 t
12 S f
(b =)1 182 1 3228 3756 t
12 R f
( equalizes the running times,)4 1420(1. 5)1 160 2 3460 3756 t
( the existence)2 674( suggests that, barring)3 1083( This)1 283(but does not improve the average tour quality.)7 2280 4 720 3906 t
( Threshold Accepting offers no significant advantage)6 2621(of much more effective schedules,)4 1699 2 720 4056 t
(over standard annealing and may indeed make things worse.)8 2898 1 720 4206 t
14 I f
(Deterministic Threshold Accepting)2 1961 1 720 4536 t
12 R f
( A)1 159( from the process of move acceptance.)6 1921(Threshold acceptance removes randomization)3 2240 3 720 4759 t
( from the process of)4 977(second algorithm proposed by Dueck and Scheuer [1990] removes it)9 3343 2 720 4909 t
( their)1 263( In)1 172(move generation as well.)3 1237 3 720 5059 t
12 I f
(deterministic)2435 5059 w
12 R f
(Threshold Accepting algorithm \(DTA\),)3 1933 1 3107 5059 t
( the)1 184( Like)1 287( once per threshold.)3 968(they simply cycle through all possibilities in a fixed order,)9 2881 4 720 5209 t
( that no move)3 700(permutation-based move-generation process discussed above, this insures)6 3620 2 720 5359 t
( calls to)2 375(will be overlooked because of inopportune random choices, and it saves the many)12 3945 2 720 5509 t
(the random number generator that the latter made to re-randomize the move set each time)14 4320 1 720 5659 t
( and Scheuer propose to combine this approach with pruned neighbor)10 3525(through. Dueck)1 795 2 720 5809 t
( \(According)1 613( once per threshold.)3 968(lists of length 20 or less and to go through the move set)12 2739 3 720 5959 t
( ordering is to have the choice of candidate for)9 2328(to Dueck [1993], the best)4 1261 2 720 6109 t
12 I f
(t)4349 6109 w
9 R f
(2)4398 6133 w
12 R f
(made in an)2 547 1 4493 6109 t
(inner loop, with the location for)5 1570 1 720 6259 t
12 I f
(t)2328 6259 w
9 R f
(3)2377 6283 w
12 R f
(on)2470 6259 w
12 I f
(t)2628 6259 w
9 R f
(2)2677 6283 w
12 R f
( already determined by an outer)5 1569('s neighbor list)2 739 2 2732 6259 t
( City)1 288( nearest.)1 420(loop that runs over all possible locations, from farthest to)9 2944 3 720 6409 t
12 I f
(t)4422 6409 w
9 R f
(1)4471 6433 w
12 R f
(is always)1 464 1 4576 6409 t
( be the tour successor of)5 1279(taken to)1 406 2 720 6559 t
12 I f
(t)2458 6559 w
9 R f
(2)2507 6583 w
12 R f
( a fixed number of thresholds \(Dueck and)7 2158(.\) For)1 320 2 2562 6559 t
( running times, i.e., ones close to those)7 1924(Scheuer suggest 100\), this yields relatively rapid)6 2396 2 720 6709 t
(we would obtain using SA)4 1274 1 720 6859 t
9 R f
(2)2009 6883 w
12 R f
(with)2094 6859 w
12 S f
(a =)1 192 1 2338 6859 t
12 R f
(1.)2580 6859 w
( comparable tours, i.e., ones significantly worse)6 2315(Unfortunately, it also seems to yield)5 1755 2 970 7045 t
(than what a)2 575 1 720 7195 t
12 I f
(single)1336 7195 w
12 R f
( \(Recall)1 417( can provide in substantially less time.)6 1903(run of Lin-Kernighan)2 1055 3 1665 7195 t
( needed values of)3 887(that we)1 366 2 720 7345 t
12 S f
(a)2020 7345 w
12 R f
( Data)1 303(larger than 10 to get better average tours than LK.\))9 2594 2 2143 7345 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 41 536 764
%%EndPage: 66 66
%%Page: 67 67
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
67 pagesetup
12 R f
(- 67 -)2 260 1 2750 500 t
( test instances)2 703(reported by Dueck [1993] for the)5 1679 2 720 870 t
12 C f
(pcb442)3149 870 w
12 R f
(and)3628 870 w
12 C f
(att532)3848 870 w
12 R f
(from)4327 870 w
12 C f
(TSPLIB)4608 870 w
12 R f
( runs \(from random starting tours\) is often worse than an)10 2885(suggests that the best of 100)5 1435 2 720 1020 t
( can get better results by using more closely)8 2271( One)1 279( instances.)1 521(average LK run for both)4 1249 4 720 1170 t
( How-)1 347( tested this in our own implementation of DTA.)8 2408(spaced thresholds, and we have)4 1565 3 720 1320 t
( a threshold schedule that yields as good results as does SA)11 2870(ever, we were unable to find)5 1380 2 720 1470 t
9 R f
(2)4985 1494 w
12 R f
(with)720 1620 w
12 S f
(a =)1 192 1 970 1620 t
12 R f
( we could not get DTA to per-)7 1498( Indeed,)1 423( was used.)2 510(10, even when as much time)5 1397 4 1212 1620 t
( algorithm, which for our 1000-city)5 1703(form even as well as the original Threshold Accepting)8 2617 2 720 1770 t
( tours averaging some 0.6)4 1294(random Euclidean instances produced)3 1863 2 720 1920 t
12 I f
(%)3877 1920 w
12 R f
(worse than those for)3 1019 1 4021 1920 t
(SA)720 2070 w
9 R f
(2)888 2094 w
12 R f
( par-)1 239( gap between deterministic and standard Threshold Accepting could be)9 3565(. The)1 293 3 943 2070 t
( if we ran-)3 499( instance,)1 454( For)1 227(tially closed by adding some randomization back into the former.)9 3140 4 720 2220 t
( we typically reduced the)4 1215(domly permuted the cities each time the threshold was changed,)9 3105 2 720 2370 t
( points at no significant running time penalty.)7 2320(average excess by 0.2 to 0.4 percentage)6 2000 2 720 2520 t
(Nevertheless, the basic approach cannot at this point be called promising.)10 3532 1 720 2670 t
14 I f
(Water Level Algorithms)2 1338 1 720 3000 t
12 R f
( the)1 180(Dueck [1993] also proposed two other variants on simulated annealing,)9 3448 2 720 3223 t
12 I f
(Great Deluge)1 659 1 4381 3223 t
(Algorithm)720 3373 w
12 R f
(and)1262 3373 w
12 I f
(Record-to-Record Travel)1 1234 1 1489 3373 t
12 R f
(, both of which dispense with the need for a)9 2317 1 2723 3373 t
( analogy motivating)2 983( The)1 256( acceptance.)1 595(schedule as well as the need for randomized move)8 2486 4 720 3523 t
( best understood if we temporarily assume we are dealing with a maximization)12 3978(both is)1 342 2 720 3673 t
( assume the search space is a)6 1495( We)1 244( problem like the TSP.)4 1158(problem, not a minimization)3 1423 4 720 3823 t
( the rain)2 430( As)1 211( being drenched by a continuing downpour of rain.)8 2581(hilly terrain, currently)2 1098 4 720 3973 t
( the water level rises, gradually isolating the higher land elevations as)11 3490(continues to fall,)2 830 2 720 4123 t
( country-)1 445( current solution randomly moves around the)6 2218( Our)1 255(islands in a surrounding sea.)4 1402 4 720 4273 t
( the rising)2 518( Eventually)1 599( to the constraint that it not step in the water.)10 2330(side, subject only)2 873 4 720 4423 t
( some hill or mountain, and this is the local optima to)11 2735(water will force it to the top of)7 1585 2 720 4573 t
(which the process converges.)3 1406 1 720 4723 t
( Deluge Algorithm \(GDA\), we link the rises of the water level to the)13 3471(In the Great)2 599 2 970 4909 t
( time a move is accepted \(does not lead underwater\), the)10 2925( Each)1 321( moves.)1 396(acceptance of)1 678 4 720 5059 t
(water level rises by some fixed increment)6 2015 1 720 5209 t
12 S f
(D)2767 5209 w
12 R f
( might simply be the)4 1003( initial water level)3 879(. \(The)1 318 3 2840 5209 t
( the water level)3 746( Record-to-Record Travel \(RTR\),)3 1624( In)1 164(value of the initial random solution.\))5 1786 4 720 5359 t
( at some)2 441(rises each time a new champion solution is found, with the level maintained)12 3879 2 720 5509 t
(fixed distance)1 699 1 720 5659 t
12 S f
(d)1476 5659 w
12 R f
( these approaches were)3 1189( Both)1 321(below the current best solution value.)5 1938 3 1592 5659 t
( neighborhood structure by Dueck [1993], which con-)7 2607(adapted to the TSP under the 2-Opt)6 1713 2 720 5809 t
( generation was performed as in Deter-)6 1891(centrated on deterministic variants in which move)6 2429 2 720 5959 t
( that for a minimzation problem such as the TSP,)9 2485( \(Note)1 347(ministic Threshold Accepting.)2 1488 3 720 6109 t
( rather than increase, so perhaps we should view our-)9 2625(the water level must now decrease)5 1695 2 720 6259 t
( were comparable to those for the latter)7 1955( Results)1 425(selves as fish in the time of a drought.\))8 1940 3 720 6409 t
(algorithm and thus were not impressive.)5 1931 1 720 6559 t
( however, and to set-)4 1039(Dueck's [1993] tests were again limited to just two instances,)9 3031 2 970 6745 t
(tings of)1 369 1 720 6895 t
12 S f
(D)1123 6895 w
12 R f
(and)1230 6895 w
12 S f
(d)1437 6895 w
12 R f
( on our own experiments,)4 1236( Based)1 356( fast running times.)3 939(that led to relatively)3 979 4 1530 6895 t
( move-generation pro-)2 1088(allowing additional running time and limited randomization in the)8 3232 2 720 7045 t
( competitive, at least in)4 1125(cess, as described above for DTA, makes the situation much more)10 3195 2 720 7195 t
( our implementation, we adapt an idea of Dueck and let)10 2805( In)1 174(the case of GDA.)3 873 3 720 7345 t
12 S f
(D)4617 7345 w
12 R f
(be the)1 305 1 4735 7345 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 41 536 764
%%EndPage: 67 67
%%Page: 68 68
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
68 pagesetup
12 R f
(- 68 -)2 260 1 2750 500 t
(maximum of a fixed fraction)4 1395 1 720 870 t
12 I f
(a)2147 870 w
12 R f
(of the current tour length and a fixed fraction)8 2185 1 2239 870 t
12 I f
(b)4456 870 w
12 R f
(of the dis-)2 492 1 4548 870 t
( an attempt to automatically)4 1365( In)1 165(tance between the current tour length and the water level.)9 2790 3 720 1020 t
(adapt the algorithm to instances of different sizes, we allow)9 2928 1 720 1170 t
12 I f
(a)3685 1170 w
12 R f
(and)3782 1170 w
12 I f
(b)3992 1170 w
12 R f
(to vary with)2 595 1 4089 1170 t
12 I f
(N)4720 1170 w
12 R f
(, set-)1 240 1 4800 1170 t
(ting)720 1320 w
12 I f
(a)951 1320 w
12 S f
(=)1061 1320 w
12 R f
(1)1177 1320 w
12 I f
(/)1247 1320 w
12 R f
(\()1291 1320 w
12 I f
(r *)1 117 1 1341 1320 t
12 R f
(10 , 000)2 350 1 1468 1320 t
12 I f
(N)1828 1320 w
12 R f
(\) and)1 256 1 1918 1320 t
12 I f
(b)2217 1320 w
12 S f
(=)2327 1320 w
12 R f
(1)2443 1320 w
12 I f
(/)2513 1320 w
12 R f
(\()2557 1320 w
12 I f
(r * N)2 207 1 2607 1320 t
12 R f
(\), where)1 405 1 2824 1320 t
12 I f
(r)3272 1320 w
12 R f
( we can)2 393(is an additional parameter)3 1285 2 3362 1320 t
( time as)2 403(use to adjust the running)4 1243 2 720 1470 t
12 S f
(a)2410 1470 w
12 R f
(does for our simulated annealing implementations.)5 2510 1 2530 1470 t
(Larger values of)2 806 1 720 1620 t
12 I f
(r)1566 1620 w
12 R f
( presum-)1 435(yield smaller stepsizes and hence longer running times \(and)8 2952 2 1653 1620 t
( with the low-temperature starts of SA)6 1915( analogy)1 423( In)1 173(ably better tours\).)2 878 4 720 1770 t
9 R f
(2)4124 1794 w
12 R f
(, we generate our)3 861 1 4179 1770 t
( initial water level to be twice the initial)8 1952(starting tours using Nearest Neighbor and set the)7 2368 2 720 1920 t
( restrict ourselves to neighbor lists)5 1661( results suggest that we can safely)6 1641( Dueck's)1 461(tour length.)1 557 4 720 2070 t
( one cannot do for normal annealing without significantly degrad-)9 3177(of length 10, something)3 1143 2 720 2220 t
( first observation is that for such lists, allowing)8 2305( Our)1 251( tours, and we do this.)5 1083(ing the output)2 681 4 720 2370 t
( cities before each pass through the set of moves, as)10 2746(GDA to randomly permute the)4 1574 2 720 2520 t
( some 0.3)2 488(described above, typically yields an improvement in average tour length of)10 3732 2 720 2670 t
12 I f
(%)4940 2670 w
12 R f
(over that obtained with purely deterministic move generation.)7 2973 1 720 2820 t
10 S f
(_ _________________________________________________________________)1 3280 1 1240 2975 t
10 R f
( Time in Seconds)3 697( Running)1 498(Average Percent Excess)2 963 3 2308 3125 t
10 S f
(_ _________________________________________________________________)1 3280 1 1240 3175 t
10 R f
(Instance)1370 3325 w
10 S f
(a)1991 3325 w
10 R f
(,)2062 3325 w
10 I f
(r)2119 3325 w
10 R f
(SA)2308 3325 w
7 R f
(2)2447 3345 w
10 R f
(SA)2682 3325 w
7 R f
(2)2815 3344 w
7 S f
(+)2815 3285 w
10 R f
(GDA)3054 3325 w
10 S f
(\347)3345 3335 w
(\347)3345 3275 w
(\347)3345 3175 w
(\347)3345 3075 w
10 R f
(SA)3488 3325 w
7 R f
(2)3627 3345 w
10 R f
(SA)3890 3325 w
7 R f
(2)4023 3344 w
7 S f
(+)4023 3285 w
10 R f
(GDA)4254 3325 w
10 S f
(_ _________________________________________________________________)1 3280 1 1240 3365 t
(_ _________________________________________________________________)1 3280 1 1240 3385 t
10 R f
(Random Euclidean Instances)2 1159 1 2809 3525 t
10 S f
(_ _________________________________________________________________)1 3280 1 1240 3575 t
10 I f
(N)1290 3725 w
10 S f
(=)1397 3725 w
10 R f
( 50 23 17)3 1200( 1.81)1 408( 1.83)1 372( 1.80)1 332(316 10,4)1 666 5 1492 3725 t
( 97 65)2 800( 232)1 400( 1.61)1 408( 1.57)1 372(40,16 1.52)1 557 5 1933 3845 t
10 I f
(N)1290 3995 w
10 S f
(=)1397 3995 w
10 R f
( 98 78)2 800( 228)1 400( 1.91)1 408( 2.14)1 372( 2.02)1 332(1000 10,2)1 666 6 1492 3995 t
( 805 357 283)3 1200( 1.70)1 408( 1.68)1 372(40,8 1.66)1 507 4 1983 4115 t
10 I f
(N)1290 4265 w
10 S f
(=)1397 4265 w
10 R f
( 6200)1 400( 25300 10200)2 800( 1.64)1 408( 1.79)1 372( 1.77)1 332( 40,2)1 375(10 , 000)2 291 7 1492 4265 t
( 1.51)1 408( 1.53)1 372(100,5 1.57)1 557 3 1933 4385 t
10 S f
(\347)3345 4405 w
(\347)3345 4375 w
(\347)3345 4275 w
(\347)3345 4175 w
(\347)3345 4075 w
(\347)3345 3975 w
(\347)3345 3875 w
(\347)3345 3775 w
(\347)3345 3675 w
10 R f
(49700 23600 16200)2 1050 1 3420 4385 t
10 S f
(_ _________________________________________________________________)1 3280 1 1240 4435 t
10 C f
(TSPLIB)3011 4585 w
10 R f
(Instances)3396 4585 w
10 S f
(_ _________________________________________________________________)1 3280 1 1240 4635 t
10 C f
(pcb442)1290 4785 w
10 R f
( 62 39 17)3 1200( 1.57)1 408( 1.74)1 372(10,2 1.60)1 507 4 1983 4785 t
( 47)1 400( 281 109)2 800( 1.20)1 408( 1.43)1 372(40,8 1.38)1 507 5 1983 4905 t
10 C f
(att532)1290 5055 w
10 R f
( 77 38 16)3 1200( 2.23)1 408( 2.18)1 372(10,2 2.12)1 507 4 1983 5055 t
( 62)1 400( 303 151)2 800( 1.84)1 408( 1.83)1 372(40,8 1.84)1 507 5 1983 5175 t
10 C f
(dsj1000)1290 5325 w
10 R f
( 90 69)2 800( 216)1 400( 1.96)1 408( 2.13)1 372(10,2 1.83)1 507 5 1983 5325 t
( 907 434 276)3 1200( 1.49)1 408( 1.68)1 372(40,8 1.61)1 507 4 1983 5445 t
10 C f
(pr1002)1290 5595 w
10 R f
( 87 80)2 800( 198)1 400( 2.08)1 408( 2.25)1 372(10,2 2.33)1 507 5 1983 5595 t
( 1.89)1 408( 1.90)1 372(40,8 1.90)1 507 3 1983 5715 t
10 S f
(\347)3345 5735 w
(\347)3345 5635 w
(\347)3345 5535 w
(\347)3345 5435 w
(\347)3345 5335 w
(\347)3345 5235 w
(\347)3345 5135 w
(\347)3345 5035 w
(\347)3345 4935 w
(\347)3345 4835 w
(\347)3345 4735 w
10 R f
(784 327 339)2 950 1 3520 5715 t
10 S f
(_ _________________________________________________________________)1 3280 1 1240 5765 t
10 R f
(Random Distance Matrices)2 1087 1 2845 5915 t
10 S f
(_ _________________________________________________________________)1 3280 1 1240 5965 t
10 I f
(N)1290 6115 w
10 S f
(=)1397 6115 w
10 R f
( 21)1 400( 182 107)2 800( 42)1 408( 44)1 372( 46)1 332(316 40,2)1 666 6 1492 6115 t
( 62)1 400( 447 264)2 800( 39)1 408( 37)1 372(100,6 37)1 557 5 1933 6235 t
10 S f
( \347)1 -3280(_ _________________________________________________________________)1 3280 2 1240 6285 t
(\347)1240 6275 w
(\347)1240 6175 w
(\347)1240 6075 w
(\347)1240 5975 w
(\347)1240 5875 w
(\347)1240 5775 w
(\347)1240 5675 w
(\347)1240 5575 w
(\347)1240 5475 w
(\347)1240 5375 w
(\347)1240 5275 w
(\347)1240 5175 w
(\347)1240 5075 w
(\347)1240 4975 w
(\347)1240 4875 w
(\347)1240 4775 w
(\347)1240 4675 w
(\347)1240 4575 w
(\347)1240 4475 w
(\347)1240 4375 w
(\347)1240 4275 w
(\347)1240 4175 w
(\347)1240 4075 w
(\347)1240 3975 w
(\347)1240 3875 w
(\347)1240 3775 w
(\347)1240 3675 w
(\347)1240 3575 w
(\347)1240 3475 w
(\347)1240 3375 w
(\347)1240 3275 w
(\347)1240 3175 w
(\347)1240 3075 w
(\347)2233 6285 w
(\347)2233 6275 w
(\347)2233 6175 w
(\347)2233 6075 w
(\347)2233 5975 w
(\347)2233 5875 w
(\347)2233 5775 w
(\347)2233 5675 w
(\347)2233 5575 w
(\347)2233 5475 w
(\347)2233 5375 w
(\347)2233 5275 w
(\347)2233 5175 w
(\347)2233 5075 w
(\347)2233 4975 w
(\347)2233 4875 w
(\347)2233 4775 w
(\347)2233 4675 w
(\347)2233 4575 w
(\347)2233 4475 w
(\347)2233 4375 w
(\347)2233 4275 w
(\347)2233 4175 w
(\347)2233 4075 w
(\347)2233 3975 w
(\347)2233 3875 w
(\347)2233 3775 w
(\347)2233 3675 w
(\347)2233 3575 w
(\347)2233 3475 w
(\347)2233 3375 w
(\347)2233 3275 w
(\347)2233 3175 w
(\347)2233 3075 w
(\347)3345 6285 w
(\347)3345 6265 w
(\347)3345 6165 w
(\347)3345 6065 w
(\347)4520 6285 w
(\347)4520 6275 w
(\347)4520 6175 w
(\347)4520 6075 w
(\347)4520 5975 w
(\347)4520 5875 w
(\347)4520 5775 w
(\347)4520 5675 w
(\347)4520 5575 w
(\347)4520 5475 w
(\347)4520 5375 w
(\347)4520 5275 w
(\347)4520 5175 w
(\347)4520 5075 w
(\347)4520 4975 w
(\347)4520 4875 w
(\347)4520 4775 w
(\347)4520 4675 w
(\347)4520 4575 w
(\347)4520 4475 w
(\347)4520 4375 w
(\347)4520 4275 w
(\347)4520 4175 w
(\347)4520 4075 w
(\347)4520 3975 w
(\347)4520 3875 w
(\347)4520 3775 w
(\347)4520 3675 w
(\347)4520 3575 w
(\347)4520 3475 w
(\347)4520 3375 w
(\347)4520 3275 w
(\347)4520 3175 w
(\347)4520 3075 w
11 B f
(Table 14.)1 436 1 1087 6525 t
11 R f
(Comparison of Simulated Annealing and the Great Deluge Algorithm.)8 3094 1 1579 6525 t
12 R f
( simulated annealing, Table 14 presents results for selected)8 2907(As to comparisons with)3 1163 2 970 6843 t
( random Euclidean instances)3 1435(instances and instance classes \(the results for 10,000-city)7 2885 2 720 6993 t
( These)1 351( instance we have been tracking throughout this section\).)8 2773(were based on the single)4 1196 3 720 7143 t
( that GDA is well matched against SA)7 1873(results suggest)1 712 2 720 7293 t
9 R f
(2)3320 7317 w
12 R f
(, even if we allow the latter to use)8 1665 1 3375 7293 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 68 68
%%Page: 69 69
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
69 pagesetup
12 R f
(- 69 -)2 260 1 2750 500 t
( generation and cutoffs, a variant we denote by ``SA)9 2639(permutation-based move)1 1205 2 720 870 t
9 R f
(2)4571 895 w
9 S f
(+)4571 819 w
12 R f
('' in the)2 409 1 4631 870 t
( each instance and instance class covered in the table and)10 2811( For)1 234( what follows.)2 698(table and in)2 577 4 720 1020 t
(for each choice of)3 928 1 720 1170 t
12 S f
(a)1700 1170 w
12 R f
( of)1 153(, we were able to find a value)7 1566 2 1776 1170 t
12 I f
(r)3548 1170 w
12 R f
(such that GDA found tours)4 1392 1 3648 1170 t
( did SA)2 415(roughly as good as)3 979 2 720 1320 t
9 R f
(2)2129 1344 w
12 R f
(and SA)1 380 1 2238 1320 t
9 R f
(2)2625 1345 w
9 S f
(+)2625 1269 w
12 R f
(\(which themselves produce comparable tours,)4 2301 1 2739 1320 t
(although those for SA)3 1082 1 720 1470 t
9 R f
(2)1817 1494 w
12 R f
( GDA usually produced)3 1169( Moreover,)1 572(are typically slightly better\).)3 1389 3 1910 1470 t
(its tours in significantly less time than SA)7 2110 1 720 1620 t
9 R f
(2)2837 1645 w
9 S f
(+)2837 1569 w
12 R f
(, which itself was two or more times faster)8 2143 1 2897 1620 t
(than SA)1 403 1 720 1770 t
9 R f
(2)1138 1794 w
12 R f
( also that for each instance and instance class, increasing)9 2840(. Note)1 336 2 1193 1770 t
12 I f
(r)4413 1770 w
12 R f
(\(and hence)1 536 1 4504 1770 t
( equivalent to that obtained)4 1322(running time\) yields an improvement in GDA's tours roughly)8 2998 2 720 1920 t
(by SA)1 303 1 720 2070 t
9 R f
(2)1038 2094 w
12 R f
(when)1123 2070 w
12 S f
(a)1412 2070 w
12 R f
(is increased by the same factor.)5 1508 1 1518 2070 t
( The)1 261(It thus appears that the Great Deluge Algorithm is well worth further study.)12 3809 2 970 2256 t
( well, although intuitively this)4 1574(Record-to-Record Travel algorithm may also perform)5 2746 2 720 2406 t
(seems somewhat less likely, and we have not tested it ourselves.)10 3092 1 720 2556 t
14 I f
(Multicanonical Annealing)1 1465 1 720 2886 t
12 R f
( another one that appears)4 1216(The final variant on simulated annealing that we shall discuss is)10 3104 2 720 3109 t
( has been successfully applied to random)6 1981( It)1 137(to have advantages over the standard version.)6 2202 3 720 3259 t
( is the)2 296( This)1 278(Euclidean instances with as many as 40,000 cities.)7 2448 3 720 3409 t
12 I f
(Multicanonical Annealing)1 1264 1 3776 3409 t
12 R f
( structure, this algorithm is something like the)7 2370( In)1 182( Choi [1994].)2 688(algorithm of Lee and)3 1080 4 720 3559 t
( a)1 107(Record-to-Record Travel algorithm of the previous subsection, in that we maintain)10 4213 2 720 3709 t
(threshold that is typically a fixed distance)6 2012 1 720 3859 t
12 S f
(d)2763 3859 w
12 R f
(above the best tour length seen so far, and we)9 2187 1 2853 3859 t
( this is just the)4 718( However,)1 533( that produces a tour longer than this threshold.)8 2308(accept no move)2 761 4 720 4009 t
( the approach also incorporates a variant on the ``rejectionless annealing'')10 3667(beginning, as)1 653 2 720 4159 t
(idea of Greene and Supowit [1986].)5 1719 1 720 4309 t
( use the pruned 2-Opt neighborhood; specifically, we consider)8 3168(As with RTR, we)3 902 2 970 4495 t
(only the 20 nearest neighbors of a chosen)7 2005 1 720 4645 t
12 I f
(t)2757 4645 w
9 R f
(2)2806 4669 w
12 R f
(as candidates for)2 811 1 2893 4645 t
12 I f
(t)3736 4645 w
9 R f
(3)3785 4669 w
12 R f
( instead)1 372( however,)1 474(. Now,)1 354 3 3840 4645 t
(of just picking a random such neighbor as)7 2027 1 720 4795 t
12 I f
(t)2779 4795 w
9 R f
(3)2828 4819 w
12 R f
( each in turn, we consider all)6 1402(, or considering)2 755 2 2883 4795 t
( our choice for)3 718( Given)1 358(of them in parallel.)3 931 3 720 4945 t
12 I f
(t)2762 4945 w
9 R f
(2)2811 4969 w
12 R f
(, we let)2 360 1 2866 4945 t
12 I f
(t)3261 4945 w
9 R f
(1)3310 4969 w
12 R f
( tour successor and compute)4 1377(be its)1 263 2 3400 4945 t
(for each)1 403 1 720 5095 t
12 I f
(t)1167 5095 w
9 R f
(3)1216 5119 w
12 R f
( length of the tour obtained by performing the induced 2-Opt)10 3074(candidate the)1 651 2 1315 5095 t
( possible tour length has a weight associated with it, the weight being 0 if the)15 3723(move. Each)1 597 2 720 5245 t
( then)1 247( successor of the current tour is)6 1556( The)1 255(tour length exceeds the threshold [Lee, 1995].)6 2262 4 720 5395 t
( this set of derived tours augmented by the current tour, with prob-)12 3226(chosen randomly from)2 1094 2 720 5545 t
( choice of one from many is the essence of)9 2186( The)1 261(abilities proportional to their weights.)4 1873 3 720 5695 t
( [1986] the current tour is not)6 1548(rejectionless annealing, although in Greene & Supowit)6 2772 2 720 5845 t
( temperature)1 622(included in the options, and the weights are computed differently and are)11 3698 2 720 5995 t
(dependent.)720 6145 w
( increase the probability of acceptance)5 1874(Here the weight function is designed so as to)8 2196 2 970 6331 t
( to the theory)3 683( According)1 581(of the more rarely seen solution values \(suitably discretized\).)8 3056 3 720 6481 t
(behind this approach \(e.g., see Lee [1993]\), the appropriate choice for the weight of the)14 4320 1 720 6631 t
(\(rounded\) tour length)2 1032 1 720 6781 t
12 I f
(L)1784 6781 w
12 R f
(is 1)1 173 1 1883 6781 t
12 I f
(/)2066 6781 w
12 S f
(W)2110 6781 w
12 R f
(\()2212 6781 w
12 I f
(L)2262 6781 w
12 R f
(\), where)1 394 1 2339 6781 t
12 S f
(W)2765 6781 w
12 R f
(\()2867 6781 w
12 I f
(L)2917 6781 w
12 R f
( length)1 332(\) is the probability density for)5 1445 2 2994 6781 t
12 I f
(L)4802 6781 w
12 R f
(. If)1 171 1 4869 6781 t
( each possible value of)4 1106(we could assume everything were independent, this would make)8 3114 2 720 6931 t
12 I f
(L)4973 6931 w
12 R f
( Assuming)1 557( threshold equally likely to occur as the next tour length.)10 2806(that is less than the)4 957 3 720 7081 t
( are the rarer ones \(and that extremely bad lengths are)10 2641(that the more extreme tour lengths)5 1679 2 720 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 69 69
%%Page: 70 70
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
70 pagesetup
12 R f
(- 70 -)2 260 1 2750 500 t
( scheme will cause the better of two moves to)9 2256(ruled out by the threshold constraint\), this)6 2064 2 720 870 t
( new)1 253( This)1 297(be chosen with the higher probability, as in ordinary simulated annealing.)10 3770 3 720 1020 t
( the ``rejectionless'' way in)4 1434(approach might conceivably be faster, however, because)6 2886 2 720 1170 t
(which the choices are made is potentially less biased toward retaining the current tour.)13 4153 1 720 1320 t
( do not typically know)4 1146(Of course, we)2 698 2 970 1506 t
12 S f
(W)2860 1506 w
12 R f
(\()2962 1506 w
12 I f
(L)3012 1506 w
12 R f
(\), so the algorithm can only attempt to)7 1951 1 3089 1506 t
( histogram of the)3 858( approximation is based on a continually updated)7 2459( The)1 260(approximate it.)1 743 4 720 1656 t
( shorter)1 375(lengths of the chosen tours, with log-linear extrapolations made for tour lengths)11 3945 2 720 1806 t
( facilitate the mainte-)3 1042( To)1 198( and Choi [1994] for details\).)5 1427(than any previously seen \(see Lee)5 1653 4 720 1956 t
( every)1 322(nance of histograms, the threshold is only lowered after)8 2874 2 720 2106 t
12 I f
(MN)3972 2106 w
12 R f
(moves \(typically)1 832 1 4208 2106 t
12 I f
(M)720 2256 w
12 S f
(=)870 2256 w
12 R f
( to the current tour length or)6 1380(25\), and at that time it is set)7 1374 2 986 2256 t
12 S f
(d)3774 2256 w
12 R f
(plus the best tour length)4 1173 1 3867 2256 t
( Here)1 292(seen so far, whichever is greater.)5 1576 2 720 2406 t
12 S f
(d)2618 2406 w
12 R f
( for a given instance size but shrinks as a)9 1975(is fixed)1 358 2 2707 2406 t
(proportion of tour length as)4 1323 1 720 2556 t
12 I f
(N)2073 2556 w
12 R f
(increases.)2183 2556 w
( reported by Lee and Choi [1994] suggest that, at least for smaller values)13 3537(The results)1 533 2 970 2742 t
(of)720 2892 w
12 I f
(N)860 2892 w
12 R f
( comparable)1 599(, their implementation of Multicanonical Annealing attains tour quality)8 3501 2 940 2892 t
(to that of SA)3 657 1 720 3042 t
9 R f
(2)1392 3066 w
12 R f
(with)1490 3042 w
12 S f
(a =)1 192 1 1747 3042 t
12 R f
(40 \(interpreting the reported data in light of the estimates for)10 3051 1 1989 3042 t
( For)1 283(expected Held-Karp bounds by Johnson, McGeoch, and Rothberg [1996]\).)8 4037 2 720 3192 t
12 I f
(N)720 3342 w
12 S f
(=)850 3342 w
12 R f
( reported tour quality for Multicanonical Annealing implies a)8 3027( however, the)2 667(10 , 000,)2 380 3 966 3342 t
(2.0)720 3492 w
12 I f
(%)870 3492 w
12 R f
(excess, compared to 1.7)3 1213 1 1021 3492 t
12 I f
(%)2234 3492 w
12 R f
( and Choi do not generally)5 1378( Lee)1 259( annealing.)1 547(for 2-Opt)1 471 4 2385 3492 t
( how the multicanonical approach com-)5 1940(report running times, so it is difficult to evaluate)8 2380 2 720 3642 t
( one time they do report is 7 CPU-hours on an IBM 340h work-)13 3137( The)1 253(petes on that basis.)3 930 3 720 3792 t
( should be compared to the 6 hours that 2-Opt)9 2359(station for 10,000-city instances, which)4 1961 2 720 3942 t
( sug-)1 252( This)1 289( Challenge.)1 562(annealing takes for such instances on the presumably faster SGI)9 3217 4 720 4092 t
( same machine, 2-Opt annealing's 1.7)5 1863(gests that on the)3 803 2 720 4242 t
12 I f
(%)3386 4242 w
12 R f
(excess might take significantly)3 1515 1 3525 4242 t
(longer to obtain than Multicanonical Annealing's 2.0)6 2615 1 720 4392 t
12 I f
(%)3335 4392 w
12 R f
( to)1 133(, leaving the question open as)5 1472 2 3435 4392 t
(which approach would be better once running times were equalized.)9 3273 1 720 4542 t
( there are a vari-)4 806( Clearly)1 418(This question thus joins the many left open in this section.)10 2846 3 970 4728 t
( performance for annealing or a)5 1601(ety of possible directions that might lead to improved)8 2719 2 720 4878 t
( we)1 190( As)1 214( in other domains.)3 932(close variant, and many of these ideas might be applicable)9 2984 4 720 5028 t
( these questions are mostly)4 1341(warned the reader at the beginning of this section, however,)9 2979 2 720 5178 t
( much-faster Lin-)2 899( have already seen how the)5 1435( We)1 254(academic in the case of the TSP.)6 1732 4 720 5328 t
( the next)2 442( In)1 174( dominates annealing when running times are limited.)7 2684(Kernighan algorithm)1 1020 4 720 5478 t
( that in the context of the TSP are much more)10 2400(section we shall encounter approaches)4 1920 2 720 5628 t
(effective than simulated annealing at using any extra time that might be available.)12 3939 1 720 5778 t
14 B f
( ALGORITHMS AND ITERATED LIN-KERNIGHAN)4 3335(6. GENETIC)1 823 2 720 6108 t
12 R f
( approach to optimization can be traced back at least)9 2582(The use of genetic algorithms as an)6 1738 2 720 6331 t
( best)1 241( The)1 263( history.)1 412( Goldberg [1989] and Chapter 6 for some of the)9 2459( See)1 251(to the 1970's.)2 694 6 720 6481 t
( the TSP follow the basic schema presented in Figure 6,)10 2800(adaptations of this approach to)4 1520 2 720 6631 t
( viewed as)2 510(where each performance of the loop consisting of Steps 3.1 through 3.5 can be)13 3810 2 720 6781 t
(the processing of a single)4 1274 1 720 6931 t
12 I f
(generation)2037 6931 w
12 R f
( the opera-)2 541( that)1 224( Note)1 306(in the evolutionary process.)3 1368 4 2601 6931 t
(tions on different solutions can be performed in parallel if desired, and so this is some-)15 4320 1 720 7081 t
( with the schema for simulated)5 1680( As)1 232(times called the ``parallel genetic algorithm.'')5 2408 3 720 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 70 70
%%Page: 71 71
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
71 pagesetup
12 R f
(- 71 -)2 260 1 2750 500 t
( operations and definitions unspecified.)4 1902(annealing in Section 5, this schema leaves several)7 2418 2 720 870 t
(A specific adaptation of the schema to the TSP needs to specify)11 3082 1 720 1020 t
12 I f
(k)3834 1020 w
12 R f
(and)3919 1020 w
12 I f
(k)4124 1020 w
12 S f
(\242)4187 1020 w
12 R f
( methods for)2 614(, the)1 209 2 4217 1020 t
( algorithm)1 501(generating starting solutions \(tours\), the local optimization)6 2845 2 720 1170 t
12 B f
(A)4098 1170 w
12 R f
(, the mating strat-)3 856 1 4184 1170 t
( operators, the selection strategy, and the)6 2053(egy, the nature of the crossover and mutation)7 2267 2 720 1320 t
(criterion for convergence.)2 1243 1 720 1470 t
( a)1 83(1. Generate)1 622 2 1090 1866 t
12 I f
(population)1825 1866 w
12 R f
(of)2377 1866 w
12 I f
(k)2507 1866 w
12 R f
(starting solutions)1 828 1 2590 1866 t
12 B f
(S)3448 1866 w
12 R f
(= {)1 155 1 3545 1866 t
12 I f
(S)3700 1866 w
9 R f
(1)3775 1890 w
12 R f
(, . . . ,)4 270 1 3840 1866 t
12 I f
(S)4140 1866 w
9 I f
(k)4215 1890 w
12 R f
(}.)4265 1866 w
( a given local optimization algorithm)5 1783(2. Apply)1 490 2 1090 2052 t
12 B f
(A)3393 2052 w
12 R f
(to each solution)2 762 1 3509 2052 t
12 I f
(S)4301 2052 w
12 R f
(in)4391 2052 w
12 B f
(S)4515 2052 w
12 R f
(,)4582 2052 w
(letting the resulting locally optimal solution replace)6 2490 1 1280 2238 t
12 I f
(S)3800 2238 w
12 R f
(in)3890 2238 w
12 B f
(S)4014 2238 w
12 R f
(.)4081 2238 w
( not yet)2 361(3. While)1 484 2 1090 2424 t
12 I f
(converged)1965 2424 w
12 R f
(do the following:)2 829 1 2494 2424 t
(3.1. Select)1 544 1 1280 2610 t
12 I f
(k)1854 2610 w
12 S f
(\242)1917 2610 w
12 R f
(distinct subsets of)2 864 1 1977 2610 t
12 B f
(S)2871 2610 w
12 R f
(of size 1 or 2 as)5 757 1 2968 2610 t
12 I f
(parents)3755 2610 w
12 R f
(\(the)1530 2796 w
12 I f
(mating)1747 2796 w
12 R f
(strategy\).)2111 2796 w
( each 1-element subset, perform a randomized)6 2218(3.2. For)1 417 2 1280 2982 t
12 I f
(mutation)3945 2982 w
12 R f
(operation to obtain a new solution.)5 1670 1 1530 3168 t
( each 2-element subset, perform a \(possibly randomized\))7 2730(3.3. For)1 417 2 1280 3354 t
12 I f
(crossover)1530 3540 w
12 R f
(operation to obtain a new solution that reflects aspects)8 2612 1 2027 3540 t
(of both parents.)2 751 1 1530 3726 t
( local optimization algorithm)3 1403(3.4. Apply)1 550 2 1280 3912 t
12 B f
(A)3263 3912 w
12 R f
(to each of the)3 650 1 3379 3912 t
12 I f
(k)4059 3912 w
12 S f
(\242)4122 3912 w
12 R f
(solutions)4182 3912 w
(produced in Step 3.3, and let)5 1378 1 1530 4098 t
12 B f
(S)2938 4098 w
12 S f
(\242)3015 4098 w
12 R f
(be the set of resulting solutions.)5 1532 1 3075 4098 t
( a)1 83(3.5. Using)1 537 2 1280 4284 t
12 I f
(selection strategy)1 846 1 1930 4284 t
12 R f
(, choose)1 393 1 2776 4284 t
12 I f
(k survivors)1 531 1 3199 4284 t
12 R f
(from)3760 4284 w
12 B f
(S)4024 4284 w
12 S f
(\310)4131 4284 w
12 B f
(S)4263 4284 w
12 S f
(\242)4340 4284 w
12 R f
(,)4370 4284 w
(and replace the contents of)4 1287 1 1530 4470 t
12 B f
(S)2847 4470 w
12 R f
(by these survivors.)2 905 1 2944 4470 t
( the best solution in)4 944(4. Return)1 517 2 1090 4656 t
12 B f
(S)2581 4656 w
12 R f
(.)2648 4656 w
12 S f
(_ ______________________________________________________________\347)1 3729 1 970 4731 t
(\347)4699 4680 w
(\347)4699 4560 w
(\347)4699 4440 w
(\347)4699 4320 w
(\347)4699 4200 w
(\347)4699 4080 w
(\347)4699 3960 w
(\347)4699 3840 w
(\347)4699 3720 w
(\347)4699 3600 w
(\347)4699 3480 w
(\347)4699 3360 w
(\347)4699 3240 w
(\347)4699 3120 w
(\347)4699 3000 w
(\347)4699 2880 w
(\347)4699 2760 w
(\347)4699 2640 w
(\347)4699 2520 w
(\347)4699 2400 w
(\347)4699 2280 w
(\347)4699 2160 w
(\347)4699 2040 w
(\347)4699 1920 w
(\347)4699 1800 w
(_ ______________________________________________________________)1 3729 1 970 1680 t
(\347)970 1800 w
(\347)970 1851 w
(\347)970 1971 w
(\347)970 2091 w
(\347)970 2211 w
(\347)970 2331 w
(\347)970 2451 w
(\347)970 2571 w
(\347)970 2691 w
(\347)970 2811 w
(\347)970 2931 w
(\347)970 3051 w
(\347)970 3171 w
(\347)970 3291 w
(\347)970 3411 w
(\347)970 3531 w
(\347)970 3651 w
(\347)970 3771 w
(\347)970 3891 w
(\347)970 4011 w
(\347)970 4131 w
(\347)970 4251 w
(\347)970 4371 w
(\347)970 4491 w
(\347)970 4611 w
(\347)970 4731 w
11 B f
(Figure 6.)1 422 1 1468 5053 t
11 R f
(General schema for a genetic optimization algorithm.)6 2345 1 1946 5053 t
12 R f
( ``genetic'')1 538(It should be noted that the schema in Figure 6 is not what was meant by a)16 3532 2 970 5461 t
( particular, the application of)4 1461( In)1 177( such early references as Holland [1975].)6 2071(algorithm in)1 611 4 720 5611 t
( viewed as an)3 688(local optimization to the individual solutions in Steps 2 and 3.4 could be)12 3632 2 720 5761 t
( for the)2 387( the context of the original biological motivation)7 2485( In)1 181(almost heretical addition:)2 1267 4 720 5911 t
( principle that learned traits can)5 1535(genetic approach, it embodies the discredited Lamarckian)6 2785 2 720 6061 t
( optimization steps appear to be essential if compet-)8 2516( such local)2 520( Nonetheless,)1 680(be inherited.)1 604 4 720 6211 t
( be obtained for the TSP, and we shall restrict our attention in what fol-)14 3457(itive results are to)3 863 2 720 6361 t
( is not to say that the non-Lamarckian)7 1925( \(This)1 329(lows to genetic algorithms that use them.)6 2066 3 720 6511 t
( an interesting recent example in which)6 1901( For)1 229( by researchers.)2 753(approach has been abandoned)3 1437 4 720 6661 t
( partitioning the cities, see Valenzuela)5 1877(the genes correspond to schema for geometrically)6 2443 2 720 6811 t
(and Jones [1994].\))2 890 1 720 6961 t
( steps of Figure 6, a genetic algorithm can prop-)9 2337(Even without the local optimization)4 1733 2 970 7147 t
( is a neighborhood structure in)5 1551( Implicit)1 460( classified as a variant on local search.)7 1961(erly be)1 348 4 720 7297 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 71 71
%%Page: 72 72
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
72 pagesetup
12 R f
(- 72 -)2 260 1 2750 500 t
(which the neighbors of a solution are those solutions that can be reached by a single)15 4320 1 720 870 t
( the local optimization steps, the schema can also be)9 2557( With)1 307(mutation or mating operation.)3 1456 3 720 1020 t
( an algorithmic approach we discussed extensively in the)8 2833(viewed simply as a variant on)5 1487 2 720 1170 t
(previous section: the best-of-)3 1481 1 720 1320 t
12 I f
(k)2201 1320 w
12 R f
( instead of)2 555( Here,)1 349(-runs approach to local optimization.)4 1882 3 2254 1320 t
( the genetically-motivated operations to construct what)6 2658(independent random starts, we use)4 1662 2 720 1470 t
( ones that incorporate knowledge we have obtained)7 2512(we hope will be better starting tours,)6 1808 2 720 1620 t
( turn out that this latter way of viewing the schema is the more)13 3023( will)1 218( It)1 134(from previous runs.)2 945 4 720 1770 t
(productive.)720 1920 w
( of the above schema and the most)7 1714(We begin in Section 6.1 by covering the history)8 2356 2 970 2106 t
( testbed for)2 549( 6.2 then presents results on our standard)7 1998( Section)1 426(influential adaptations of it.)3 1347 4 720 2256 t
(the most cost-effective of these adaptations to date, the)8 2818 1 720 2406 t
12 I f
(Iterated Lin-Kernighan)1 1149 1 3591 2406 t
12 R f
(algo-)4793 2406 w
( with a sampling of some recent adaptations that take the)10 2872( 6.3 concludes)2 720(rithm. Section)1 728 3 720 2556 t
(basic schema in more complicated directions.)5 2191 1 720 2706 t
14 B f
( in the Schema)3 874(6.1. Filling)1 669 2 720 3036 t
14 I f
(Brady's Algorithm and its Successors)4 2110 1 720 3439 t
12 R f
( of Figure 6 appears to be that of Brady)9 1981(The first TSP algorithm embodying the schema)6 2339 2 720 3662 t
( restricted himself to matings \(i.e.,)5 1703( used 2-Opt for local optimization and)6 1903([1985]. Brady)1 714 3 720 3812 t
( strategy, he identified the parents by doing)7 2098( his mating)2 538( For)1 228(all offspring had two parents\).)4 1456 4 720 3962 t
( of)1 132(a random matching of the elements)5 1708 2 720 4112 t
12 B f
(S)2592 4112 w
12 R f
(\(thus implying)1 709 1 2691 4112 t
12 I f
(k)3432 4112 w
12 S f
(\242 =)1 146 1 3495 4112 t
12 I f
(k /)1 97 1 3691 4112 t
12 R f
( his crossover oper-)3 950(2\). In)1 292 2 3798 4112 t
( parent tours until he found a pair of common subpaths, one in)12 3187(ation, he examined the)3 1133 2 720 4262 t
( order.)1 321(each parent tour, that contained precisely the same set of cities, but in a different)14 3999 2 720 4412 t
( then obtained by removing the longer of the two subpaths from the tour)13 3625(The child was)2 695 2 720 4562 t
(that contained it and replacing it by its shorter counterpart.)9 2820 1 720 4712 t
( experiments with this approach, Brady first observed that increasing)9 3393(In his)1 279 2 970 4898 t
12 I f
(k)4681 4898 w
12 R f
(could)4773 4898 w
( instance, he obtained signifi-)4 1492( a 64-city random Euclidean)4 1437( For)1 246(yield improved results.)2 1145 4 720 5048 t
( time with)2 501(cantly better results in a given \(sequential\) amount of)8 2606 2 720 5198 t
12 I f
(k)3863 5198 w
12 S f
(=)3966 5198 w
12 R f
(12 than with)2 613 1 4082 5198 t
12 I f
(k)4731 5198 w
12 S f
(=)4834 5198 w
12 R f
(2.)4950 5198 w
(The)720 5348 w
12 I f
(k)951 5348 w
12 S f
(=)1054 5348 w
12 R f
( marginally better than he obtained by spending the same)9 2874(12 results also were)3 996 2 1170 5348 t
( advan-)1 364( This)1 282( performing multiple-run 2-Opt from random starting tours.)7 2924(amount of time)2 750 4 720 5498 t
( tours)1 272(tage may, however, have been due to the fact that when started from the fairly good)15 4048 2 720 5648 t
( 2-Opt was 2 to 3 times faster)7 1503(produced by the mating operation, his implementation of)7 2817 2 720 5798 t
( started from a random tour, and so even with the overhead of the mating)14 3507(than when it was)3 813 2 720 5948 t
( in a given)3 570(procedure, the genetic algorithm could perform twice as many 2-Opt runs)10 3750 2 720 6098 t
( been obtained simply by using the)6 1677( same sort of speedup could have)6 1600( This)1 275(amount of time.)2 768 4 720 6248 t
( as)1 155( Moreover,)1 588( tours for 2-Opt.)3 856(randomized Greedy algorithm to generate the starting)6 2721 4 720 6398 t
(observed in Section 3.2, Greedy starts yield significantly better final tours than do totally)13 4320 1 720 6548 t
(random starts.)1 682 1 720 6698 t
( version of the genetic approach had)6 1776(Brady's results nevertheless suggested that this)5 2294 2 970 6884 t
( the particular)2 672( First,)1 314( in which it could be improved.)6 1518(potential, as there were obvious ways)5 1816 4 720 7034 t
( instances with 64 cities, he was)6 1593( For)1 236( chose was severely limited.)4 1388(crossover operation he)2 1103 4 720 7184 t
( to find common subpaths of nontrivial length \(8 to 32 cities\), but this will)14 3730(usually able)1 590 2 720 7334 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 42 536 764
%%EndPage: 72 72
%%Page: 73 73
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
73 pagesetup
12 R f
(- 73 -)2 260 1 2750 500 t
(clearly become less likely as)4 1436 1 720 870 t
12 I f
(N)2201 870 w
12 R f
( Suh and)2 452( instances of 100 to 200 cities,)6 1550(increases. For)1 712 3 2326 870 t
( what they called the)4 1006(Van Gucht [1987a,1987b] replaced Brady's crossover with)6 2859 2 720 1020 t
12 I f
(heuristic)4618 1020 w
12 R f
( this crossover, one constructs the child of)7 2108( In)1 172(crossover from Grefenstette et al. [1985].)5 2040 3 720 1170 t
( Nearest Neighbor, restricted to the edges in the union of the)11 2991(two parents by a variant of)5 1329 2 720 1320 t
( random)1 403( construction works roughly as follows: We begin by picking a)10 3074( The)1 251(two parents.)1 592 4 720 1470 t
( if city)2 325( Inductively,)1 643(starting city.)1 608 3 720 1620 t
12 I f
(c)2331 1620 w
12 R f
(is currently the last city in the current partial tour, the)10 2621 1 2419 1620 t
( neighbor of)2 589(next city is the closest unvisited city that is a tour)10 2376 2 720 1770 t
12 I f
(c)3716 1770 w
12 R f
(in one of the parent tours.)5 1240 1 3800 1770 t
( and Van Gucht combined)4 1291( Suh)1 255( such city exists, a random unvisited city is chosen.)9 2535(If no)1 239 4 720 1920 t
( a limited number of)4 1003(this crossover with a truncated version of 2-Opt \(one that performed)10 3317 2 720 2070 t
( With)1 304( guarantee local optimality\).)3 1366(moves and did not)3 897 3 720 2220 t
12 I f
(k)3320 2220 w
12 S f
(=)3423 2220 w
12 R f
(100, they appear to have found)5 1501 1 3539 2220 t
(tours comparable to those reported for 3-Opt in Section 3.2, although their studies were)13 4320 1 720 2370 t
(restricted to a few instances, all with)6 1820 1 720 2520 t
12 I f
(N)2580 2520 w
12 S f
(\243)2700 2520 w
12 R f
( even for)2 444( their running times,)3 1007(200. Moreover,)1 783 3 2806 2520 t
(their parallel implementation [Suh & Van Gucht, 1987b], appear to have been far in)13 4320 1 720 2670 t
(excess of the 0.1 seconds or less required by neighbor-list 3-Opt for instances this small.)14 4255 1 720 2820 t
14 I f
(The M)1 361 1 720 3150 t
(. .)1 63 1 1081 3066 t
(uhlenbein et al. Algorithm)3 1470 1 1081 3150 t
12 R f
( came with the work of M)6 1403(A major leap in genetic algorithm performance)6 2413 2 720 3373 t
(. .)1 54 1 4536 3301 t
(uhlenbein,)4536 3373 w
(Gorges-Schleuter, and Kr)2 1253 1 720 3523 t
(. .)1 54 1 1973 3451 t
( start for)2 430( algorithm was designed from the)5 1673( Their)1 332(amer [1988].)1 632 4 1973 3523 t
( it introduced a more sophisticated mating strategy, together)8 2931(parallel implementation, and)2 1389 2 720 3673 t
( each proces-)2 638( tour was assigned to)4 1024( One)1 263(with what appears to be an even better crossover.)8 2395 4 720 3823 t
( the loop each processor would mate its tour \(the)9 2466(sor, and every time through)4 1377 2 720 3973 t
12 I f
(receiver)4607 3973 w
12 R f
(\))5000 3973 w
(with some other processor's tour \(the)5 1858 1 720 4123 t
12 I f
(donor)2621 4123 w
12 R f
( from a)2 371( donor was chosen randomly)4 1432(\). The)1 329 3 2908 4123 t
( tours consisting of the four tours on neighboring processors \(their initial)11 3698(collection of)1 622 2 720 4273 t
( processors\) together with the best tour)6 1960(parallel machine used a grid to interconnect its)7 2360 2 720 4423 t
( cross-)1 325( The)1 254( the shorter tours.)3 866(overall \(if not a neighbor\), with a bias imposed in favor of)11 2875 4 720 4573 t
( choosing a subpath of length between 10)7 2103(over operation itself proceeded by randomly)5 2217 2 720 4723 t
(and)720 4873 w
12 I f
(N /)1 124 1 933 4873 t
12 R f
( and then extending it to a full tour by adding successive cities)12 3132(2 from the donor)3 841 2 1067 4873 t
(much as in the)3 791 1 720 5023 t
12 I f
(heuristic)1571 5023 w
12 R f
( extension was biased toward edges in the)7 2221(crossover. The)1 766 2 2053 5023 t
( worked as follows: Let city)5 1390( It)1 143( to shorter edges.)3 848(receiver rather than)2 949 4 720 5173 t
12 I f
(c)4089 5173 w
12 R f
(be the last city in)4 859 1 4181 5173 t
( If)1 141(the current path.)2 786 2 720 5323 t
12 I f
(c)1678 5323 w
12 R f
(has a tour neighbor in the receiver tour that has not yet been visited,)13 3278 1 1762 5323 t
( if)1 114( Otherwise)1 563( end of the path.)4 817(add such a city to the)5 1063 4 720 5473 t
12 I f
(c)3317 5473 w
12 R f
(has an unvisited tour neighbor in)5 1630 1 3410 5473 t
( as-yet-unvisited)1 803( neither possibility holds, add the first)6 1854( If)1 145(the donor tour, add such a city.)6 1518 4 720 5623 t
(city in the receiver tour.)4 1152 1 720 5773 t
(M)970 5959 w
(. .)1 54 1 1077 5887 t
( local optimization on off-)4 1280(uhlenbein et al. also introduced an idea for speeding up)9 2683 2 1077 5959 t
( tour, they identified all the subpaths of 4 or more cities that)12 3029(spring: For each offspring)3 1291 2 720 6109 t
(were present in both parents and)5 1572 1 720 6259 t
12 I f
(locked)2325 6259 w
12 R f
(all the edges joining the cities in such paths, for-)9 2369 1 2671 6259 t
( described by M)3 819( As)1 207( such an edge.)3 721(bidding any 2-Opt move that breaks)5 1807 4 720 6409 t
(. .)1 54 1 4274 6337 t
(uhlenbein et al.)2 766 1 4274 6409 t
( performed Or-Opt as well as 2-Opt moves and)8 2300([1988], their local optimization algorithm)4 2020 2 720 6559 t
( search as Guh and)4 937(ran until full local optimality was attained, rather than truncating the)10 3383 2 720 6709 t
( their most impressive results, however, they ended up dropping the)10 3349( For)1 236(Van Sucht did.)2 735 3 720 6859 t
( 2-Opt, sped up using the above locking trick.)8 2228(Or-Opt moves and simply used a truncated)6 2092 2 720 7009 t
( a given amount of time, which appar-)7 1884(This allowed them to process more generations in)7 2436 2 720 7159 t
(ently made up for the loss of local-optimization firepower.)8 2816 1 720 7309 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 73 73
%%Page: 74 74
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
74 pagesetup
12 R f
(- 74 -)2 260 1 2750 500 t
(The results reported by M)4 1312 1 970 870 t
(. .)1 54 1 2282 798 t
(uhlenbein et al. [1988] were for a 16-processor Encore)8 2758 1 2282 870 t
(system, with the biggest problem considered being an early version of the)11 3832 1 720 1020 t
12 C f
(TSPLIB)4608 1020 w
12 R f
(instance)720 1170 w
12 C f
(pcb442)1157 1170 w
12 R f
( to one less decimal place of)6 1446(\(one in which distances were computed)5 1962 2 1632 1170 t
( 2- and Or-opting, the best solution)6 1705( this instance, using full)4 1164( For)1 231(precision than currently\).)2 1220 4 720 1320 t
( was 1)2 330(length found)1 622 2 720 1470 t
12 I f
(%)1672 1470 w
12 R f
(shorter than an average 3-Opt tour and only 0.1)8 2373 1 1814 1470 t
12 I f
(%)4187 1470 w
12 R f
(longer than an)2 711 1 4329 1470 t
( fast truncated 2-Opt and)4 1222( experiments using their)3 1184( Followup)1 529(average Lin-Kernighan tour.)2 1385 4 720 1620 t
( they concentrated on)3 1066( Here)1 304(a network of 64 Transputers improved significantly on this.)8 2950 3 720 1770 t
12 C f
(TSPLIB)720 1920 w
12 R f
(instance)1215 1920 w
12 C f
(att532)1672 1920 w
12 R f
(and obtained an average excess over optimal of 0.19)8 2773 1 2167 1920 t
12 I f
(%)4940 1920 w
12 R f
([Gorges-Schleuter, 1991], which is significantly better than the average of 0.94)10 4027 1 720 2070 t
12 I f
(%)4747 2070 w
12 R f
(for)4900 2070 w
( better results were reported by M)6 1826(Lin-Kernighan. \(Even)1 1122 2 720 2220 t
(. .)1 54 1 3668 2148 t
( Kindermann)1 662(uhlenbein and)1 710 2 3668 2220 t
( based on a corrupted copy of the instance [M)9 2314([1989], but these were)3 1109 2 720 2370 t
(. .)1 54 1 4143 2298 t
(uhlenbein, 1995].\))1 897 1 4143 2370 t
( their runs took 3 hours on their 64-processor network, compared to 2 seconds for)14 3948(Each of)1 372 2 720 2520 t
( transputers in the network were early models,)7 2348( The)1 264( on our SGI Challenge.)4 1182(an LK run)2 526 4 720 2670 t
(however, and probably not even 1)5 1687 1 720 2820 t
12 I f
(/)2417 2820 w
12 R f
( times)1 302( their)1 262( Thus)1 311(64th as fast as our SGI Challenge.)6 1704 4 2461 2820 t
( isn't)1 252( This)1 281( SGI Challenge.)2 784(probably translate to between 1 and 3 sequential hours on the)10 3003 4 720 2970 t
( 500 inde-)2 487(quite enough to make the algorithm competitive with Lin-Kernighan, for which)10 3833 2 720 3120 t
( optimal of 0.15)3 799(pendent runs take 10 minutes and yield an expected best excess over)11 3391 2 720 3270 t
12 I f
(%)4910 3270 w
12 R f
(.)5010 3270 w
( as what can be accomplished with our best simulated)9 2607(It is, however, in the same ballpark)6 1713 2 720 3420 t
( algorithm SA)2 686( runs of the previous section's annealing)6 1949( Four)1 288(annealing variant.)1 862 4 720 3570 t
9 R f
(3)4520 3594 w
12 R f
(with cut-)1 433 1 4607 3570 t
(offs and)1 397 1 720 3720 t
12 S f
(a =)1 192 1 1154 3720 t
12 R f
( take roughly an hour, with an expected best excess of 0.18)11 2903(100 together)1 611 2 1396 3720 t
12 I f
(%)4910 3720 w
12 R f
(,)5010 3720 w
(based on a suite of 100 such runs.)7 1621 1 720 3870 t
(The results of M)3 804 1 970 4056 t
(. .)1 54 1 1774 3984 t
( as)1 133(uhlenbein et al. suggest that the genetic approach may be at least)11 3133 2 1774 4056 t
( Subse-)1 401( Lin-Kernighan as is simulated annealing.)5 2080(serious a competitor for multiple-run)4 1839 3 720 4206 t
( yielded more detailed)3 1081(quent experiments with variants of the Muhlenbein et al. algorithm)9 3239 2 720 4356 t
( observation that larger popula-)4 1521( [1989] confirmed Brady's)3 1296(information. Gorges-Schleuter)1 1503 3 720 4506 t
( her)1 197(tion sizes lead to better results in a given amount of sequential time, at least up to)16 4123 2 720 4656 t
(64-processor limit \(see also M)4 1520 1 720 4806 t
(. .)1 54 1 2240 4734 t
( also performed)2 780( She)1 253( Kindermann [1989]\).)2 1076(uhlenbein and)1 691 4 2240 4806 t
( strategies, showing that they could sig-)6 1974(detailed studies of various mating and selection)6 2346 2 720 4956 t
( important for what follows, how-)5 1639( More)1 322( final tours.)2 556(nificantly influence the quality of the)5 1803 4 720 5106 t
(ever, is the question of what effects the choice of local optimization algorithm has.)13 3978 1 720 5256 t
( [1990] showed that, at least for their 70-processor imple-)9 2843(Jog, Suh, and Van Gucht)4 1227 2 970 5442 t
( the better were the solutions produced \(albeit at)8 2357(mentation, the less 2-Opt was truncated,)5 1963 2 720 5592 t
( [1991] went back to the original M)7 1740( Braun)1 357( of increased running time\).)4 1348(a cost)1 280 4 720 5742 t
(. .)1 54 1 4445 5670 t
(uhlenbein et)1 595 1 4445 5742 t
( Or-Opt and made it more practical by using neighbor-list)9 2919(al. idea of using full 2- and)6 1401 2 720 5892 t
( This)1 313( apparently not done.)3 1131(implementations, something that earlier researchers had)5 2876 3 720 6042 t
( to have the benefits of more powerful local optimization without compro-)11 3709(allowed him)1 611 2 720 6192 t
( For)1 237( in a reasonable length of time.)6 1546(mising the number of generations he could perform)7 2537 3 720 6342 t
(the 431-city instance in)3 1186 1 720 6492 t
12 C f
(TSPLIB)1956 6492 w
12 R f
( almost half his)3 797(, he reports finding optimal tours on)6 1855 2 2388 6492 t
( substantially out-)2 874( This)1 279( a Sun workstation.)3 943(runs, each of which took about 35 minutes on)8 2224 4 720 6642 t
( did not specify the model workstation)6 1863( Braun)1 355(performs even multiple-run Lin-Kernighan.)3 2102 3 720 6792 t
( one can guess that it was probably at least 10 times slower than our SGI Chal-)16 3881(used, but)1 439 2 720 6942 t
( full 35 minutes, which yields about 1200 runs, the)9 2613( if LK is allowed the)5 1091(lenge. Even)1 616 3 720 7092 t
( would be 0.3)3 674(expected best)1 656 2 720 7242 t
12 I f
(%)2050 7242 w
12 R f
( this estimate is based on a suite)7 1591( Moreover)1 540(above optimal.)1 722 3 2187 7242 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 51 536 764
%%EndPage: 74 74
%%Page: 75 75
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
75 pagesetup
12 R f
(- 75 -)2 260 1 2750 500 t
(of 10,000 runs, not one of which found an optimal tour.)10 2673 1 720 870 t
( al. [1991] considered using Lin-Kernighan itself for the local optimization)10 3674(Ulder et)1 396 2 970 1056 t
( results are not directly compa-)5 1503( Their)1 322( approach to one using 2-Opt.)5 1437(phase, comparing this)2 1058 4 720 1206 t
( ones, as they used a common bound on the overall \(sequential\) run-)12 3412(rable to the earlier)3 908 2 720 1356 t
( both variants that was considerably less than what M)9 2574(ning times for)2 678 2 720 1506 t
(. .)1 54 1 3972 1434 t
(uhlenbein et al. would)3 1068 1 3972 1506 t
( degraded to a)3 763( although the 2-Opt based genetic algorithm)6 2285( Nevertheless,)1 738(have used.)1 534 4 720 1656 t
(2.99)720 1806 w
12 I f
(%)930 1806 w
12 R f
(excess over optimal on)3 1105 1 1061 1806 t
12 C f
(att532)2196 1806 w
12 R f
(, the LK-based version averaged only 0.17)6 2039 1 2628 1806 t
12 I f
(%)4667 1806 w
12 R f
(over,)4797 1806 w
(with comparable results for other)4 1640 1 720 1956 t
12 C f
(TSPLIB)2401 1956 w
12 R f
( that because)2 644( Note)1 305(instances of similar size.)3 1217 3 2874 1956 t
( significantly)1 643(the running times were equal, the LK-based implementation could process)9 3677 2 720 2106 t
( local opti-)2 532(fewer generations than could the one based on 2-Opt, but in this case stronger)13 3788 2 720 2256 t
(mization more than made up for fewer generations.)7 2462 1 720 2406 t
14 I f
(Martin, Otto, and Felten's Algorithm and Iterated Lin-Kernighan)7 3675 1 720 2736 t
12 R f
( time, the performance)3 1112(The above studies suggest that for a given amount of \(sequential\))10 3208 2 720 2959 t
( a more powerful local optimization)5 1807(of a genetic algorithms can be improved by using)8 2513 2 720 3109 t
( Brady and M)3 696( of)1 140( Results)1 425(algorithm, assuming it is efficiently implemented.)5 2457 4 720 3259 t
(. .)1 54 1 4438 3187 t
(uhlenbein et)1 602 1 4438 3259 t
( can also be improved by increasing the)7 2010(al. mentioned earlier suggest that performance)5 2310 2 720 3409 t
( appears that)2 609( the context of the TSP, it now)7 1469( In)1 160( is more important?)3 940( Which)1 380(population size.)1 762 6 720 3559 t
( was first made apparent by Martin,)6 1754( This)1 281(the former is by far the more important factor.)8 2285 3 720 3709 t
( with)1 246(Otto, and Felten [1991,1992], who designed a high-performing ``genetic'' algorithm)9 4074 2 720 3859 t
( biological terms, this might be called a)7 2019( \(In)1 217(a population size of one!)4 1256 3 720 4009 t
12 I f
(parthenogenetic)4259 4009 w
12 R f
(algorithm.\))720 4159 w
( of course no longer possible, and one must restrict)9 2460(In such an algorithm, matings are)5 1610 2 970 4345 t
( a mutation, a solu-)4 926( In)1 160( little to say so far.)5 897(attention to mutations, about which we have had)7 2337 4 720 4495 t
( some form of randomized alteration that makes localized changes to)10 3392(tion is subjected to)3 928 2 720 4645 t
( like the small changes in DNA)6 1610(the solution while leaving most of its structure intact,)8 2710 2 720 4795 t
( ordinary genetic algorithm, mutations are)5 2035( an)1 144( In)1 161(structure that cause biological mutations.)4 1980 4 720 4945 t
( the Martin-Otto-Felten algo-)3 1413( In)1 162(one way of adding additional diversity to the population.)8 2745 3 720 5095 t
(rithm, they are the only way to keep the process going.)10 2636 1 720 5245 t
(The mutation used by Martin et al. is the)8 2067 1 970 5431 t
12 I f
(double-bridge)3081 5431 w
12 R f
( in)1 139(4-Opt move described)2 1095 2 3806 5431 t
( \(or directly undone\))3 1009(Section 3.5, chosen because such a move normally cannot be found)10 3311 2 720 5581 t
( as was pointed out in the original Lin-Kernighan paper)9 2909(by 3-Opt or Lin-Kernighan,)3 1411 2 720 5731 t
( Otto, and Felten choose their mutations randomly from a restricted set of)12 3550([1973]. Martin,)1 770 2 720 5881 t
( a)1 93(double-bridge moves in which no added edge exceeds a given length bound, typically)12 4227 2 720 6031 t
( which in this case)4 960( Selection,)1 556( of the average nearest-neighbor distance.)5 2090(small multiple)1 714 4 720 6181 t
( of whether to keep the current tour or replace it with)11 2644(means only resolving the question)4 1676 2 720 6331 t
( small fixed tempera-)3 1038(its locally-opted offspring, is done as in simulated annealing with a)10 3282 2 720 6481 t
(ture)720 6631 w
12 I f
(T)941 6631 w
12 R f
( accepted with)2 703( is, if the offspring is shorter, it is selected, and otherwise it is)13 3015(. That)1 314 3 1008 6631 t
(probability)720 6781 w
12 I f
(e)1289 6781 w
9 S f
(- D)1 120 1 1357 6733 t
9 I f
(/ T)1 82 1 1484 6733 t
12 R f
(, where)1 361 1 1576 6781 t
12 S f
(D)1976 6781 w
12 R f
(is the amount by which its length exceeds that of its parent.)11 2952 1 2088 6781 t
( their)1 257(Because of this randomized acceptance criterion, Martin et al. originally referred to)11 4063 2 720 6931 t
(algorithm as the)2 792 1 720 7081 t
12 I f
(Large Step Markov Chain)3 1272 1 1549 7081 t
12 R f
( shorter and more descriptive)4 1430(algorithm. The)1 752 2 2858 7081 t
(term)720 7231 w
12 I f
(chained local optimization)2 1356 1 1007 7231 t
12 R f
(has since been introduced to describe the general)7 2610 1 2430 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 75 75
%%Page: 76 76
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
76 pagesetup
12 R f
(- 76 -)2 260 1 2750 500 t
(procedure of which this algorithm is a special case [Martin & Otto, 1995].)12 3566 1 720 870 t
( of 3-Opt,)2 484(For local optimization, Martin et al. primarily used a fast implementation)10 3586 2 970 1056 t
( equivalent of the)3 883(using neighbor lists and the gain criterion, along with the)9 2891 2 720 1206 t
12 I f
(don't-look)4539 1206 w
12 R f
( even more successfully in this)5 1505( latter can be exploited)4 1111( The)1 250(bits mentioned in Section 3.3.)4 1454 4 720 1356 t
( that if city)3 529(context. Recall)1 752 2 720 1506 t
12 I f
(c)2032 1506 w
12 R f
(has its)1 306 1 2116 1506 t
12 I f
(don't-look)2453 1506 w
12 R f
( as a candidate)3 703(bit on, we do not consider it)6 1352 2 2985 1506 t
(for)720 1656 w
12 I f
(t)899 1656 w
9 R f
(1)948 1680 w
12 R f
( implement efficiently by simply keeping the cities whose bits)9 3083(, something we can)3 954 2 1003 1656 t
(are off in an)3 592 1 720 1806 t
12 I f
(active)1345 1806 w
12 R f
( we start the local optimization process for an offspring,)9 2710(queue. When)1 665 2 1665 1806 t
( that were endpoints of the edges)6 1653(the active queue needs to contain only the eight cities)9 2667 2 720 1956 t
( usual, we add a city to the queue)8 1693( As)1 206(broken by the preceding double-bridge mutation.)5 2421 3 720 2106 t
( of an improving move, but typically)6 1798(when one of its tour neighbors changes as the result)9 2522 2 720 2256 t
( the)1 193( that this procedure is something like)6 1881( Note)1 310(there will not be many such additions.)6 1936 4 720 2406 t
(M)720 2556 w
(. .)1 54 1 827 2484 t
( allowing moves to break edges not shared with both par-)10 2836(uhlenbein et al. idea of only)5 1377 2 827 2556 t
(ents, although it is a bit more flexible.)7 1830 1 720 2706 t
( found optimal solutions to)4 1351( It)1 147( promising.)1 562(The results for this algorithm were quite)6 2010 4 970 2892 t
(the 318-city)1 592 1 720 3042 t
12 C f
(TSPLIB)1356 3042 w
12 R f
(problem)1832 3042 w
12 C f
(lin318)2277 3042 w
12 R f
(in an hour on a SPARCstation 1 \(perhaps 4-6)8 2287 1 2753 3042 t
( For)1 228(minutes on our SGI Challenge\).)4 1536 2 720 3192 t
12 C f
(att532)2515 3192 w
12 R f
(, it could get within 0.07)5 1185 1 2947 3192 t
12 I f
(%)4132 3192 w
12 R f
( 15)1 152(of optimal in)2 625 2 4263 3192 t
( limited experiments with a version of Lin-)7 2328( In)1 197(hours \(1-1.5 SGI Challenge hour\).)4 1795 3 720 3342 t
( algorithm typically found optimal solutions for this)7 2529(Kernighan as the local optimizer, the)5 1791 2 720 3492 t
( are clearly much better results)5 1484( These)1 347( Challenge minutes\).)2 1001(instance in 3 hours \(12-18 SGI)5 1488 4 720 3642 t
(for this instance than any we have discussed so far.)9 2455 1 720 3792 t
( Lin-Kernighan in this context was reported)6 2162(A more thorough study of the value of)7 1908 2 970 3978 t
( by preprints of Martin et al. [1991], Johnson studied a sim-)11 2925( Inspired)1 459(by Johnson [1990].)2 936 3 720 4128 t
( that he called)3 689(plified variant of the Martin-Otto-Felten algorithm)5 2463 2 720 4278 t
12 I f
(Iterated Lin-Kernighan)1 1132 1 3908 4278 t
12 R f
(\(ILK\), where an)2 850 1 720 4428 t
12 I f
(iteration)1638 4428 w
12 R f
(corresponds to a generation in genetic algorithm terms.)7 2918 1 2122 4428 t
( of removing the length restriction on the 4-Opt)8 2549(Johnson's simplifications consisted)2 1771 2 720 4578 t
( the)1 186(moves, so that a mutation was simply a random double-bridge move, and removing)12 4134 2 720 4728 t
( acceptance criterion, with the locally-opted offspring being rejected)8 3303(randomness from the)2 1017 2 720 4878 t
( to Johnson, the term ``iterated'' had)6 1910( \(Unbeknownst)1 791( longer than its parent.)4 1179(if it was)2 440 4 720 5028 t
( [1986a,1986b], who pro-)3 1268(already been reserved for just this sort of algorithm by Baum)10 3052 2 720 5178 t
(posed an)1 443 1 720 5328 t
12 I f
(iterated descent)1 785 1 1213 5328 t
12 R f
( with 2-Opt as the local optimization)6 1879(algorithm for the TSP)3 1113 2 2048 5328 t
( key dis-)2 422( The)1 250( the role of the 4-Opt move played by a random 2-Opt move.)12 2973(algorithm and)1 675 4 720 5478 t
(tinction between)1 799 1 720 5628 t
12 I f
(chained)1550 5628 w
12 R f
(and)1961 5628 w
12 I f
(iterated)2165 5628 w
12 R f
(local optimization lies in the fact that the latter dis-)9 2469 1 2571 5628 t
(penses with the randomized acceptance criterion of the former.\))8 3065 1 720 5778 t
( of the Lin-Kernighan implementation discussed in Section 4.2 was)9 3266(An early version)2 804 2 970 5964 t
( at the beginning of each iteration.)6 1730(used, but with all cities initially in the active queue)9 2590 2 720 6114 t
(Johnson reported finding optimal solutions for)5 2317 1 720 6264 t
12 C f
(lin318)3083 6264 w
12 R f
(,)3515 6264 w
12 C f
(pcb442)3633 6264 w
12 R f
(,)4065 6264 w
12 C f
(att532)4141 6264 w
12 R f
(,)4573 6264 w
12 C f
(gr666)4650 6264 w
12 R f
(,)5010 6264 w
12 C f
(pr1002)720 6414 w
12 R f
(, and)1 274 1 1152 6414 t
12 C f
(pr2392)1467 6414 w
12 R f
( the large)2 467(, which were all)3 799 2 1899 6414 t
12 C f
(TSPLIB)3205 6414 w
12 R f
(instances for which optimal)3 1363 1 3677 6414 t
( going)1 316( In)1 172( all runs yielded optimal solutions of course.)7 2224( Not)1 252( then known.)2 647(solutions were)1 709 6 720 6564 t
(from)720 6714 w
12 C f
(lin318)990 6714 w
12 R f
(to)1458 6714 w
12 C f
(pr2392)1588 6714 w
12 R f
( run, translated to our SGI Challenge, increased)7 2320(, the times per)3 700 2 2020 6714 t
( while the fraction of runs leading to optimal solutions)9 2798(from 11 minutes to 5.5 hours,)5 1522 2 720 6864 t
(dropped from 60)2 825 1 720 7014 t
12 I f
(%)1545 7014 w
12 R f
(to 10)1 253 1 1684 7014 t
12 I f
(%)1937 7014 w
12 R f
( even when not optimal, the solutions found were)8 2437(. However,)1 566 2 2037 7014 t
( the same number of iterations, and)6 1711(typically far better than multiple-run LK could find in)8 2609 2 720 7164 t
(the running time was far less.)5 1416 1 720 7314 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 76 76
%%Page: 77 77
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
77 pagesetup
12 R f
(- 77 -)2 260 1 2750 500 t
( that the Martin-Otto-Felten approach, and in particular the)8 2851(It is now widely believed)4 1219 2 970 870 t
( least)1 262(ILK variant on it, is the most cost-effective way to improve on Lin-Kernighan, at)13 4058 2 720 1020 t
( discuss briefly in)3 892(until one reaches stratospheric running times, an eventuality we shall)9 3428 2 720 1170 t
( a primary upper-bounding tool in the optimization tech-)8 2824( was used as)3 638( ILK)1 273(Section 6.3.)1 585 4 720 1320 t
( the last three records for the)6 1393( and Cook that have set)5 1134( atal,)1 159( \302)1 45(niques of Applegate, Bixby, Chv)4 1589 5 720 1470 t
( 7397-city instances, respec-)3 1380(largest TSP instance solved to optimality \(3038-, 4461-, and)8 2940 2 720 1620 t
( [1996] have used)3 928( McGeoch, and Rothberg)3 1281( Johnson,)1 507(tively\) [Applegate et al., 1994].)4 1604 4 720 1770 t
( confirm that the Held-Karp lower bound remains with 0.75)9 2914(month-long runs of ILK to)4 1306 2 720 1920 t
12 I f
(%)4940 1920 w
12 R f
( as many as 100,000 cities.)5 1297(of the optimal tour length for random Euclidean instances with)9 3023 2 720 2070 t
( next section, we shall sum-)5 1336( the)1 178( In)1 161(It also holds promise for more practical uses, however.)8 2645 4 720 2220 t
(marize results for ILK used in what might be called ``production mode.'')11 3518 1 720 2370 t
( that no thorough study)4 1120(Before concluding this section, however, we should point out)8 2950 2 970 2556 t
( well-implemented version of the)4 1653(has yet been performed comparing ILK to an equally)8 2667 2 720 2706 t
( results of Martin and Otto [1995] suggest)7 2077( Recent)1 401( approach.)1 507(original Martin-Otto-Felten)1 1335 4 720 2856 t
( actually quite well-matched on an iteration-for-iteration)6 2887(that the two approaches are)4 1433 2 720 3006 t
(basis.)720 3156 w
14 B f
( Iterated Lin-Kernighan: Experimental Results)4 2822(6.2. Production-Mode)1 1336 2 720 3486 t
12 R f
( in the previous section, including the early research on the)10 2954(Most of the work discussed)4 1366 2 720 3709 t
( Lin-Kernighan, is difficult to extrapolate to)6 2235(Martin-Otto-Felten algorithm and Iterated)3 2085 2 720 3859 t
( instances,)1 510( experiments were performed on just a few specific)8 2525( Typically)1 529(other instances.)1 756 4 720 4009 t
( as the number of itera-)5 1148(and no attempt was made to determine how key parameters such)10 3172 2 720 4159 t
( ILK, it turns out that a very)7 1426( For)1 238( be scaled to reflect instance type or size.)8 2060(tions should)1 596 4 720 4309 t
(simple rule gives reasonably predictable results, and in this section we shall summarize)12 4320 1 720 4459 t
( Rothberg [1996] that confirm this.)5 1834(experiments of Johnson, Bentley, McGeoch, and)5 2486 2 720 4609 t
( running time and solution quality that can be)8 2274(They also illustrate the tradeoffs between)5 2046 2 720 4759 t
(made by adjusting the number of iterations.)6 2095 1 720 4909 t
( here, we adopt the Martin et al. idea of starting each)11 2554(In the version of ILK discussed)5 1516 2 970 5095 t
( of candidates for)3 840(iteration with only eight cities in the queue)7 2077 2 720 5245 t
12 I f
(t)3668 5245 w
9 R f
(1)3717 5269 w
12 R f
(, i.e, the eight cities which)5 1268 1 3772 5245 t
( of the just-completed double-bridge mutation.)5 2331(had a tour neighbor changed as a result)7 1989 2 720 5395 t
( and Cook [1990] that the depth of)7 1700( atal,)1 159( \302)1 45( Applegate, Chv)2 795(We also follow the suggestion of)5 1621 5 720 5545 t
( the full power of Lin-Kernighan as)6 1809( Otherwise,)1 599(all the LK-searches be bounded at 50.)6 1912 3 720 5695 t
( ``ILK\()1 353( Let)1 224(described in Section 4.2 is applied.)5 1700 3 720 5845 t
12 I f
(m)2997 5845 w
12 R f
( in which ILK is)4 799(\)'' denote the algorithm)3 1158 2 3083 5845 t
(run for)1 333 1 720 5995 t
12 I f
(m)1086 5995 w
12 R f
( 15 reports the)3 703( our testbed of random Euclidean instances, Table)7 2423(iterations. For)1 709 3 1205 5995 t
( for)1 187(average percentage excess over the Held-Karp lower bound and the running times)11 4133 2 720 6145 t
(ILK\()720 6295 w
12 I f
(N /)1 124 1 959 6295 t
12 R f
(10\), ILK\()1 464 1 1093 6295 t
12 I f
(N /)1 124 1 1557 6295 t
12 R f
(10)1691 6295 w
9 I f
(.)1818 6247 w
9 R f
(5)1848 6247 w
12 R f
(\) and ILK\()2 522 1 1903 6295 t
12 I f
(N)2425 6295 w
12 R f
(\), contrasting these with the expected results of per-)8 2535 1 2505 6295 t
( of LK runs from independent random greedy starts and)9 2813(forming an equivalent number)3 1507 2 720 6445 t
(taking the best solution found, computed as described in Section 5.2.)10 3310 1 720 6595 t
( would have resulted had we started each ILK iteration)9 2765(Somewhat better solutions)2 1305 2 970 6781 t
( in the active queue and left the LK-search depth unbounded, as in Johnson)13 3660(with all cities)2 660 2 720 6931 t
( of substantial increases in running time, how-)7 2267( would have come at the cost)6 1424([1990]. This)1 629 3 720 7081 t
( Moreover,)1 592(ever, and would not have been cost-effective on a time-equalized basis.)10 3728 2 720 7231 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 52 536 764
%%EndPage: 77 77
%%Page: 78 78
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
78 pagesetup
12 R f
(- 78 -)2 260 1 2750 500 t
( solved)1 355(although we do not find optimal solutions for the)8 2440 2 720 870 t
12 C f
(TSPLIB)3556 870 w
12 R f
(instances as often as)3 1011 1 4029 870 t
(did Johnson [1990], we still do find them on over half the runs of ILK\()14 3548 1 720 1020 t
12 I f
(N)4268 1020 w
12 R f
(\) for)1 220 1 4348 1020 t
12 C f
(lin318)4608 1020 w
12 R f
(and)720 1170 w
12 C f
(pcb442)923 1170 w
12 R f
(and on about one third of the runs for)8 1795 1 1385 1170 t
12 C f
(att532)3210 1170 w
12 R f
(.)3642 1170 w
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 1325 t
11 R f
(Average Percent Excess over the Held-Karp Lower Bound)7 2571 1 1594 1475 t
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 1525 t
10 R f
( 10)1 301(Independent Iterations)1 895 2 1032 1675 t
7 R f
(2)2233 1635 w
10 R f
(10)2499 1675 w
7 R f
(2. 5)1 93 1 2604 1635 t
10 R f
(10)2928 1675 w
7 R f
(3)3033 1635 w
10 R f
(10)3299 1675 w
7 R f
(3. 5)1 93 1 3404 1635 t
10 R f
(10)3728 1675 w
7 R f
(4)3833 1635 w
10 R f
(10)4099 1675 w
7 R f
(4. 5)1 93 1 4204 1635 t
10 R f
(10)4528 1675 w
7 R f
(5)4633 1635 w
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 1725 t
10 R f
( 1.68 2.01 1.89 1.96 1.91 1.95)6 2400(1 1.52)1 1020 2 1307 1875 t
10 I f
(N /)1 103 1 1307 2025 t
10 R f
( - -)2 800( 1.10 1.41 1.62 1.71)4 1600(10 .99)1 909 3 1418 2025 t
10 I f
(N /)1 103 1 1307 2175 t
10 R f
(10)1418 2175 w
7 I f
(.)1523 2135 w
7 R f
(5)1546 2135 w
10 R f
( - -)2 800(.92 1.00 1.35 1.59 1.68)4 1725 2 2202 2175 t
10 I f
(N)1307 2325 w
10 R f
( - -)2 800( 1.29 1.57 1.65)3 1200(.91 .93)1 525 3 2202 2325 t
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 2345 t
10 R f
(ILK Iterations)1 568 1 1195 2495 t
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 2545 t
10 I f
(N /)1 103 1 1307 2695 t
10 R f
( 1.08 1.25 1.21 1.26 1.25 1.31)6 2400(10 1.06)1 909 2 1418 2695 t
10 I f
(N /)1 103 1 1307 2845 t
10 R f
(10)1418 2845 w
7 I f
(.)1523 2805 w
7 R f
(5)1546 2805 w
10 R f
( 1.01 1.04 1.04 1.08)4 1600(.96 .90 .99)2 925 2 2202 2845 t
10 I f
(N)1307 2995 w
10 S f
(\347)2002 3015 w
(\347)2002 2925 w
(\347)2002 2825 w
(\347)2002 2725 w
(\347)2002 2625 w
(\347)2002 2525 w
(\347)2002 2425 w
(\347)2002 2325 w
(\347)2002 2225 w
(\347)2002 2125 w
(\347)2002 2025 w
(\347)2002 1925 w
(\347)2002 1825 w
(\347)2002 1725 w
(\347)2002 1625 w
10 R f
( -)1 400(.92 .79 .91 .88 .89 .91)5 2125 2 2202 2995 t
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 3015 t
11 R f
(Running Time in Seconds on a 150 Mhz SGI Challenge)9 2462 1 1648 3165 t
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 3215 t
10 R f
( 10)1 301(Independent Iterations)1 895 2 1032 3365 t
7 R f
(2)2233 3325 w
10 R f
(10)2499 3365 w
7 R f
(2. 5)1 93 1 2604 3325 t
10 R f
(10)2928 3365 w
7 R f
(3)3033 3325 w
10 R f
(10)3299 3365 w
7 R f
(3. 5)1 93 1 3404 3325 t
10 R f
(10)3728 3365 w
7 R f
(4)3833 3325 w
10 R f
(10)4099 3365 w
7 R f
(4. 5)1 93 1 4204 3325 t
10 R f
(10)4528 3365 w
7 R f
(5)4633 3325 w
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 3415 t
10 R f
( 150)1 400( 10 40)2 800( 3)1 400( .2 .8)2 800(1 .06)1 1020 5 1307 3565 t
10 I f
(N /)1 103 1 1307 3715 t
10 R f
( - -)2 800( 7250)1 450( 554)1 350( 48.1)1 400( 4.7)1 400(10 .42)1 909 6 1418 3715 t
10 I f
(N /)1 103 1 1307 3865 t
10 R f
(10)1418 3865 w
7 I f
(.)1523 3825 w
7 R f
(5)1546 3825 w
10 R f
( - -)2 800( 22900)1 450( 1750)1 350( 151.3)1 400(1.31 14.5)1 575 5 2152 3865 t
10 I f
(N)1307 4015 w
10 R f
( - -)2 800( 72400)1 450( 5540)1 350( 478.1)1 400(4.07 45.6)1 575 5 2152 4015 t
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 4035 t
10 R f
(ILK Iterations)1 568 1 1195 4185 t
10 S f
(_ ___________________________________________________________________________)1 3795 1 982 4235 t
10 I f
(N /)1 103 1 1307 4355 t
10 R f
( 10200)1 400( 1330)1 400( 189)1 400( 27)1 400( 5.1)1 400( .9)1 400(10 .14)1 909 7 1418 4355 t
10 I f
(N /)1 103 1 1307 4505 t
10 R f
(10)1418 4505 w
7 I f
(.)1523 4465 w
7 R f
(5)1546 4465 w
10 R f
( 30700)1 400( 3810)1 400( 524)1 400( 76)1 400( 13.6)1 400(.34 2.4)1 525 6 2202 4505 t
10 I f
(N)1307 4655 w
10 R f
( -)1 400( 11500)1 400( 1570)1 400( 219)1 400( 39.7)1 400(.96 6.5)1 525 6 2202 4655 t
10 S f
( \347)1 -3795(_ ___________________________________________________________________________)1 3795 2 982 4705 t
(\347)982 4625 w
(\347)982 4525 w
(\347)982 4425 w
(\347)982 4325 w
(\347)982 4225 w
(\347)982 4125 w
(\347)982 4025 w
(\347)982 3925 w
(\347)982 3825 w
(\347)982 3725 w
(\347)982 3625 w
(\347)982 3525 w
(\347)982 3425 w
(\347)982 3325 w
(\347)982 3225 w
(\347)982 3125 w
(\347)982 3025 w
(\347)982 2925 w
(\347)982 2825 w
(\347)982 2725 w
(\347)982 2625 w
(\347)982 2525 w
(\347)982 2425 w
(\347)982 2325 w
(\347)982 2225 w
(\347)982 2125 w
(\347)982 2025 w
(\347)982 1925 w
(\347)982 1825 w
(\347)982 1725 w
(\347)982 1625 w
(\347)982 1525 w
(\347)982 1425 w
(\347)2002 4705 w
(\347)2002 4615 w
(\347)2002 4515 w
(\347)2002 4415 w
(\347)2002 4315 w
(\347)2002 4215 w
(\347)2002 4115 w
(\347)2002 4015 w
(\347)2002 3915 w
(\347)2002 3815 w
(\347)2002 3715 w
(\347)2002 3615 w
(\347)2002 3515 w
(\347)2002 3415 w
(\347)2002 3315 w
(\347)4777 4705 w
(\347)4777 4625 w
(\347)4777 4525 w
(\347)4777 4425 w
(\347)4777 4325 w
(\347)4777 4225 w
(\347)4777 4125 w
(\347)4777 4025 w
(\347)4777 3925 w
(\347)4777 3825 w
(\347)4777 3725 w
(\347)4777 3625 w
(\347)4777 3525 w
(\347)4777 3425 w
(\347)4777 3325 w
(\347)4777 3225 w
(\347)4777 3125 w
(\347)4777 3025 w
(\347)4777 2925 w
(\347)4777 2825 w
(\347)4777 2725 w
(\347)4777 2625 w
(\347)4777 2525 w
(\347)4777 2425 w
(\347)4777 2325 w
(\347)4777 2225 w
(\347)4777 2125 w
(\347)4777 2025 w
(\347)4777 1925 w
(\347)4777 1825 w
(\347)4777 1725 w
(\347)4777 1625 w
(\347)4777 1525 w
(\347)4777 1425 w
11 B f
(Table 15.)1 436 1 1182 4945 t
11 R f
(Comparison of Iterated Lin-Kernighan with independent LK runs.)7 2904 1 1674 4945 t
12 R f
( runs per instance up to 10,000 cities, 5 for)9 2071(The averages in Table 15 are based on 10)8 1999 2 970 5263 t
( with our earlier tables of this sort, the last)9 2105( As)1 201( for 100,000 cities.)3 929(31,623 cities, and two)3 1085 4 720 5413 t
(digit of precision in our percentage excess figures is not itself statistically significant, but)13 4320 1 720 5563 t
( those situations where figures differ by at least 0.1)9 2512(it helps identify)2 771 2 720 5713 t
12 I f
(%)4003 5713 w
12 R f
(, a gap that may be)5 937 1 4103 5713 t
( cities, the independent run strategy seems as good if not)10 2822( that for 100)3 618(meaningful. Note)1 880 3 720 5863 t
( at least for the numbers of iterations)7 1824(better than ILK as far as tour quality is concerned,)9 2496 2 720 6013 t
(considered. As)1 749 1 720 6163 t
12 I f
(N)1505 6163 w
12 R f
(increases, however, ILK rapidly pulls away, even for)7 2587 1 1621 6163 t
12 I f
(m)4244 6163 w
12 S f
(=)4380 6163 w
12 I f
(N /)1 124 1 4496 6163 t
12 R f
(10 itera-)1 410 1 4630 6163 t
( the)1 188( independent run results gradually approach those for a single run, while)11 3609(tions. The)1 523 3 720 6313 t
( for single-run LK itself, stay roughly constant as)8 2448(ILK percentage excesses, like those)4 1752 2 720 6463 t
12 I f
(N)4960 6463 w
12 R f
( to the relative)3 716( As)1 201(increases from 1000 to 100,000, or at least grow exceedingly slowly.)10 3403 3 720 6613 t
( first)1 230(improvements brought by more iterations, the)5 2226 2 720 6763 t
12 I f
(m)3211 6763 w
12 S f
(=)3347 6763 w
12 I f
(N /)1 124 1 3463 6763 t
12 R f
(10 iterations yield a 0.6-0.7)4 1343 1 3597 6763 t
12 I f
(%)4940 6763 w
12 R f
( excess above the expected)4 1352( essentially halves the)3 1101( This)1 290(improvement on single-run LK.)3 1577 4 720 6913 t
( 0.80)1 247(optimal tour length, which itself is between 0.60 and)8 2580 2 720 7063 t
12 I f
(%)3547 7063 w
12 R f
(above the Held-Karp bound)3 1356 1 3684 7063 t
( Increasing)1 572(based on the estimates of Johnson, McGeoch, and Rothberg [1996].)9 3363 2 720 7213 t
12 I f
(m)4697 7213 w
12 R f
(by a)1 215 1 4825 7213 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 54 536 764
%%EndPage: 78 78
%%Page: 79 79
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
79 pagesetup
12 R f
(- 79 -)2 260 1 2750 500 t
(factor of 10)2 580 1 720 870 t
9 I f
(.)1307 822 w
9 R f
(5)1337 822 w
12 R f
(yields another 0.2)2 878 1 1432 870 t
12 I f
(%)2310 870 w
12 R f
( increasing it by a second factor of)7 1735(improvement and)1 855 2 2450 870 t
(10)720 1020 w
9 I f
(.)847 972 w
9 R f
(5)877 972 w
12 R f
(gains us one more 0.1)4 1119 1 979 1020 t
12 I f
(%)2098 1020 w
12 R f
( has again cut the distance)5 1338( composite factor of 10)4 1183(. This)1 321 3 2198 1020 t
(above optimal by a factor of two or more, and it leaves us no more than 0.3)16 3713 1 720 1170 t
12 I f
(%)4433 1170 w
12 R f
(above the)1 470 1 4570 1170 t
(predicted optimal.)1 876 1 720 1320 t
( instance)1 427( Since)1 330( times reported in Table 15 also tell an interesting story.)10 2721(The running)1 592 4 970 1506 t
(sizes go up by factors of 10)6 1441 1 720 1656 t
9 I f
(.)2168 1608 w
9 R f
(5)2198 1608 w
12 R f
(in each successive column, a quadratic time algorithm)7 2738 1 2302 1656 t
( Confirm-)1 510( 10 from column to column.)5 1360(should see its running times increase by a factor of)9 2450 3 720 1806 t
( Section 4.2, the results in the table clearly indicate that)10 2697(ing what was already observed in)5 1623 2 720 1956 t
( hand, even though preprocessing)4 1626( the other)2 460( On)1 209(single-run Lin-Kernighan is subquadratic.)3 2025 4 720 2106 t
( to perform)2 571(time can be amortized when performing multiple runs, the overall time)10 3571 2 720 2256 t
12 I f
(cN)4907 2256 w
12 R f
(independent runs of LK for fixed)5 1770 1 720 2406 t
12 I f
(c)2556 2406 w
12 R f
( Surprisingly,)1 723(grows worse than quadratically.)3 1642 2 2675 2406 t
(ILK\()720 2556 w
12 I f
(cN)959 2556 w
12 R f
( value of)2 422(\) is itself subquadratic for each fixed)6 1775 2 1092 2556 t
12 I f
(c)3320 2556 w
12 R f
( means that the average run-)5 1362(. This)1 305 2 3373 2556 t
( per iteration in an ILK run grows sublinearly, at least within the range of)14 3724(ning time)1 472 2 720 2706 t
12 I f
(N)4960 2706 w
12 R f
( point of fact, there)4 970( In)1 173( the table.)2 497(covered by)1 543 4 720 2856 t
12 I f
(is)2946 2856 w
12 R f
(a linear-time component to an iteration,)5 1970 1 3070 2856 t
( running time)2 653( The)1 248( performing each double-bridge mutation.)4 2021(since all cities are touched in)5 1398 4 720 3006 t
(for this operation has a very low constant of proportionality, however, and for)12 4320 1 720 3156 t
12 I f
(N)720 3306 w
12 S f
(\243)840 3306 w
12 R f
( remains that for performing Lin-)5 1820( the dominant time in an iteration)6 1864(100 , 000)2 410 3 946 3306 t
( grow sublinearly because no matter what)6 2031( can)1 202(Kernighan. This)1 816 3 720 3456 t
12 I f
(N)3804 3456 w
12 R f
(is, we only start with 8)5 1121 1 3919 3456 t
(cities on our active queue, and often we can stop without looking far beyond them.)14 3977 1 720 3606 t
10 S f
(_ __________________________________________________________________________________)1 4123 1 818 3761 t
10 R f
(Iterations: 1)1 721 1 883 3911 t
10 I f
(N /)1 103 1 1905 3911 t
10 R f
(10)2016 3911 w
10 I f
(N /)1 103 1 2302 3911 t
10 R f
(10)2413 3911 w
7 I f
(.)2518 3871 w
7 R f
(5)2541 3871 w
10 I f
(N)2841 3911 w
10 R f
(OPT 1)1 461 1 3212 3911 t
10 I f
(N /)1 103 1 3848 3911 t
10 R f
(10)3959 3911 w
10 I f
(N /)1 103 1 4209 3911 t
10 R f
(10)4320 3911 w
7 I f
(.)4425 3871 w
7 R f
(5)4448 3871 w
10 I f
(N)4732 3911 w
10 S f
(_ __________________________________________________________________________________)1 4123 1 818 3961 t
10 R f
( Time in Seconds)3 697( Running)1 1144( Percent Excess)2 626(Instance Average)1 1386 4 912 4111 t
10 S f
(_ __________________________________________________________________________________)1 4123 1 818 4161 t
10 C f
(lin318)928 4311 w
10 R f
( 13)1 400( 5)1 432( 2)1 361( 1)1 250(1.61 .55 .41 .32 .28)4 1903 5 1545 4311 t
10 C f
(gr431)988 4461 w
10 R f
( 57)1 400( 19)1 432( 9)1 361( 3)1 250( .89 .69)2 864(2.72 1.41 1.02)2 1039 6 1545 4461 t
10 C f
(pcb442)928 4611 w
10 R f
( 25)1 400( 8)1 432( 3)1 361( 1)1 250(1.36 .94 .72 .60 .55)4 1903 5 1545 4611 t
10 C f
(att532)928 4761 w
10 R f
( 29)1 400( 12)1 432( 5)1 361( 2)1 250( .97)1 432(1.91 1.20 1.08 1.03)3 1471 6 1545 4761 t
10 C f
(gr666)988 4911 w
10 R f
( 95)1 400( 38)1 432( 16)1 361( 3)1 250( .84 .74 .64)3 1296(2.38 1.20)1 607 6 1545 4911 t
10 C f
(dsj1000)868 5061 w
10 R f
( 515)1 400( 164)1 432( 57)1 361( 6)1 250( .87 .83 .61)3 1296(3.08 1.31)1 607 6 1545 5061 t
10 C f
(pr1002)928 5211 w
10 R f
( 74)1 400( 29)1 432( 10)1 361( 2)1 250( .89)1 432(2.61 1.62 1.27 1.13)3 1471 6 1545 5211 t
10 C f
(pr2392)928 5361 w
10 R f
( 148)1 400( 54)1 432( 20)1 361( 2)1 250(2.85 1.68 1.62 1.42 1.22)4 1903 5 1545 5361 t
10 C f
(pcb3038)868 5511 w
10 R f
( 240)1 400( 86)1 432( 30)1 361( 2)1 250( .81)1 432(2.04 1.31 1.13 1.00)3 1471 6 1545 5511 t
10 C f
(fl3795)928 5661 w
10 R f
(8.41 6.72 4.78 4.79)3 1471 1 1545 5661 t
10 S f
(<)3193 5661 w
10 R f
( 7930)1 400( 3440)1 432( 1010)1 361(1.04 51)1 425 4 3273 5661 t
10 C f
(fnl4461)868 5811 w
10 R f
( 510)1 400( 164)1 432( 54)1 361( 3)1 250( .86 .76 .55)3 1296(1.66 1.06)1 607 6 1545 5811 t
10 C f
(pla7397)868 5961 w
10 R f
( 12900)1 400( 3060)1 432( 960)1 361( 19)1 250(2.19 .96 .73 .69 .58)4 1903 5 1545 5961 t
10 S f
( \347)1 -4123(_ __________________________________________________________________________________)1 4123 2 818 6011 t
(\347)818 5961 w
(\347)818 5861 w
(\347)818 5761 w
(\347)818 5661 w
(\347)818 5561 w
(\347)818 5461 w
(\347)818 5361 w
(\347)818 5261 w
(\347)818 5161 w
(\347)818 5061 w
(\347)818 4961 w
(\347)818 4861 w
(\347)818 4761 w
(\347)818 4661 w
(\347)818 4561 w
(\347)818 4461 w
(\347)818 4361 w
(\347)818 4261 w
(\347)818 4161 w
(\347)818 4061 w
(\347)818 3961 w
(\347)818 3861 w
(\347)1363 6011 w
(\347)1363 5961 w
(\347)1363 5861 w
(\347)1363 5761 w
(\347)1363 5661 w
(\347)1363 5561 w
(\347)1363 5461 w
(\347)1363 5361 w
(\347)1363 5261 w
(\347)1363 5161 w
(\347)1363 5061 w
(\347)1363 4961 w
(\347)1363 4861 w
(\347)1363 4761 w
(\347)1363 4661 w
(\347)1363 4561 w
(\347)1363 4461 w
(\347)1363 4361 w
(\347)1363 4261 w
(\347)1363 4161 w
(\347)1363 4061 w
(\347)1363 3961 w
(\347)1363 3861 w
(\347)3523 6011 w
(\347)3523 5961 w
(\347)3523 5861 w
(\347)3523 5761 w
(\347)3523 5661 w
(\347)3523 5561 w
(\347)3523 5461 w
(\347)3523 5361 w
(\347)3523 5261 w
(\347)3523 5161 w
(\347)3523 5061 w
(\347)3523 4961 w
(\347)3523 4861 w
(\347)3523 4761 w
(\347)3523 4661 w
(\347)3523 4561 w
(\347)3523 4461 w
(\347)3523 4361 w
(\347)3523 4261 w
(\347)3523 4161 w
(\347)3523 4061 w
(\347)3523 3961 w
(\347)3523 3861 w
(\347)4941 6011 w
(\347)4941 5961 w
(\347)4941 5861 w
(\347)4941 5761 w
(\347)4941 5661 w
(\347)4941 5561 w
(\347)4941 5461 w
(\347)4941 5361 w
(\347)4941 5261 w
(\347)4941 5161 w
(\347)4941 5061 w
(\347)4941 4961 w
(\347)4941 4861 w
(\347)4941 4761 w
(\347)4941 4661 w
(\347)4941 4561 w
(\347)4941 4461 w
(\347)4941 4361 w
(\347)4941 4261 w
(\347)4941 4161 w
(\347)4941 4061 w
(\347)4941 3961 w
(\347)4941 3861 w
11 B f
(Table 16.)1 436 1 1364 6251 t
11 R f
(Results for Iterated Lin-Kernighan on)4 1658 1 1856 6251 t
11 C f
(TSPLIB)3542 6251 w
11 R f
(instances.)3966 6251 w
12 R f
(We present analogous data for all the solved)7 2153 1 970 6569 t
12 C f
(TSPLIB)3156 6569 w
12 R f
(instances mentioned so far in)4 1419 1 3621 6569 t
( concentrating on the results for single-run LK and the various)10 3107(this chapter in Table 16,)4 1213 2 720 6719 t
(ILK\()720 6869 w
12 I f
(m)959 6869 w
12 R f
(\). Instances)1 587 1 1045 6869 t
12 C f
(lin318)1672 6869 w
12 R f
(,)2104 6869 w
12 C f
(gr431)2174 6869 w
12 R f
(,)2534 6869 w
12 C f
(att532)2604 6869 w
12 R f
(, and)1 244 1 3036 6869 t
12 C f
(gr666)3321 6869 w
12 R f
(all have non-standard met-)3 1318 1 3722 6869 t
(rics and so were read into the computer as distance matrices, yielding larger times for)14 4320 1 720 7019 t
( but smaller times for subsequent distance computations.)7 3036(neighbor-list construction)1 1284 2 720 7169 t
( percentage excess above Held-Karp)4 1770(Where the optimal solution is known, we present its)8 2550 2 720 7319 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 43 536 764
%%EndPage: 79 79
%%Page: 80 80
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
80 pagesetup
12 R f
(- 80 -)2 260 1 2750 500 t
( or more runs)3 650( are over 10)3 572( Averages)1 513(as well, so that closeness to optimality can be judged.)9 2585 4 720 870 t
(for each instance.)2 843 1 720 1020 t
( for random Euclidean instances)4 1572(Note first that running times typically exceed those)7 2498 2 970 1206 t
( quality is also slightly worse,)5 1564( Tour)1 318(of comparable sizes by factors of two or more.)8 2438 3 720 1356 t
(although the general trend of results is the same as it was for random Euclidean instances.)15 4320 1 720 1506 t
(ILK\()720 1656 w
12 I f
(N /)1 124 1 959 1656 t
12 R f
( a factor of two or more.)6 1212(10\) again typically reduces LK's distance to optimal by)8 2735 2 1093 1656 t
(ILK\()720 1806 w
12 I f
(N)959 1806 w
12 R f
(\) often comes within 0.2)4 1232 1 1039 1806 t
12 I f
(%)2271 1806 w
12 R f
( than 0.4)2 449(of optimal and usually is no worse)6 1747 2 2416 1806 t
12 I f
(%)4612 1806 w
12 R f
(away.)4758 1806 w
(The one exception is instance)4 1437 1 720 1956 t
12 C f
(fl3795)2191 1956 w
12 R f
(, which we include \(despite the fact that it has not)10 2417 1 2623 1956 t
( optimally\) because it is the)5 1378(yet been solved)2 765 2 720 2106 t
12 C f
(TSPLIB)2903 2106 w
12 R f
(instance that gives our algorithms)4 1665 1 3375 2106 t
( that LK is more than 8)6 1175( Note)1 303(the most trouble.)2 833 3 720 2256 t
12 I f
(%)3031 2256 w
12 R f
( for)1 179(off the Held-Karp bound)3 1219 2 3171 2256 t
12 C f
(fl3795)4608 2256 w
12 R f
(and ILK\()1 457 1 720 2406 t
12 I f
(N)1177 2406 w
12 R f
( 4.8)1 196(\) is still roughly)3 813 2 1257 2406 t
12 I f
(%)2266 2406 w
12 R f
(away. Instance)1 758 1 2412 2406 t
12 C f
(fl3795)3216 2406 w
12 R f
(is depicted Figure 7 and is)5 1346 1 3694 2406 t
(even more pathologically clustered than was instance)6 2623 1 720 2556 t
12 C f
(dsj1000)3425 2556 w
12 R f
(\(shown in Figure 5 in)4 1071 1 3969 2556 t
( places the cities of)4 942( many)1 301( In)1 164(the last section\).)2 794 4 720 2706 t
12 C f
(fl3795)2956 2706 w
12 R f
(are so close together as to appear)6 1617 1 3423 2706 t
( reach to our)3 654( instance is not totally out of)6 1480( This)1 292(as line segments and solid rectangles.)5 1894 4 720 2856 t
( 20-nearest-neighbor neighbor lists of our)5 2005( we replace the standard)4 1159( If)1 140(techniques, however.)1 1016 4 720 3006 t
( 40-quadrant-neighbor scheme described in Sec-)5 2369(Lin-Kernighan implementation with the)3 1951 2 720 3156 t
(tion 3.3, LK's average excess drops to 3.9)7 2083 1 720 3306 t
12 I f
(%)2803 3306 w
12 R f
( ILK\()1 308(, and)1 242 2 2903 3306 t
12 I f
(N /)1 124 1 3453 3306 t
12 R f
(10\)'s average excess drops to)4 1453 1 3587 3306 t
(1.23)720 3456 w
12 I f
(%)930 3456 w
12 R f
( The)1 258( 10 respectively.)2 815(, at the cost of increasing running time by factors of 3 and)12 2937 3 1030 3456 t
(upper bound given in the table of 1.04)7 1975 1 720 3606 t
12 I f
(%)2695 3606 w
12 R f
( was)1 237(on the optimal excess for this instance)6 1958 2 2845 3606 t
(attained by the best of ten ILK\()6 1508 1 720 3756 t
12 I f
(N /)1 124 1 2228 3756 t
12 R f
(3\) runs.)1 367 1 2362 3756 t
cleartomark
saveobj restore
end
%%BeginDocument: Fig7.ps
%ps_include: begin
save
/ed {exch def} def
{} /showpage ed
{} /copypage ed
{} /erasepage ed
{} /letter ed
currentdict /findfont known systemdict /findfont known and {
	/findfont systemdict /findfont get def
} if
36 dict dup /PS-include-dict-dw ed begin
/context ed
count array astore /o-stack ed
%ps_include: variables begin
/llx 116 def
/lly 355 def
/urx 676 def
/ury 708 def
/w 0 def
/o 0 def
/s 0 def
/cx 3420 def
/cy -5136 def
/sx 4320 def
/sy 2160 def
/ax 0.5 def
/ay 0.5 def
/rot 0 def
%ps_include: variables end
{llx lly urx ury} /bbox ed
{newpath 2 index exch 2 index exch dup 6 index exch
 moveto 3 {lineto} repeat closepath} /boxpath ed
{dup mul exch dup mul add sqrt} /len ed
{2 copy gt {exch} if pop} /min ed
{2 copy lt {exch} if pop} /max ed
{transform round exch round exch A itransform} /nice ed
{6 array} /n ed
n defaultmatrix n currentmatrix n invertmatrix n concatmatrix /A ed
urx llx sub 0 A dtransform len /Sx ed
0 ury lly sub A dtransform len /Sy ed
llx urx add 2 div lly ury add 2 div A transform /Cy ed /Cx ed
rot dup sin abs /S ed cos abs /C ed
Sx S mul Sy C mul add /H ed
Sx C mul Sy S mul add /W ed
sy H div /Scaley ed
sx W div /Scalex ed
s 0 eq {Scalex Scaley min dup /Scalex ed /Scaley ed} if
sx Scalex W mul sub 0 max ax 0.5 sub mul cx add /cx ed
sy Scaley H mul sub 0 max ay 0.5 sub mul cy add /cy ed
urx llx sub 0 A dtransform exch atan rot exch sub /rot ed
n currentmatrix initgraphics setmatrix
cx cy translate
Scalex Scaley scale
rot rotate
Cx neg Cy neg translate
A concat
bbox boxpath clip newpath
w 0 ne {gsave bbox boxpath 1 setgray fill grestore} if
end
gsave
%ps_include: inclusion begin
/DpostDict 200 dict def
DpostDict begin

/#copies 1 store
/Prologue (dpost.ps) def
/aspectratio 1 def
/formsperpage 1 def
/landscape false def
/linewidth .3 def
/magnification 1 def
/margin 0 def
/orientation 0 def
/resolution 720 def
/rotation 1 def
/xoffset 0 def
/yoffset 0 def

/roundpage true def
/useclippath true def
/pagebbox [0 0 612 792] def

/R  /Times-Roman def
/I  /Times-Italic def
/B  /Times-Bold def
/BI /Times-BoldItalic def
/H  /Helvetica def
/HI /Helvetica-Oblique def
/HB /Helvetica-Bold def
/HX /Helvetica-BoldOblique def
/CW /Courier def
/CO /Courier def
/CI /Courier-Oblique def
/CB /Courier-Bold def
/CX /Courier-BoldOblique def
/PA /Palatino-Roman def
/PI /Palatino-Italic def
/PB /Palatino-Bold def
/PX /Palatino-BoldItalic def
/Hr /Helvetica-Narrow def
/Hi /Helvetica-Narrow-Oblique def
/Hb /Helvetica-Narrow-Bold def
/Hx /Helvetica-Narrow-BoldOblique def
/KR /Bookman-Light def
/KI /Bookman-LightItalic def
/KB /Bookman-Demi def
/KX /Bookman-DemiItalic def
/AR /AvantGarde-Book def
/AI /AvantGarde-BookOblique def
/AB /AvantGarde-Demi def
/AX /AvantGarde-DemiOblique def
/NR /NewCenturySchlbk-Roman def
/NI /NewCenturySchlbk-Italic def
/NB /NewCenturySchlbk-Bold def
/NX /NewCenturySchlbk-BoldItalic def
/ZD /ZapfDingbats def
/ZI /ZapfChancery-MediumItalic def
/S  /S def
/S1 /S1 def
/GR /Symbol def

/inch {72 mul} bind def
/min {2 copy gt {exch} if pop} bind def

/setup {
	counttomark 2 idiv {def} repeat pop

	landscape {/orientation 90 orientation add def} if
	/scaling 72 resolution div def
	linewidth setlinewidth
	1 setlinecap

	pagedimensions
	xcenter ycenter translate
	orientation rotation mul rotate
	width 2 div neg height 2 div translate
	xoffset inch yoffset inch neg translate
	margin 2 div dup neg translate
	magnification dup aspectratio mul scale
	scaling scaling scale

	addmetrics
	0 0 moveto
} def

/pagedimensions {
	useclippath userdict /gotpagebbox known not and {
		/pagebbox [clippath pathbbox newpath] def
		roundpage currentdict /roundpagebbox known and {roundpagebbox} if
	} if
	pagebbox aload pop
	4 -1 roll exch 4 1 roll 4 copy
	landscape {4 2 roll} if
	sub /width exch def
	sub /height exch def
	add 2 div /xcenter exch def
	add 2 div /ycenter exch def
	userdict /gotpagebbox true put
} def

/landscapepage {
	landscape not {
		0 height scaling div neg translate	% not quite
		90 rotate
	} if
} bind def

/portraitpage {
	landscape {
		width scaling div 0 translate	% not quite
		-90 rotate
	} if
} bind def

/addmetrics {
	/Symbol /S null Sdefs cf
	/Times-Roman /S1 StandardEncoding dup length array copy S1defs cf
} def

/pagesetup {
	/page exch def
	currentdict /pagedict known currentdict page known and {
		page load pagedict exch get cvx exec
	} if
} def

/decodingdefs [
	{counttomark 2 idiv {y moveto show} repeat}
	{neg /y exch def counttomark 2 idiv {y moveto show} repeat}
	{neg moveto {2 index stringwidth pop sub exch div 0 32 4 -1 roll widthshow} repeat}
	{neg moveto {spacewidth sub 0.0 32 4 -1 roll widthshow} repeat}
	{counttomark 2 idiv {y moveto show} repeat}
	{neg setfunnytext}
] def

/setdecoding {/t decodingdefs 3 -1 roll get bind def} bind def

/w {neg moveto show} bind def
/m {neg dup /y exch def moveto} bind def
/done {/lastpage where {pop lastpage} if} def

/f {
	dup /font exch def findfont exch
	dup /ptsize exch def scaling div dup /size exch def scalefont setfont
	linewidth ptsize mul scaling 10 mul div setlinewidth
	/spacewidth ( ) stringwidth pop def
} bind def

/changefont {
	/fontheight exch def
	/fontslant exch def
	currentfont [
		1 0
		fontheight ptsize div fontslant sin mul fontslant cos div
		fontheight ptsize div
		0 0
	] makefont setfont
} bind def

/sf {f} bind def

/cf {
	dup length 2 idiv
	/entries exch def
	/chtab exch def
	/newencoding exch def
	/newfont exch def

	findfont dup length 1 add dict
	/newdict exch def
	{1 index /FID ne {newdict 3 1 roll put}{pop pop} ifelse} forall

	newencoding type /arraytype eq {newdict /Encoding newencoding put} if

	newdict /Metrics entries dict put
	newdict /Metrics get
	begin
		chtab aload pop
		1 1 entries {pop def} for
		newfont newdict definefont pop
	end
} bind def


/Sdefs [
	/bracketlefttp		[201 500]
	/bracketleftbt		[201 500]
	/bracketrighttp		[-81 380]
	/bracketrightbt		[-83 380]
	/braceleftbt		[203 490]
	/bracketrightex		[220 -125 500 0]
	/radical		[0 0 550 0]
	/radicalex		[-50 0 500 0]
	/parenleftex		[-20 -170 0 0]
	/integral		[100 -50 500 0]
	/infinity		[10 -75 730 0]
] def

/S1defs [
	/underscore		[0 80 500 0]
	/endash			[7 90 650 0]
] def
end
DpostDict begin
mark
/rotation 1 def
/gotpagebbox true def
/linewidth 0.5 def
/xoffset 0 def
/yoffset 0 def
/#copies 1 store
/magnification 1 def
/formsperpage 1 def
/landscape false def
/resolution 720 def
setup
2 setdecoding

/inpath false def
/savematrix matrix def

/Dl {
	inpath
		{pop pop neg lineto}
		{newpath neg moveto neg lineto stroke}
	ifelse
} bind def

/De {
	/y1 exch 2 div def
	/x1 exch 2 div def
	/savematrix savematrix currentmatrix def
	neg exch x1 add exch translate
	x1 y1 scale
	0 0 1 0 360
	inpath
		{1 0 moveto arc savematrix setmatrix}
		{newpath arc savematrix setmatrix stroke}
	ifelse
} bind def

/Da {
	/dy2 exch def
	/dx2 exch def
	/dy1 exch def
	/dx1 exch def
	dy1 add neg exch dx1 add exch
	dx1 dx1 mul dy1 dy1 mul add sqrt
	dy1 dx1 neg atan
	dy2 neg dx2 atan
	inpath
		{arc}
		{newpath arc stroke}
	ifelse
} bind def

/DA {
	/dy2 exch def
	/dx2 exch def
	/dy1 exch def
	/dx1 exch def
	dy1 add neg exch dx1 add exch
	dx1 dx1 mul dy1 dy1 mul add sqrt
	dy1 dx1 neg atan
	dy2 neg dx2 atan
	inpath
		{arcn}
		{newpath arcn stroke}
	ifelse
} bind def

/Ds {
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	/y0 exch def
	/x0 exch def
	x0 5 x1 mul add 6 div
	y0 5 y1 mul add -6 div
	x2 5 x1 mul add 6 div
	y2 5 y1 mul add -6 div
	x1 x2 add 2 div
	y1 y2 add -2 div
	inpath
		{curveto}
		{newpath x0 x1 add 2 div y0 y1 add -2 div moveto curveto stroke}
	ifelse
} bind def
end
DpostDict begin
/saveobj save def
mark
1 pagesetup
4 S f
( \267)1 -1841(\267 \267)1 -1153 2 4800 1130 t
(\267)3353 1149 w
(\267)3540 1140 w
(\267 \267)1 -297 1 3629 1168 t
(\267 \267)1 254 1 3314 1187 t
(\267)3461 1196 w
( \267)1 275(\267 \267)1 77 2 3255 1205 t
( \267)1 -138( \267)1 -118(\267 \267)1 -22 3 3511 1224 t
( \267)1 118(\267 \267)1 156 2 3215 1243 t
( \267)1 -295(\267 \267)1 -100 2 3589 1262 t
(\267 \267)1 431 1 3176 1281 t
(\267 \267)1 -1636 1 4072 1478 t
(\267 \267)1 1672 1 2526 1488 t
(\267 \267)1 -1636 1 4377 1525 t
(\267)1906 1892 w
( \267)1 866(\267 \267)1 806 2 2585 1845 t
(\267)4741 1910 w
(\267)3579 2005 w
(\267 \267)1 215 1 3156 2277 t
(\267)3353 2239 w
(\267)4258 2051 w
(\267 \267)1 117 1 4278 2014 t
(\267 \267)1 -218 1 3589 2314 t
(\267)1847 2437 w
(\267)4219 2427 w
(\267)4199 2446 w
(\267)3343 2662 w
(\267)3324 2681 w
( \267)1 59( \267)1 157( \267)1 40( \267)1 39(\267 \267)1 116 5 3196 2991 t
(\267)3244 3000 w
( \267)1 178(\267 \267)1 57 2 3294 3010 t
(\267 \267)1 -257 1 3540 3019 t
( \267)1 178(\267 \267)1 96 2 3255 3028 t
( \267)1 -138(\267 \267)1 -61 2 3501 3038 t
( \267)1 79( \267)1 157(\267 \267)1 116 3 3196 3047 t
(\267)3373 3067 w
(\267)3333 3404 w
(\267)3570 3311 w
(\267 \267)1 -2994 1 4800 3893 t
( \267\267)1 77( \267)1 22(\267\267 \267\267)1 75 3 3309 1144 t
(\267\267 \267)1 58 1 3584 1125 t
(\267 \267)1 -2 1 3476 1154 t
( \267)1 22( \267\267)1 39( \267\267)1 254(\267\267 \267)1 57 4 3260 1173 t
( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267)1 -99( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 7 3407 1182 t
( \267\267)1 39( \267\267)1 234( \267)1 22(\267\267 \267\267)1 75 4 3181 1192 t
( \267)1 -19( \267 \267)2 -40( \267)1 -137( \267 \267)2 -40( \267)1 -19(\267 \267 \267)2 -22 6 3565 1201 t
( \267\267)1 39( \267\267)1 138( \267\267)1 39(\267 \267\267)1 154 4 3299 1210 t
( \267 \267)2 -40(\267 \267)1 -1 2 3348 1220 t
( \267\267)1 40( \267\267)1 78( \267\267)1 40( \267\267)1 214( \267)1 22( \267\267)1 39(\267\267 \267\267)1 76 7 3082 1229 t
( \267)1 -20( \267)1 -19(\267 \267)1 -2 3 3545 1238 t
( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -157( \267)1 -20( \267)1 -19(\267 \267 \267)2 -22 7 3437 1248 t
(\267\267 \267\267)1 75 1 3427 1257 t
( \267 \267)2 -40( \267)1 -19( \267)1 -276( \267)1 -19( \267)1 -138( \267)1 -20( \267)1 -19(\267 \267)1 -2 8 3653 1267 t
(\267\267 \267\267 \267\267)2 114 1 3506 1276 t
( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -157( \267 \267)2 -40(\267 \267)1 -1 10 3574 1285 t
( \267\267)1 40(\267\267 \267\267 \267\267)2 114 2 3329 1295 t
(\267 \267)1 -1635 1 4057 1483 t
( \267\267 \267\267)2 78( \267\267)1 1575( \267\267)1 40(\267\267 \267\267)1 75 4 2413 1492 t
( \267)1 -20( \267)1 -1633(\267 \267)1 -2 3 4411 1521 t
( \267\267 \267)2 60( \267\267)1 1593( \267)1 21(\267\267 \267\267)1 76 4 2600 1840 t
( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267 \267)4 -80( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 48 3358 1849 t
( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78(\267\267 \267\267)1 76 18 1911 1897 t
( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 46 4726 1915 t
( \267\267 \267)2 60( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267\267\267)2 98( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267 \267\267)2 114 12 3378 1962 t
( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -472( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 13 4273 2009 t
( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267\267\267)2 98( \267\267 \267\267)2 78(\267\267 \267\267)1 76 11 3574 2018 t
( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 9 4283 2037 t
(\267\267 \267)1 58 1 4273 2046 t
( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267 \267)2 -22 31 4313 2234 t
( \267)1 22( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78(\267\267 \267\267)1 76 19 3171 2272 t
( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267 \267)2 -22 33 4303 2282 t
( \267\267 \267)2 60( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267)1 75 17 3368 2310 t
( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 28 4381 2319 t
( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40(\267 \267\267 \267\267 \267\267)3 135 18 3190 2422 t
( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267 \267)4 -80( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 48 3338 2432 t
( \267)1 22( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78(\267\267 \267\267)1 76 19 3171 2442 t
( \267)1 -20( \267)1 -19(\267 \267 \267)2 -22 3 3329 2667 t
(\267\267 \267)1 58 1 3338 2676 t
( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -60( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -59( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -79( \267)1 -20( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 16 3643 2987 t
( \267)1 21( \267\267)1 118( \267\267)1 39( \267\267)1 40( \267\267)1 78( \267\267)1 40( \267\267 \267\267)2 78(\267\267 \267\267)1 76 8 3102 2996 t
( \267)1 -19( \267)1 -21( \267)1 -19( \267)1 -118( \267 \267)2 -40( \267)1 -19( \267)1 -118( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 10 3604 3005 t
( \267\267 \267\267)2 78( \267\267)1 99(\267\267 \267\267)1 75 3 3299 3015 t
( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267)1 -20( \267)1 -98( \267 \267)2 -40( \267)1 -157( \267)1 -20(\267 \267)1 -1 31 3584 3024 t
( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78(\267 \267\267)1 233 4 3240 3033 t
( \267 \267)2 -40( \267)1 -19( \267)1 -138(\267 \267)1 -2 4 3506 3043 t
( \267)1 98( \267)1 22( \267\267)1 59( \267\267)1 39( \267\267)1 138(\267\267 \267\267)1 75 6 3122 3052 t
( \267)1 -21( \267)1 -78( \267)1 -20( \267)1 -177(\267 \267)1 -2 5 3506 3062 t
( \267\267)1 136(\267\267 \267)1 57 2 3181 3071 t
( \267)1 -20(\267 \267)1 -120 2 3565 3080 t
( \267 \267)2 -38( \267)1 -21(\267 \267)1 -1 3 3230 3099 t
(\267\267 \267)1 57 1 3594 3108 t
( \267)1 -19(\267 \267 \267)2 -22 2 3624 3118 t
( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267)1 75 14 2610 3391 t
( \267\267 \267)2 60( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78(\267\267 \267\267)1 76 22 3584 3306 t
( \267)1 -19(\267 \267 \267)2 -22 2 3319 3409 t
( \267\267)1 58(\267\267 \267\267 \267)2 96 2 3319 1144 t
(\267)3545 1135 w
(\267\267)3594 1125 w
(\267)3466 1154 w
( \267\267)1 39( \267\267)1 40( \267\267)1 236(\267\267 \267\267)1 75 4 3250 1173 t
( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -99( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 7 3397 1182 t
( \267)1 21( \267\267)1 40( \267\267)1 216(\267 \267\267 \267\267)2 96 4 3190 1192 t
( \267)1 -19( \267 \267)2 -40( \267)1 -157( \267)1 -20( \267)1 -19(\267 \267 \267)2 -22 6 3555 1201 t
( \267)1 21( \267\267)1 156( \267)1 21(\267\267 \267\267)1 174 4 3289 1210 t
( \267 \267)2 -40(\267 \267)1 -1 2 3338 1220 t
( \267)1 22( \267\267)1 77( \267\267 \267)2 60( \267\267)1 195(\267\267\267 \267\267\267 \267)2 136 5 3093 1229 t
( \267)1 -20( \267)1 -19(\267 \267)1 -2 3 3535 1238 t
( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -157( \267)1 -20( \267)1 -19(\267 \267)1 -2 8 3427 1248 t
(\267\267 \267\267)1 75 1 3437 1257 t
( \267)1 -19( \267)1 -21( \267)1 -19( \267)1 -256( \267)1 -20( \267)1 -19( \267)1 -138( \267)1 -20(\267 \267)1 -1 9 3643 1267 t
( \267)1 21(\267\267 \267\267)1 76 2 3515 1276 t
( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -138( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 11 3584 1285 t
( \267)1 21( \267\267)1 40(\267\267 \267\267 \267\267)2 114 3 3319 1295 t
(\267 \267)1 -1636 1 4067 1483 t
( \267\267 \267\267)2 78( \267\267)1 1573( \267)1 23(\267\267 \267\267\267)1 94 4 2423 1492 t
( \267)1 -20( \267)1 -1633(\267 \267)1 -3 3 4402 1521 t
( \267\267 \267)2 60( \267\267)1 1593( \267)1 21(\267\267 \267\267)1 76 4 2590 1840 t
( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 51 3368 1849 t
( \267)1 -21(\267 \267)1 -1 2 1911 1849 t
( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267 \267\267)2 80( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267)1 75 25 1921 1897 t
( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 50 4736 1915 t
( \267)1 22( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267 \267\267)2 114 16 3388 1962 t
( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -473( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 13 4263 2009 t
( \267)1 22( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78(\267\267 \267\267)1 76 15 3584 2018 t
( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 8 4273 2037 t
(\267\267 \267\267)1 76 1 4263 2046 t
( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 34 4322 2234 t
( \267)1 22( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78(\267\267 \267\267)1 76 15 3161 2272 t
( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 31 4293 2282 t
( \267\267 \267)2 60( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267)1 75 13 3358 2310 t
( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 26 4391 2319 t
( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267\267\267)2 98( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267)1 75 15 3181 2422 t
( \267)1 -19( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267 \267)2 -38( \267)1 -21( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 51 3348 2432 t
( \267)1 -19(\267 \267)1 -3 2 1892 2432 t
( \267)1 22( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78(\267\267 \267\267)1 76 15 3161 2442 t
( \267)1 -19( \267 \267)2 -40(\267 \267)1 -1 3 3338 2667 t
(\267\267 \267)1 57 1 3329 2676 t
( \267 \267 \267)3 -60( \267)1 -19( \267)1 -20( \267)1 -59( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -59( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -59( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 18 3653 2987 t
( \267\267)1 40( \267\267)1 118( \267\267 \267\267)2 78( \267\267)1 58( \267\267 \267)2 60( \267\267)1 41(\267\267 \267\267\267)1 94 7 3112 2996 t
( \267)1 -20( \267)1 -19( \267)1 -20( \267)1 -98( \267 \267)2 -40( \267)1 -19( \267)1 -118( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 10 3594 3005 t
( \267\267 \267\267)2 78( \267\267)1 99(\267\267 \267\267)1 75 3 3309 3015 t
( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267 \267)4 -80( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -78( \267 \267)2 -40( \267)1 -19( \267)1 -158( \267)1 -19(\267 \267)1 -2 29 3594 3024 t
( \267\267 \267)2 60( \267\267)1 40( \267\267)1 59( \267\267)1 39(\267 \267\267)1 213 5 3250 3033 t
( \267)1 -20( \267)1 -19(\267 \267)1 -140 3 3496 3043 t
( \267)1 100( \267\267)1 39( \267\267)1 58( \267)1 21( \267\267)1 139(\267\267 \267\267\267)1 94 6 3112 3052 t
( \267)1 -78( \267 \267)2 -40( \267)1 -157( \267)1 -20(\267 \267)1 -1 5 3515 3062 t
( \267\267)1 155(\267 \267)1 39 2 3190 3071 t
( \267)1 -138(\267 \267)1 -1 2 3574 3080 t
( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267)1 -2 4 3240 3099 t
(\267\267)3604 3108 w
(\267 \267 \267)2 -22 1 3614 3118 t
( \267)1 22( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267)1 75 10 2620 3391 t
( \267\267 \267)2 60( \267\267)1 40( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267\267 \267\267\267 \267\267)3 159( \267\267 \267\267\267)2 98( \267\267 \267\267)2 78(\267\267 \267\267)1 76 15 3574 3306 t
( \267)1 -19(\267 \267 \267)2 -22 2 3329 3409 t
(\267)3244 1168 w
(\267)3461 1187 w
(\267 \267)1 392 1 3284 1205 t
(\267 \267)1 -178 1 3579 1224 t
( \267)1 157(\267 \267)1 97 2 3422 1262 t
(\267)3501 1281 w
(\267)1867 1845 w
(\267)3658 3028 w
(\267)3658 2991 w
(\267)4780 3311 w
( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1397( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21(\267 \267 \267)2 -20 17 4445 999 t
( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 195( \267)1 1242( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40(\267 \267\267)1 213 12 2408 1008 t
( \267)1 -354( \267)1 -80( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -965( \267)1 -354( \267)1 -78( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21(\267 \267 \267)2 -20 21 4445 1017 t
( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 372( \267)1 1065( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39( \267\267)1 40(\267 \267\267)1 390 12 2231 1027 t
( \267)1 -257( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1142( \267)1 -255( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21(\267 \267 \267)2 -20 19 4445 1036 t
( \267\267\267)1 59( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267)1 1415( \267)1 22( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267 \267\267)2 114 8 2576 3987 t
( \267)1 1634( \267)1 -177( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1417( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19(\267 \267 \267)2 -22 17 4436 3997 t
( \267)1 354( \267)1 1281( \267)1 354( \267)1 -434( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1397( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21(\267 \267 \267)2 -20 21 4445 4006 t
( \267)1 1634( \267)1 -354( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1417( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19(\267 \267 \267)2 -22 17 4436 4016 t
( \267)1 1635( \267)1 -257( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1397( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21(\267 \267 \267)2 -20 19 4445 4025 t
( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -59( \267)1 -20( \267)1 -39( \267)1 -21( \267 \267)2 -38( \267)1 -80( \267)1 -19( \267)1 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -984( \267)1 -20( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19( \267)1 -60( \267)1 -19( \267)1 -40( \267)1 -19( \267 \267)2 -40( \267)1 -78( \267)1 -20( \267)1 -39( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267 \267)2 -22 40 4431 1004 t
( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267)1 39( \267\267)1 118( \267\267)1 116( \267)1 22( \267\267)1 60( \267\267\267)1 117( \267\267)1 1004( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 118( \267\267)1 116( \267)1 22( \267\267)1 57( \267)1 21(\267\267 \267\267)1 135 19 2157 1013 t
( \267)1 -39( \267 \267)2 -40( \267)1 -137( \267)1 -21( \267)1 -19( \267)1 -40( \267 \267)2 -38( \267)1 -80( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1004( \267)1 -39( \267 \267)2 -40( \267)1 -138( \267)1 -19( \267)1 -20( \267)1 -39( \267 \267)2 -40( \267)1 -78( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267 \267)2 -22 32 4431 1022 t
( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267)1 39( \267\267)1 77( \267)1 21( \267\267)1 40( \267\267)1 77( \267\267 \267)2 60( \267\267)1 41( \267\267\267)1 77( \267\267)1 41( \267\267\267)1 1003( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 77( \267)1 21( \267\267)1 40( \267\267)1 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 58( \267)1 21(\267\267 \267\267)1 76 25 2137 1032 t
( \267\267)1 98( \267\267)1 39( \267\267)1 59( \267\267)1 78( \267)1 21( \267\267)1 40( \267\267)1 39( \267\267)1 1259( \267\267)1 100( \267\267\267)1 57( \267)1 41( \267\267)1 77( \267\267 \267)2 60( \267\267)1 40( \267\267)1 -416( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1417( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267 \267)2 -22 31 4431 3992 t
( \267\267)1 116( \267)1 22( \267\267)1 60( \267\267\267)1 117( \267\267)1 1319( \267\267)1 116( \267)1 22( \267\267)1 57( \267)1 21( \267\267)1 99( \267\267)1 -415( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1417( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21(\267 \267 \267)2 -20 27 4440 4001 t
( \267)1 22( \267\267)1 57( \267)1 21( \267\267)1 156( \267)1 22( \267\267)1 57( \267)1 1302( \267\267\267)1 77( \267\267)1 39( \267)1 137( \267)1 22( \267\267)1 57( \267)1 -414( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1417( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267 \267)2 -22 29 4431 4010 t
( \267)1 21( \267\267)1 40( \267\267)1 77( \267\267 \267)2 60( \267\267)1 41( \267\267\267)1 77( \267\267)1 41( \267\267\267)1 1277( \267)1 21( \267\267)1 40( \267\267)1 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 58( \267)1 21( \267\267)1 40( \267\267)1 -435( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1417( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21(\267 \267 \267)2 -20 33 4440 4020 t
( \267 \267)2 -40( \267)1 -19( \267)1 -40( \267)1 -19( \267)1 -59( \267)1 -20( \267)1 -39( \267)1 -40( \267)1 -79( \267)1 -19( \267)1 -59( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -984( \267)1 -19( \267)1 -21( \267)1 -19( \267)1 -40( \267)1 -19( \267)1 -59( \267)1 -20( \267)1 -39( \267)1 -40( \267)1 -78( \267)1 -20( \267)1 -59( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21(\267 \267 \267)2 -20 39 4440 1004 t
( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 236( \267\267)1 77( \267)1 21( \267\267)1 99( \267\267)1 1004( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 118( \267\267)1 119( \267\267)1 77( \267)1 21(\267\267 \267\267)1 135 17 2147 1013 t
( \267)1 -59( \267 \267)2 -40( \267)1 -137( \267)1 -20( \267)1 -59( \267 \267)2 -40( \267)1 -78( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -984( \267)1 -59( \267)1 -19( \267)1 -21( \267)1 -137( \267)1 -20( \267)1 -59( \267)1 -20( \267)1 -19( \267)1 -79( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21(\267 \267 \267)2 -20 32 4440 1022 t
( \267\267)1 39( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 59( \267\267 \267\267)2 78( \267\267)1 59( \267\267)1 58( \267)1 39( \267)1 40( \267\267 \267)2 100( \267\267)1 1004( \267\267 \267\267)2 78( \267\267)1 40( \267\267 \267\267)2 78( \267\267)1 59( \267\267)1 41( \267\267\267)1 57( \267)1 38( \267)1 21( \267 \267)2 78( \267)1 40(\267\267 \267\267 \267)2 136 23 2147 1032 t
( \267\267)1 96( \267)1 40( \267)1 41( \267\267)1 78( \267\267)1 59( \267\267)1 40( \267\267)1 1279( \267\267)1 97( \267)1 40( \267)1 41( \267\267)1 78( \267\267)1 59( \267\267)1 40( \267\267)1 -415( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1417( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21(\267 \267 \267)2 -20 30 4440 3992 t
( \267\267)1 118( \267\267)1 77( \267)1 21( \267\267)1 99( \267\267)1 1318( \267\267)1 119( \267\267)1 77( \267)1 21( \267\267)1 99( \267\267)1 -416( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1417( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267 \267)2 -22 26 4431 4001 t
( \267)1 21( \267\267)1 79( \267\267)1 155( \267)1 22( \267\267)1 77( \267)1 1279( \267)1 22( \267\267)1 79( \267\267)1 155( \267)1 22( \267\267)1 77( \267)1 -433( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1417( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21(\267 \267 \267)2 -20 28 4440 4010 t
( \267\267 \267\267)2 78( \267\267)1 59( \267\267)1 58( \267)1 39( \267)1 40( \267\267 \267)2 100( \267\267)1 1259( \267\267)1 41( \267\267\267)1 57( \267)1 38( \267)1 21( \267 \267)2 78( \267)1 40( \267\267 \267)2 100( \267\267)1 -416( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1417( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19(\267 \267 \267)2 -22 31 4431 4020 t
( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1417( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19(\267 \267 \267)2 -22 15 4436 999 t
( \267\267\267)1 59( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267)1 1415( \267)1 22( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267 \267\267)2 114 8 2576 1008 t
( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1417( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19(\267 \267 \267)2 -22 15 4436 1017 t
( \267\267\267)1 59( \267\267 \267 \267\267\267)3 117( \267\267)1 40( \267\267)1 1415( \267)1 22( \267\267 \267\267)2 78( \267\267)1 40(\267\267 \267\267 \267\267)2 114 8 2576 1027 t
( \267 \267 \267)3 -60( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -20( \267)1 -1417( \267)1 -20( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267 \267)3 -60( \267)1 -19(\267 \267 \267)2 -22 15 4436 1036 t
( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 1437( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39(\267\267 \267\267)1 76 10 2585 3987 t
( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1397( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21(\267 \267 \267)2 -20 17 4445 3997 t
( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 1437( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39(\267\267 \267\267)1 76 10 2585 4006 t
( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -1397( \267 \267)2 -40( \267)1 -19( \267 \267)2 -40( \267)1 -19( \267)1 -21( \267 \267)2 -38( \267)1 -21(\267 \267 \267)2 -20 17 4445 4016 t
( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 40( \267\267)1 39( \267\267)1 1437( \267\267 \267\267)2 78( \267\267)1 40( \267\267)1 39(\267\267 \267\267)1 76 10 2585 4025 t
(\267)1296 4262 w
4634 4365 1305 4365 Dl
1165 1051 1165 4234 Dl
1165 4365 1165 840 Dl
4949 4365 1165 4365 Dl
4949 840 4949 4365 Dl
1165 840 4949 840 Dl
cleartomark
showpage
saveobj restore
end
DpostDict begin
done
end
%ps_include: inclusion end
grestore
PS-include-dict-dw begin
o 0 ne {gsave A defaultmatrix /A ed llx lly nice urx ury nice
	initgraphics 0.1 setlinewidth boxpath stroke grestore} if
clear o-stack aload pop
context end restore
%ps_include: end
%%EndDocument
DpostDict begin
/saveobj save def
mark
11 B f
(Figure 7.)1 422 1 2023 6403 t
11 C f
(TSPLIB)2501 6403 w
11 R f
(instance)2925 6403 w
11 C f
(fl3795)3312 6403 w
11 R f
(.)3708 6403 w
12 R f
(Experiments with larger)2 1178 1 970 6736 t
12 C f
(TSPLIB)2186 6736 w
12 R f
( of performance as)3 923(instances reveal the same sort)4 1461 2 2656 6736 t
( the largest,)2 588( instance, on)2 636( For)1 243(that shown in Table 16, albeit with larger running times.)9 2853 4 720 6886 t
12 C f
(pla85900)720 7036 w
12 R f
(, ILK\()1 321 1 1296 7036 t
12 I f
(N /)1 124 1 1617 7036 t
12 R f
( it lowers LK's)3 793(10\) takes roughly 100 times longer than LK, but)8 2496 2 1751 7036 t
(2.17)720 7186 w
12 I f
(%)930 7186 w
12 R f
(average excess to .96)3 1019 1 1060 7186 t
12 I f
(%)2079 7186 w
12 R f
(.)2179 7186 w
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 56 536 764
%%EndPage: 80 80
%%Page: 81 81
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
81 pagesetup
12 R f
(- 81 -)2 260 1 2750 500 t
( Iterated Lin-Kernighan, we also tested it on)7 2206(As a final illustration of the power of)7 1864 2 970 870 t
( that these were instances for which even)7 2117( Recall)1 388(our random distance matrix testbed.)4 1815 3 720 1020 t
( 17 illus-)2 477( Table)1 326( As)1 216(Lin-Kernighan's performance degrades as instance size increases.)6 3301 4 720 1170 t
( same fate, although it does provide improvements over LK if we)11 3236(trates, ILK suffers the)3 1084 2 720 1320 t
( enough iterations, in this case)5 1477(give it)1 308 2 720 1470 t
12 I f
(N)2539 1470 w
12 R f
(and 10)1 327 1 2653 1470 t
12 I f
(N)2990 1470 w
12 R f
(rather)3104 1470 w
12 I f
(N /)1 124 1 3418 1470 t
12 R f
(10,)3552 1470 w
12 I f
(N /)1 124 1 3736 1470 t
12 R f
(10)3870 1470 w
9 I f
(.)3997 1422 w
9 R f
(5)4027 1422 w
12 R f
(, and)1 237 1 4082 1470 t
12 I f
(N)4353 1470 w
12 R f
( how-)1 280(. Note)1 327 2 4433 1470 t
(ever that as)2 593 1 720 1620 t
12 I f
(N)1365 1620 w
12 R f
(increases, the improvement that ILK\()4 1887 1 1497 1620 t
12 I f
(cN)3384 1620 w
12 R f
(\) gives over LK for a fixed)6 1418 1 3517 1620 t
12 I f
(c)4987 1620 w
12 R f
( instance, ILK\()2 731(declines. For)1 654 2 720 1770 t
12 I f
(N)2105 1770 w
12 R f
(\) cuts the percentage excess for LK by a factor of almost 5)12 2855 1 2185 1770 t
(for)720 1920 w
12 I f
(N)902 1920 w
12 S f
(=)1032 1920 w
12 R f
(100, but only by about 15)5 1295 1 1148 1920 t
12 I f
(%)2443 1920 w
12 R f
(for)2585 1920 w
12 I f
(N)2767 1920 w
12 S f
(=)2897 1920 w
12 R f
( For)1 239(31 , 623.)2 380 2 3013 1920 t
12 I f
(N)3674 1920 w
12 S f
(=)3804 1920 w
12 R f
(100, ILK\()1 491 1 3920 1920 t
12 I f
(N)4411 1920 w
12 R f
(\) found the)2 549 1 4491 1920 t
( in our testbed, which explains)5 1479(optimal solution on every run for each of the two instances)10 2841 2 720 2070 t
(why ILK\(10)1 601 1 720 2220 t
12 I f
(N)1331 2220 w
12 R f
(\) yields no improvement for)4 1374 1 1411 2220 t
12 I f
(N)2821 2220 w
12 S f
(=)2951 2220 w
12 R f
( yet)1 182( optimal solutions have not)4 1329(100. The)1 462 3 3067 2220 t
( testbed, but results reported by Johnson,)6 2114(been determined for larger instances in our)6 2206 2 720 2370 t
( suggest that for random distance matrices the gap)8 2683(McGeoch, and Rothberg [1996])3 1637 2 720 2520 t
( the optimal tour length averages less than .01)8 2328(between the Held-Karp bound and)4 1707 2 720 2670 t
12 I f
(%)4755 2670 w
12 R f
(for)4900 2670 w
12 I f
(N)720 2820 w
12 S f
(\263)840 2820 w
12 R f
( that ILK\()2 552( the fact)2 461( Thus)1 337(1 , 000.)2 320 4 946 2820 t
12 I f
(cN)2616 2820 w
12 R f
(\) provides less improvement over LK as)6 2145 1 2749 2820 t
12 I f
(N)4960 2820 w
12 R f
( not seem to be because there is less room for improvement, but rather)13 3613(increases does)1 707 2 720 2970 t
(because ILK is just less effective for instances of this type when)11 3087 1 720 3120 t
12 I f
(N)3837 3120 w
12 R f
(grows large.)1 593 1 3947 3120 t
10 S f
(_ __________________________________________________________)1 2912 1 1424 3275 t
10 R f
(Iterations: 1)1 702 1 1474 3425 t
10 I f
(N)2511 3425 w
10 R f
(10)2851 3425 w
10 I f
(N)2959 3425 w
10 R f
(1)3323 3425 w
10 I f
(N)3727 3425 w
10 R f
(10)4073 3425 w
10 I f
(N)4181 3425 w
10 S f
(_ __________________________________________________________)1 2912 1 1424 3475 t
10 I f
(N)1812 3625 w
10 R f
( Time in Seconds)3 697( Running)1 546(Average Percent Excess)2 963 3 2063 3625 t
10 S f
(_ __________________________________________________________)1 2912 1 1424 3675 t
10 R f
( 12)1 400( .1 1)2 825( .30 .30)2 788(100 1.42)1 544 4 1729 3825 t
( 130)1 400( 15)1 400( .3)1 425( .45 .12)2 788(316 2.48)1 544 5 1729 3975 t
( 730)1 400( 2.0 81)2 825( .55)1 394(1000 3.56 1.09)2 988 4 1679 4125 t
( 4660)1 400( 13.3 616)2 825(3162 4.60 2.29 1.37)3 1382 3 1679 4275 t
( 43500)1 400( 131.0 5700)2 825(10000 5.82 3.68 2.64)3 1432 3 1629 4425 t
( -)1 400( 1600.0 74000)2 825( -)1 394(31623 6.94 5.83)2 1038 4 1629 4575 t
10 S f
( \347)1 -2912(_ __________________________________________________________)1 2912 2 1424 4625 t
(\347)1424 4575 w
(\347)1424 4475 w
(\347)1424 4375 w
(\347)1424 4275 w
(\347)1424 4175 w
(\347)1424 4075 w
(\347)1424 3975 w
(\347)1424 3875 w
(\347)1424 3775 w
(\347)1424 3675 w
(\347)1424 3575 w
(\347)1424 3475 w
(\347)1424 3375 w
(\347)1954 4625 w
(\347)1954 4575 w
(\347)1954 4475 w
(\347)1954 4375 w
(\347)1954 4275 w
(\347)1954 4175 w
(\347)1954 4075 w
(\347)1954 3975 w
(\347)1954 3875 w
(\347)1954 3775 w
(\347)1954 3675 w
(\347)1954 3575 w
(\347)1954 3475 w
(\347)1954 3375 w
(\347)3136 4625 w
(\347)3136 4575 w
(\347)3136 4475 w
(\347)3136 4375 w
(\347)3136 4275 w
(\347)3136 4175 w
(\347)3136 4075 w
(\347)3136 3975 w
(\347)3136 3875 w
(\347)3136 3775 w
(\347)3136 3675 w
(\347)3136 3575 w
(\347)3136 3475 w
(\347)3136 3375 w
(\347)4336 4625 w
(\347)4336 4575 w
(\347)4336 4475 w
(\347)4336 4375 w
(\347)4336 4275 w
(\347)4336 4175 w
(\347)4336 4075 w
(\347)4336 3975 w
(\347)4336 3875 w
(\347)4336 3775 w
(\347)4336 3675 w
(\347)4336 3575 w
(\347)4336 3475 w
(\347)4336 3375 w
11 B f
(Table 17.)1 436 1 1216 4865 t
11 R f
(Results for Iterated Lin-Kernighan on random distance matrices.)7 2835 1 1708 4865 t
12 R f
( production-)1 614(Nevertheless, for real-world instances at least, we can conclude that)9 3456 2 970 5183 t
( Lin-)1 250(mode ILK is a reasonably robust way of obtaining significant improvements over)11 4070 2 720 5333 t
( is prepared to spend the extra amounts of time required.)10 3034(Kernighan, assuming one)2 1286 2 720 5483 t
( geometric instances)2 1020( For)1 246( ranges, this extra time remains quite feasible.)7 2342(Within certain)1 712 4 720 5633 t
(\(random and real-world\) of up to 1000 cities, ILK\()8 2454 1 720 5783 t
12 I f
(N)3174 5783 w
12 R f
( 0.2 to 0.4)3 493(\) typically gets within)3 1060 2 3254 5783 t
12 I f
(%)4807 5783 w
12 R f
(of)4940 5783 w
( ILK\()1 271(optimal in minutes, and for instances of up to 20,000 or more cities,)12 3301 2 720 5933 t
12 I f
(N /)1 124 1 4292 5933 t
12 R f
(10\) typically)1 614 1 4426 5933 t
(gets with 0.5 to 1.0)4 922 1 720 6083 t
12 I f
(%)1642 6083 w
12 R f
(of optimal in under an hour.)5 1349 1 1772 6083 t
( iterating process)2 840(As a final question related to ILK, one might wonder whether the)11 3230 2 970 6269 t
( that the)2 414( Recall)1 380(is equally powerful at speeding up other local optimization algorithms.)9 3526 3 720 6419 t
( its local search)3 835(original Martin-Otto-Felten algorithm used 3-Opt rather than LK as)8 3485 2 720 6569 t
( much easier to implement than is)6 1655( that 3-Opt \(and the iterating process\) is)7 1956(engine. Given)1 709 3 720 6719 t
( wonder whether Iterated 3-Opt might be a worthwhile option)9 3046(Lin-Kernighan, one might)2 1274 2 720 6869 t
( tested this hypothe-)3 973( We)1 226( time to implement Lin-Kernighan.)4 1688(for those who do not have the)6 1433 4 720 7019 t
( random Euclidean testbed, and the results are summarized in Table 18, where)12 3840(sis on our)2 480 2 720 7169 t
(``I-3opt\()720 7319 w
12 I f
(k)1134 7319 w
12 R f
(\)'' denotes the algorithm that performs)5 1968 1 1187 7319 t
12 I f
(k)3205 7319 w
12 R f
( a)1 102(iterations of Iterated 3-Opt from)4 1630 2 3308 7319 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 43 536 764
%%EndPage: 81 81
%%Page: 82 82
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
82 pagesetup
12 R f
(- 82 -)2 260 1 2750 500 t
10 S f
(_ ________________________________________________________)1 2828 1 1466 875 t
11 R f
(Average Percent Excess over the Held-Karp Lower Bound)7 2571 1 1594 1025 t
10 S f
(_ ________________________________________________________)1 2828 1 1466 1075 t
10 R f
(Algorithm 10)1 871 1 1516 1225 t
7 R f
(2)2392 1185 w
10 R f
(10)2614 1225 w
7 R f
(2. 5)1 93 1 2719 1185 t
10 R f
(10)2999 1225 w
7 R f
(3)3104 1185 w
10 R f
(10)3326 1225 w
7 R f
(3. 5)1 93 1 3431 1185 t
10 R f
(10)3711 1225 w
7 R f
(4)3816 1185 w
10 R f
(10)4038 1225 w
7 R f
(4. 5)1 93 1 4143 1185 t
10 S f
(_ ________________________________________________________)1 2828 1 1466 1275 t
10 R f
( 1.68 2.01 1.89 1.96 1.91)5 1780(LK 1.52)1 948 2 1516 1425 t
(I-3opt\()1516 1575 w
10 I f
(N /)1 103 1 1793 1575 t
10 R f
(10)1904 1575 w
7 I f
(.)2009 1535 w
7 R f
(5)2032 1535 w
10 R f
(\) 1.85 1.81 2.09 2.12 2.14 2.12)6 2169 1 2075 1575 t
(I-3opt\()1516 1725 w
10 I f
(N)1793 1725 w
10 R f
( 1.49 1.73 1.72 1.77 1.76)5 1780(\) 1.57)1 604 2 1860 1725 t
(ILK\()1516 1875 w
10 I f
(N /)1 103 1 1715 1875 t
10 R f
(10\))1826 1875 w
10 S f
(\347)2183 1895 w
(\347)2183 1875 w
(\347)2183 1775 w
(\347)2183 1675 w
(\347)2183 1575 w
(\347)2183 1475 w
(\347)2183 1375 w
(\347)2183 1275 w
(\347)2183 1175 w
10 R f
(1.13 1.12 1.20 1.22 1.24 1.25)5 1955 1 2289 1875 t
10 S f
(_ ________________________________________________________)1 2828 1 1466 1925 t
11 R f
(Running Time in Seconds on a 150 Mhz SGI Challenge)9 2462 1 1649 2075 t
10 S f
(_ ________________________________________________________)1 2828 1 1466 2125 t
10 R f
(Algorithm 10)1 871 1 1516 2275 t
7 R f
(2)2392 2235 w
10 R f
(10)2614 2275 w
7 R f
(2. 5)1 93 1 2719 2235 t
10 R f
(10)2999 2275 w
7 R f
(3)3104 2235 w
10 R f
(10)3326 2275 w
7 R f
(3. 5)1 93 1 3431 2235 t
10 R f
(10)3711 2275 w
7 R f
(4)3816 2235 w
10 R f
(10)4038 2275 w
7 R f
(4. 5)1 93 1 4143 2235 t
10 S f
(_ ________________________________________________________)1 2828 1 1466 2325 t
10 R f
( 10 39)2 712( 2.5)1 356( .8)1 356( .20)1 356(LK .06)1 948 5 1516 2475 t
(I-3opt\()1516 2625 w
10 I f
(N /)1 103 1 1793 2625 t
10 R f
(10)1904 2625 w
7 I f
(.)2009 2585 w
7 R f
(5)2032 2585 w
10 R f
( 1340)1 356( 115)1 356( 13.8)1 356(\) .07 .31 2.1)3 1101 4 2075 2625 t
(I-3opt\()1516 2775 w
10 I f
(N)1793 2775 w
10 R f
( 4190)1 356( 350)1 356( 39.1)1 356( .79 5.7)2 712(\) .18)1 604 5 1860 2775 t
(ILK\()1516 2925 w
10 I f
(N /)1 103 1 1715 2925 t
10 R f
( 2480)1 356( 292)1 356( 35.4)1 356( .88 5.5)2 712(10\) .14)1 638 5 1826 2925 t
10 S f
( \347)1 -2828(_ ________________________________________________________)1 2828 2 1466 2975 t
(\347)1466 2875 w
(\347)1466 2775 w
(\347)1466 2675 w
(\347)1466 2575 w
(\347)1466 2475 w
(\347)1466 2375 w
(\347)1466 2275 w
(\347)1466 2175 w
(\347)1466 2075 w
(\347)1466 1975 w
(\347)1466 1875 w
(\347)1466 1775 w
(\347)1466 1675 w
(\347)1466 1575 w
(\347)1466 1475 w
(\347)1466 1375 w
(\347)1466 1275 w
(\347)1466 1175 w
(\347)1466 1075 w
(\347)1466 975 w
(\347)2183 2975 w
(\347)2183 2925 w
(\347)2183 2825 w
(\347)2183 2725 w
(\347)2183 2625 w
(\347)2183 2525 w
(\347)2183 2425 w
(\347)2183 2325 w
(\347)2183 2225 w
(\347)4294 2975 w
(\347)4294 2875 w
(\347)4294 2775 w
(\347)4294 2675 w
(\347)4294 2575 w
(\347)4294 2475 w
(\347)4294 2375 w
(\347)4294 2275 w
(\347)4294 2175 w
(\347)4294 2075 w
(\347)4294 1975 w
(\347)4294 1875 w
(\347)4294 1775 w
(\347)4294 1675 w
(\347)4294 1575 w
(\347)4294 1475 w
(\347)4294 1375 w
(\347)4294 1275 w
(\347)4294 1175 w
(\347)4294 1075 w
(\347)4294 975 w
11 B f
(Table 18.)1 436 1 1205 3215 t
11 R f
(Iterated 3-Opt versus Lin-Kernighan and Iterated Lin-Kernighan.)6 2858 1 1697 3215 t
12 R f
(greedy starting tour.)2 972 1 720 3497 t
(Note that although I-3opt\()3 1262 1 970 3683 t
12 I f
(N /)1 124 1 2232 3683 t
12 R f
(10)2366 3683 w
9 I f
(.)2493 3635 w
9 R f
(5)2523 3635 w
12 R f
( quality, I-3opt\()2 763(\) does not quite equal LK in tour)7 1579 2 2578 3683 t
12 I f
(N)4920 3683 w
12 R f
(\))5000 3683 w
(beats it by .15-.19)3 880 1 720 3833 t
12 I f
(%)1600 3833 w
12 R f
(for)1735 3833 w
12 I f
(N)1910 3833 w
12 S f
(>)2040 3833 w
12 R f
( might well be a reasonable choice for)7 1859(100, and so the latter)4 1025 2 2156 3833 t
( running)1 422( That)1 297(those preferring a running time penalty to a programming time penalty.)10 3601 3 720 3983 t
(time penalty grows quickly, however, reaching a factor of 100 by)10 3281 1 720 4133 t
12 I f
(N)4045 4133 w
12 S f
(=)4175 4133 w
12 R f
( one)1 216( If)1 153(31 , 623.)2 380 3 4291 4133 t
( tours in less time)4 939(does have an LK implementation, one can find substantially better)9 3381 2 720 4283 t
(using ILK\()1 530 1 720 4433 t
12 I f
(N /)1 124 1 1250 4433 t
12 R f
(10\).)1384 4433 w
14 B f
( Variants)1 556(6.3. Further)1 753 2 720 4763 t
12 R f
( the)1 186(The success of Iterated Lin-Kernighan supports the idea that the real contribution of)12 4134 2 720 4986 t
( effective method for adaptively generating better)6 2437(genetic approach is that it provides an)6 1883 2 720 5136 t
( such a view, several)4 1012( Given)1 357(and better starting tours for its local optimization subroutine.)8 2951 3 720 5286 t
( this)1 208( In)1 163( other possibilities for adaptive starting tour generation.)7 2696(researchers have explored)2 1253 4 720 5436 t
(subsection, we sample some of these.)5 1799 1 720 5586 t
( several alternative mutations have been proposed,)6 2444(Within the realm of ILK variants,)5 1626 2 970 5772 t
(typically ones involving significantly greater change to the current champion tour than a)12 4320 1 720 5922 t
( and Moon [1995] consider the most straightforward)7 2590( Kahng,)1 388( Hong,)1 365(simple 4-Opt move.)2 977 4 720 6072 t
( from 4-Opt double-bridge moves to random)6 2161(generalization: going)1 1053 2 720 6222 t
12 I f
(k)3967 6222 w
12 R f
(-Opt moves for fixed)3 1020 1 4020 6222 t
(values of)1 438 1 720 6372 t
12 I f
(k)1189 6372 w
12 S f
(>)1292 6372 w
12 R f
( on experiments with)3 1018(4. Based)1 444 2 1408 6372 t
12 C f
(lin318)2902 6372 w
12 R f
(,)3334 6372 w
12 C f
(att532)3396 6372 w
12 R f
(, and an 800-city random)4 1212 1 3828 6372 t
( Lin-Kernighan than that of Johnson)5 1755(distance matrix, and using a less-powerful version of)7 2565 2 720 6522 t
( values of)2 485(et al., they conclude that larger)5 1525 2 720 6672 t
12 I f
(k)2769 6672 w
12 R f
( distinctions are)2 781( The)1 255(can yield better results.)3 1143 3 2861 6672 t
( using)1 302( Moreover,)1 574( statistical noise in the data appears to be high.)9 2338(tiny, however, and the)3 1106 4 720 6822 t
(higher values of)2 780 1 720 6972 t
12 I f
(k)1533 6972 w
12 R f
( must put 2)3 551(increases running time per iteration, because one)6 2364 2 1619 6972 t
12 I f
(k)4544 6972 w
12 R f
(cities on)1 409 1 4631 6972 t
( this time is factored in, the)6 1405( When)1 361(the active queue at the beginning of each iteration.)8 2554 3 720 7122 t
( however, this is worth a more extensive)7 2054( Certainly,)1 553(conclusions become even murkier.)3 1713 3 720 7272 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 82 82
%%Page: 83 83
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
83 pagesetup
12 R f
(- 83 -)2 260 1 2750 500 t
(study.)720 870 w
( a mutation that does more damage by performing more 4-)10 2861(Fiechter [1994] proposes)2 1209 2 970 1056 t
( such move,)2 587( of creating his next starting tour by performing just one)10 2760( Instead)1 413(Opt moves.)1 560 4 720 1206 t
(he proposes performing a sequence of from)6 2141 1 720 1356 t
12 I f
(N /)1 124 1 2900 1356 t
12 R f
(50 to)1 253 1 3034 1356 t
12 I f
(N /)1 124 1 3327 1356 t
12 R f
(150 of them, guiding the choice)5 1579 1 3461 1356 t
( contains the)2 618(by randomized heuristics operating in tabu-search mode, where the tabu list)10 3702 2 720 1506 t
( changed by one of the 4-Opt moves.)7 1885(cities that most recently had their tour neighbors)7 2435 2 720 1656 t
( comparable to those of Section 6.2, since he uses 2-Opt for his local)13 3418(His results are not)3 902 2 720 1806 t
(optimization algorithm rather than Lin-Kernighan \(and not even full 2-Opt but a parallel)12 4320 1 720 1956 t
( the weaker form of local optimization, the)7 2183( Given)1 371(version based on tour partitioning\).)4 1766 3 720 2106 t
( For)1 233( for random Euclidean instances are impressive.)6 2342(results Fiechter reports)2 1113 3 720 2256 t
12 I f
(N)4444 2256 w
12 S f
(=)4574 2256 w
12 R f
(10 , 000)2 350 1 4690 2256 t
( obtain average excesses that are better than those reported)9 2872(he needs only 30 iterations to)5 1448 2 720 2406 t
( not catch 3-Opt on such instances)6 1702(for 3-Opt in Section 3.2, whereas Iterated 2-Opt does)8 2618 2 720 2556 t
( more time)2 544( of Fiechter's iterations takes significantly)5 2090( Each)1 311(even with 10,000 iterations.)3 1375 4 720 2706 t
( high cost of generating his mutations, but it)8 2236(than one of Iterated 2-Opt, because of the)7 2084 2 720 2856 t
( this approach would)3 1010( would be interesting to see how)6 1573( It)1 137(appears that it is time well spent.)6 1600 4 720 3006 t
(perform with Lin-Kernighan as the local optimizer.)6 2467 1 720 3156 t
( Zachariasen [1994,1995] have studied variants in which the mutations are)10 3630(Dam and)1 440 2 970 3342 t
( of)1 139(performed via a tabu search in which neighbors are generated using relaxed versions)12 4181 2 720 3492 t
( in Section 3.5\), with only a constant)7 1809(LK-search or their own flower transition \(described)6 2511 2 720 3642 t
( Local)1 333( so as to speed the process along.)7 1588(number of neighbors being examined in each step)7 2399 3 720 3792 t
( using strictly downhill versions of either move, although)8 2814(optimization is then performed)3 1506 2 720 3942 t
( and a limited application of the best-)7 1872(the search continues to be guided using tabu lists)8 2448 2 720 4092 t
( as a tabu)3 489( Viewed)1 445( first-seen rule of Lin-Kernighan.)4 1650(seen choice rule, as opposed to the)6 1736 4 720 4242 t
( approaches described)2 1077(search algorithm, this complex approach far outclasses the simple)8 3243 2 720 4392 t
( does not appear to be quite as good)8 1753( It)1 138( 4.1, as well as standard Lin-Kernighan.)6 1941(in Section)1 488 4 720 4542 t
( of the Dam and Zachariasen mutations with a more standard Lin-)11 3298(as ILK, but a hybrid)4 1022 2 720 4692 t
( there are)2 462( Moreover,)1 571( routine would be worth further exploration.)6 2167(Kernighan local search)2 1120 4 720 4842 t
( the flower transition may on occasion be more effective)9 2812(indications in their results that)4 1508 2 720 4992 t
( well worth studying in the context of standard neighbor-list)9 2989(than LK-search, and this is)4 1331 2 720 5142 t
(Lin-Kernighan and ILK.)2 1175 1 720 5292 t
( have been proposed by Codenotti et al.)7 2076(Two other intriguing mutation schemes)4 1994 2 970 5478 t
( Suppose)1 490( instances.)1 524( first is restricted to geometric)5 1569([1993,1995]. The)1 890 4 720 5628 t
12 I f
(T)4246 5628 w
12 R f
(is the current)2 674 1 4366 5628 t
( coordinates by small amounts, obtaining a)6 2176( perturb the city)3 819( Randomly)1 579(champion tour.)1 746 4 720 5778 t
(new instance)1 628 1 720 5928 t
12 I f
(I)1383 5928 w
12 S f
(\242)1433 5928 w
12 R f
(.)1463 5928 w
12 I f
(T)1558 5928 w
12 R f
( not be locally optimal with respect to)7 1850(will typically)1 645 2 1660 5928 t
12 I f
(I)4189 5928 w
12 S f
(\242)4239 5928 w
12 R f
(, so we can per-)4 771 1 4269 5928 t
( it with respect to)4 872(form local optimization on)3 1312 2 720 6078 t
12 I f
(I)2943 6078 w
12 S f
(\242)2993 6078 w
12 R f
(, obtaining a new tour)4 1087 1 3023 6078 t
12 I f
(T)4149 6078 w
12 S f
(\242)4226 6078 w
12 R f
( new tour)2 471(. This)1 313 2 4256 6078 t
( in)1 131(will in turn typically not be locally optimal)7 2128 2 720 6228 t
12 I f
(I)3016 6228 w
12 R f
(, and so it is our new ``official'' starting)8 1984 1 3056 6228 t
( et al. also propose a non-geometric scheme, in which)9 2687(tour. Codenotti)1 770 2 720 6378 t
12 I f
(I)4219 6378 w
12 S f
(\242)4269 6378 w
12 R f
(is obtained by)2 699 1 4341 6378 t
(deleting a random subset of say)5 1589 1 720 6528 t
12 I f
(N /)1 124 1 2352 6528 t
12 R f
( tour)1 237( The)1 259(200 cities.)1 508 3 2486 6528 t
12 I f
(T)3533 6528 w
12 S f
(\242)3610 6528 w
12 R f
(is then converted to a legal)5 1357 1 3683 6528 t
( inserting each deleted city into the tour immediately after)9 2800(tour for the original instance by)5 1520 2 720 6678 t
( these schemes, Codenotti et al.)5 1568( For)1 238( its 20 nearest neighbors \(randomly chosen\).)6 2199(one of)1 315 4 720 6828 t
( for their version of)4 963(report significantly better improvements on a per-iteration basis than)8 3357 2 720 6978 t
( local)1 266( iterations in the new schemes are more expensive, however: although the)11 3576(ILK. The)1 478 3 720 7128 t
(optimization in the transformed instance can be performed by 2-Opt, this is still a)13 4320 1 720 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 83 83
%%Page: 84 84
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
84 pagesetup
12 R f
(- 84 -)2 260 1 2750 500 t
(nontrivial operation compared to simply generating a random double-bridge move.)9 4320 1 720 870 t
( far more cities in the)5 1056(Moreover, each invocation of local search must typically start with)9 3264 2 720 1020 t
( 8 needed by ILK, since far more than 4 tour edges are likely to have)15 3300(active queue than the)3 1020 2 720 1170 t
( any of their implementations long)5 1742( Codenotti et al. do not run)6 1383(changed. Consequently,)1 1195 3 720 1320 t
( those obtained by ILK\()4 1159(enough to obtain tour qualities as good as)7 2029 2 720 1470 t
12 I f
(N /)1 124 1 3908 1470 t
12 R f
(10\), and their results)3 998 1 4042 1470 t
( these)1 280( Nevertheless,)1 713( of all the running time tradeoffs involved.)7 2066(do not give a clear picture)5 1261 4 720 1620 t
(mutation schemes also seem well worth further study.)7 2592 1 720 1770 t
( similar to the first Codenotti)5 1467(Gu [1994] has proposed a variant on ILK somewhat)8 2603 2 970 1956 t
( however, the true)3 878( Here,)1 327(scheme, in that the distance metric is altered between iterations.)9 3115 3 720 2106 t
( that all distances have been)5 1430( Suppose)1 484( introduced until the final iteration.)5 1771(metric is not)2 635 4 720 2256 t
( Let)1 231( between 0 and 1.)4 886(normalized to lie)2 840 3 720 2406 t
12 I f
(d *)1 130 1 2718 2406 t
12 R f
(be the average inter-city distance and)5 1846 1 2889 2406 t
12 S f
(a)4776 2406 w
12 R f
(the)4893 2406 w
( iteration)1 444( During)1 412(number of iterations desired.)3 1419 3 720 2556 t
12 I f
(i)3037 2556 w
12 R f
(, the distance between cities)4 1397 1 3071 2556 t
12 I f
(c)4511 2556 w
12 R f
(and)4607 2556 w
12 I f
(c)4823 2556 w
12 S f
(\242)4886 2556 w
12 R f
(is)4959 2556 w
(taken to be)2 587 1 720 2706 t
12 I f
(d *)1 130 1 1367 2706 t
12 S f
(+)1517 2706 w
12 R f
(\()1603 2706 w
12 I f
(d)1653 2706 w
12 R f
(\()1723 2706 w
12 I f
(c)1773 2706 w
12 R f
(,)1836 2706 w
12 I f
(c)1876 2706 w
12 S f
(\242)1939 2706 w
12 R f
(\))1979 2706 w
12 S f
(-)2039 2706 w
12 I f
(d *)1 130 1 2125 2706 t
12 R f
(\))2265 2706 w
9 S f
(a -)1 122 1 2320 2658 t
9 I f
(i)2457 2658 w
9 S f
(+)2504 2658 w
9 R f
(1)2569 2658 w
12 R f
(if)2684 2706 w
12 I f
(d)2818 2706 w
12 R f
(\()2888 2706 w
12 I f
(c)2938 2706 w
12 R f
(,)3001 2706 w
12 I f
(c)3041 2706 w
12 S f
(\242)3104 2706 w
12 R f
(\))3144 2706 w
12 S f
(>)3244 2706 w
12 I f
(d *)1 130 1 3360 2706 t
12 R f
(and)3550 2706 w
12 I f
(d *)1 130 1 3783 2706 t
12 S f
(-)3933 2706 w
12 R f
(\()4019 2706 w
12 I f
(d *)1 130 1 4069 2706 t
12 S f
(-)4219 2706 w
12 I f
(d)4305 2706 w
12 R f
(\()4375 2706 w
12 I f
(c)4425 2706 w
12 R f
(,)4488 2706 w
12 I f
(c)4528 2706 w
12 S f
(\242)4591 2706 w
12 R f
(\) \))1 90 1 4631 2706 t
9 S f
(a -)1 122 1 4736 2658 t
9 I f
(i)4873 2658 w
9 S f
(+)4920 2658 w
9 R f
(1)4985 2658 w
12 R f
( that on the final iteration, distances attain their true values, although ini-)12 3528(otherwise. Note)1 792 2 720 2856 t
( starting)1 403( The)1 257( hence the search space is ``smoother.'')6 1963(tially they are all very similar and)6 1697 4 720 3006 t
( [1994] only)2 596( Gu)1 207( the previous iteration.)3 1086(tour for each iteration is simply the final tour from)9 2431 4 720 3156 t
( approach on random distance matrices with)6 2146(tests this)1 425 2 720 3306 t
12 I f
(N)3325 3306 w
12 S f
(\243)3445 3306 w
12 R f
(100 and concentrates on 2-Opt)4 1489 1 3551 3306 t
( over simply)2 640( obtains significant improvements)3 1690( He)1 217(and Or-Opt as his local optimizers.)5 1773 4 720 3456 t
(performing the local optimizers by themselves: for)6 2572 1 720 3606 t
12 I f
(N)3344 3606 w
12 S f
(=)3474 3606 w
12 R f
(100, his version using 2-Opt)4 1450 1 3590 3606 t
( we)1 181( As)1 205( for 3-Opt on such instances.)5 1441(appears to find slightly better tours than we report)8 2493 4 720 3756 t
( distance matrices \(and using such)5 1746(have seen, however, results obtained using random)6 2574 2 720 3906 t
( highly misleading, and so the case for this ``search space)10 3077(small instances\) may be)3 1243 2 720 4056 t
(smoothing'' approach to the TSP remains to be made.)8 2594 1 720 4206 t
( there has been a contin-)5 1185(As to genetic algorithms with population sizes exceeding 1,)8 2885 2 970 4392 t
( Oliver, Smith, and Holland)4 1360(uing flow of proposals for new 2-parent crossovers, e.g., see)9 2960 2 720 4542 t
( Starkweather, and Fuquay [1989], Starkweather, McDaniel, Mathias,)7 3501([1987], Whitley,)1 819 2 720 4692 t
( and Liepins [1993], and Bui and Moon)7 1992(Whitley, and Whitley [1991], Homaifar, Guan,)5 2328 2 720 4842 t
( non-traditional parenting: using)3 1612( interesting is a new development in)6 1845([1994]. More)1 688 3 720 4992 t
12 I f
(m)4914 4992 w
12 R f
(-)5000 4992 w
(parent crossovers for)2 1013 1 720 5142 t
12 I f
(m)1766 5142 w
12 S f
(>)1902 5142 w
12 R f
( Kahng, and Muddu [1994] propose taking the union)8 2547(2. Boese,)1 475 2 2018 5142 t
( the current population of tours, assigning a weight to each edge)11 3088(of all the edges present in)5 1232 2 720 5292 t
( then using a randomized heuristic to)6 1801(based on the quality of the tours that contain it, and)10 2519 2 720 5442 t
(generate starting tours based on those weights.)6 2240 1 720 5592 t
( proposals has yet been stud-)5 1440(Unfortunately, none of these new two-or-more-parent)5 2630 2 970 5778 t
( is one)2 318( There)1 341( competitive it might be with ILK.)6 1667(ied extensively enough to determine how)5 1994 4 720 5928 t
(multi-parent proposal that)2 1261 1 720 6078 t
12 I f
(has)2016 6078 w
12 R f
( than ILK, however, if one)5 1305(been shown to find better tours)5 1517 2 2218 6078 t
( running time penalty is substantial \(and unavoid-)7 2425( The)1 251( time.)1 280(is willing to spend the extra)5 1364 4 720 6228 t
( search algo-)2 623(able\) since this new crossover is embedded in a genetic scheme whose local)12 3697 2 720 6378 t
( in typi-)2 382( new proposal is based on the observation that)8 2224( The)1 247(rithm is not LK but ILK itself.)6 1467 4 720 6528 t
( has been experimentally con-)4 1461( This)1 279( good tours share many common edges.)6 1935(cal instances,)1 645 4 720 6678 t
( by many authors, including Kirkpatrick and Toulouse [1985],)8 3118(firmed for 2- and 3-Opt)4 1202 2 720 6828 t
(M)720 6978 w
(. .)1 54 1 827 6906 t
( seems to be even more true for)7 1525( It)1 136(uhlenbein [1991], Boese, Kahng, and Muddu [1994].)6 2552 3 827 6978 t
( fact, as observed by Applegate, Bixby,)6 1998( In)1 179(Lin-Kernighan and Iterated Lin-Kernighan.)3 2143 3 720 7128 t
( the graph consisting of the union of edges in a small)11 2938( and Cook [1994],)3 978( atal,)1 159(Chv \302)1 245 4 720 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 84 84
%%Page: 85 85
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
85 pagesetup
12 R f
(- 85 -)2 260 1 2750 500 t
( that one needn't)3 840(collection of ILK tours often is sufficiently sparse and well-structured)9 3480 2 720 870 t
( One)1 267( tour.)1 262(settle for the heuristic approach of Boese et al. in generating the next starting)13 3791 3 720 1020 t
(can instead simply compute the)4 1593 1 720 1170 t
12 I f
(optimal)2362 1170 w
12 R f
(tour amongst those tours that use only edges)7 2261 1 2779 1170 t
(from the graph.)2 744 1 720 1320 t
( is that these graphs typically have bounded)7 2198(The key observation)2 1006 2 970 1506 t
12 I f
(branch-width)4218 1506 w
12 R f
(, as)1 174 1 4866 1506 t
( though determining branch-width is)4 1825( Even)1 324(defined by Robertson and Seymour [1991].)5 2171 3 720 1656 t
( typically be constructed)3 1203(NP-hard, low branch-width decompositions for such graphs can)7 3117 2 720 1806 t
( once one has such a decompo-)6 1492(using appropriate heuristics [Cook & Seymour, 1993], and)7 2828 2 720 1956 t
( dynamic programming algorithm can find the optimal tour in time linear in)12 3777(sition, a)1 392 2 720 2106 t
12 I f
(N)4930 2106 w
12 R f
(,)5010 2106 w
( &)1 151( atal,)1 159( \302)1 45( Bixby, Chv)2 638(albeit exponential in the width of the decomposition [Applegate,)8 3327 5 720 2256 t
( start with a population of very good)7 1837( this approach to work, we must)6 1604( For)1 238(Cook, 1994].)1 641 4 720 2406 t
( the best tours from a large collection)7 1815(parent tours, which typically are obtained by taking)7 2505 2 720 2556 t
(of runs of ILK\()3 742 1 720 2706 t
12 I f
(m)1462 2706 w
12 R f
(\) with)1 286 1 1548 2706 t
12 I f
(m)1867 2706 w
12 S f
(>>)2003 2706 w
12 I f
(N)2185 2706 w
12 R f
( then can ``mate'')3 866( We)1 229(, a very time-consuming approach.)4 1680 3 2265 2706 t
( apply ILK to the derived tours, which although)8 2420(various subsets of this population and)5 1900 2 720 2856 t
( be optimal with respect to the entire)7 1775(optimal for the set of edges in their parents, need not)10 2545 2 720 3006 t
( resulting tours are then added to the popula-)8 2166( The)1 248( may be improvable.)3 994(instance and hence)2 912 4 720 3156 t
(tion, and we can try again.)5 1270 1 720 3306 t
( key step in finding and verifying the optimal tour lengths for)11 3061(This approach was a)3 1009 2 970 3492 t
12 C f
(fnl4461)720 3642 w
12 R f
(and)1260 3642 w
12 C f
(pla7397)1469 3642 w
12 R f
(, the two largest)3 786 1 1973 3642 t
12 C f
(TSPLIB)2795 3642 w
12 R f
( the lat-)2 378( On)1 212(instances solved to date.)3 1187 3 3263 3642 t
(ter the best tours found by ILK were still .01)9 2242 1 720 3792 t
12 I f
(%)2962 3792 w
12 R f
( the)1 189(above what turned out finally to be)6 1748 2 3103 3792 t
( .001)1 242(optimal length, and the branch-width approach reduced the gap to)9 3189 2 720 3942 t
12 I f
(%)4151 3942 w
12 R f
( the prac-)2 457(. Thus)1 332 2 4251 3942 t
( records.)1 415(tical value of the latter is probably nil, except to those attempting to set new TSP)15 3905 2 720 4092 t
( it)1 126(Within that context, however, it seems the best way to improve on ILK, and so)14 4194 2 720 4242 t
( trade-off curve for TSP)4 1229(deserves a place of honor at one end of the time-tour quality)11 3091 2 720 4392 t
( the approach should soon be forthcoming from Applegate et)9 2989( details on)2 511(heuristics. More)1 820 3 720 4542 t
(al.)720 4692 w
( above of simply per-)4 1040(In the meantime, the more straightforward approach alluded to)8 3030 2 970 4878 t
( taking the best has much to recommend)7 1954(forming many independent long runs of ILK and)7 2366 2 720 5028 t
( and differences of less than .02)6 1716(it, assuming the time is available)5 1735 2 720 5178 t
12 I f
(%)4171 5178 w
12 R f
(are important.)1 707 1 4333 5178 t
(Although in our experiments an average run of ILK\()8 2560 1 720 5328 t
12 I f
(N)3280 5328 w
12 R f
(\) was typically better than the best)6 1680 1 3360 5328 t
(of ten ILK\()2 578 1 720 5478 t
12 I f
(N /)1 124 1 1298 5478 t
12 R f
(10\) runs, the analogous statement does not hold for substantially longer)10 3608 1 1432 5478 t
( Johnson, McGeoch, and Rothberg [1996] were able to find optimal)10 3365( example,)1 479(runs. For)1 476 3 720 5628 t
( by taking the best of)5 1112(tours quite frequently for 1000-city random Euclidean instances)7 3208 2 720 5778 t
( , 000\))2 270( ILK\(200)1 461( alternative of performing a single run of)7 2051( The)1 259( runs.)1 280( , 000\))2 270(twenty ILK\(10)1 729 7 720 5928 t
( ILK\(10,000\) runs)2 882(would probably not have worked as well, given that the majority of the)12 3438 2 720 6078 t
( iteration, and given that they typically averaged)7 2408( , 000th)2 324( by the 5)3 453(had stopped improving)2 1135 4 720 6228 t
(around 0.01)1 573 1 720 6378 t
12 I f
(%)1293 6378 w
12 R f
(above the best-of-20 result.)3 1315 1 1423 6378 t
14 B f
( NETWORK ALGORITHMS)2 1800(7. NEURAL)1 767 2 720 6708 t
12 R f
( gone)1 265(This section must of necessity come as something of an anticlimax to what has)13 3805 2 970 6967 t
( proposed under the general rubric of)6 1894(before, since none of the TSP algorithms so far)8 2426 2 720 7117 t
( In)1 187( proved competitive with more classical approaches.)6 2682(``neural net algorithms'' has)3 1451 3 720 7267 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 85 85
%%Page: 86 86
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
86 pagesetup
12 R f
(- 86 -)2 260 1 2750 500 t
(particular, none can produce tours even as good as those we have reported for single-run)14 4320 1 720 870 t
( sec-)1 229( This)1 280( time, at least on sequential machines.)6 1861(3-Opt, and most take substantially more)5 1950 4 720 1020 t
(tion is also somewhat redundant, given Potvin's excellent recent survey on the topic)12 4320 1 720 1170 t
( have)1 279( shall thus only briefly sketch the major ways in which researchers)11 3443([1993]. We)1 598 3 720 1320 t
( the reader to Chapter 7)5 1170(attempted to adapt the neural net approach to the TSP, referring)10 3150 2 720 1470 t
( of how neural algorithms work and to Potvin [1993] for a more com-)13 3451(for precise details)2 869 2 720 1620 t
( some of the studies of)5 1106( Since)1 331(plete and detailed survey of the variations on these themes.)9 2883 3 720 1770 t
( their comparisons on a faulty understanding of expected)8 2738(neural net algorithms have based)4 1582 2 720 1920 t
( of classical algorithms, one of our emphases)7 2234(optimal tour lengths and the true potential)6 2086 2 720 2070 t
(will also be on putting such reported results into more accurate perspective.)11 3633 1 720 2220 t
(The set of neural net algorithms for the TSP can currently be divided into two main)15 4070 1 970 2406 t
( algorithms in which the neurons are)6 1846( first consists of generally applicable)5 1848(classes. The)1 626 3 720 2556 t
( second)1 370( The)1 253(organized according to some formulation of the TSP as an integer program.)11 3697 3 720 2706 t
( and consists of algorithms in which the neurons can)9 2611(is restricted to geometric instances)4 1709 2 720 2856 t
( shall cover)2 580( We)1 239( identify.)1 448(be viewed as points in space seeking out cities with which to)11 3053 4 720 3006 t
(each class in turn.)3 861 1 720 3156 t
14 B f
( Networks Based on Integer Programs)5 2282(7.1. Neural)1 692 2 720 3486 t
12 R f
( approach to the TSP was due to Hopfield and Tank)10 2576(The first application of a neural net)6 1744 2 720 3709 t
( TSP)1 248( approach was based on the integer programming formulation of the)10 3390([1985]. Their)1 682 3 720 3859 t
( Here)1 293(depicted in Figure 8.)3 998 2 720 4009 t
12 I f
(x)2042 4009 w
9 I f
(ik)2110 4033 w
12 S f
(=)2235 4009 w
12 R f
(1 is taken to mean that city)6 1309 1 2351 4009 t
12 I f
(c)3692 4009 w
9 I f
(i)3760 4033 w
12 R f
(is the)1 260 1 3827 4009 t
12 I f
(k)4119 4009 w
12 R f
(th city in the tour,)4 868 1 4172 4009 t
( that)1 218( first constraint says)3 991( The)1 254(in which case the sum being minimized is the tour length.)10 2857 4 720 4159 t
( second says that each city is in precisely)8 1986(each position contains precisely one city and the)7 2334 2 720 4309 t
(one position.)1 622 1 720 4459 t
(Minimize)1518 4956 w
9 I f
(i)2017 5076 w
9 S f
(=)2064 5076 w
9 R f
(1)2129 5076 w
17 S f
(S)2045 4992 w
9 I f
(N)2065 4836 w
(j)2183 5076 w
9 S f
(=)2223 5076 w
9 R f
(1)2288 5076 w
17 S f
(S)2208 4992 w
9 I f
(N)2228 4836 w
12 I f
(d)2343 4956 w
12 R f
(\()2413 4956 w
12 I f
(c)2463 4956 w
9 I f
(i)2531 4980 w
12 R f
(,)2576 4956 w
12 I f
(c)2616 4956 w
9 I f
(j)2684 4980 w
12 R f
(\))2729 4956 w
(.)2789 4920 w
12 S f
(\354)2839 4851 w
(\357)2839 4971 w
(\356)2839 5091 w
12 I f
(x)2898 4956 w
9 I f
(i)2966 4980 w
9 R f
(,)2998 4980 w
9 I f
(N)3028 4980 w
12 R f
(.)3108 4920 w
12 I f
(x)3148 4956 w
9 I f
(j)3216 4980 w
9 R f
(, 1)1 75 1 3248 4980 t
12 S f
(+)3383 4956 w
9 I f
(k)3509 5076 w
9 S f
(=)3571 5076 w
9 R f
(1)3636 5076 w
17 S f
(S)3545 4992 w
9 I f
(N)3499 4836 w
9 S f
(-)3581 4836 w
9 R f
(1)3646 4836 w
12 I f
(x)3701 4956 w
9 I f
(i)3769 4980 w
9 R f
(,)3801 4980 w
9 I f
(k)3831 4980 w
12 R f
(.)3891 4920 w
12 I f
(x)3931 4956 w
9 I f
(j)3999 4980 w
9 R f
(,)4031 4980 w
9 I f
(k)4061 4980 w
9 S f
(+)4123 4980 w
9 R f
(1)4188 4980 w
12 S f
(\374)4243 4851 w
(\357)4243 4971 w
(\376)4243 5091 w
12 R f
(Subject to)1 485 1 1518 5365 t
9 I f
(i)2118 5485 w
9 S f
(=)2165 5485 w
9 R f
(1)2230 5485 w
17 S f
(S)2146 5401 w
9 I f
(N)2166 5245 w
12 I f
(x)2284 5365 w
9 I f
(ik)2352 5389 w
12 S f
(=)2487 5365 w
12 R f
( 1)1 150(1 ,)1 100 2 2613 5365 t
12 S f
(\243)2903 5365 w
12 I f
(k)3009 5365 w
12 S f
(\243)3102 5365 w
12 I f
(N)3208 5365 w
12 R f
(and)1818 5744 w
9 I f
(k)2118 5864 w
9 S f
(=)2180 5864 w
9 R f
(1)2245 5864 w
17 S f
(S)2154 5780 w
9 I f
(N)2174 5624 w
12 I f
(x)2290 5744 w
9 I f
(ik)2358 5768 w
12 S f
(=)2493 5744 w
12 R f
( 1)1 150(1 ,)1 100 2 2619 5744 t
12 S f
(\243)2909 5744 w
12 I f
(i)3015 5744 w
12 S f
(\243)3089 5744 w
12 I f
(N)3195 5744 w
12 R f
(and)1818 6063 w
12 I f
(x)2118 6063 w
9 I f
(ik)2186 6087 w
12 S f
(\316)2301 6063 w
12 R f
( 1)1 150({ 0 , 1 } ,)5 346 2 2426 6063 t
12 S f
(\243)2962 6063 w
12 I f
(i)3068 6063 w
12 R f
(,)3112 6063 w
12 I f
(k)3152 6063 w
12 S f
(\243)3245 6063 w
12 I f
(N)3351 6063 w
12 S f
(_ ________________________________________________\347)1 2904 1 1458 6138 t
(\347)4362 6071 w
(\347)4362 5951 w
(\347)4362 5831 w
(\347)4362 5711 w
(\347)4362 5591 w
(\347)4362 5471 w
(\347)4362 5351 w
(\347)4362 5231 w
(\347)4362 5111 w
(\347)4362 4991 w
(\347)4362 4871 w
(\347)4362 4751 w
(_ ________________________________________________)1 2904 1 1458 4631 t
(\347)1458 4751 w
(\347)1458 4818 w
(\347)1458 4938 w
(\347)1458 5058 w
(\347)1458 5178 w
(\347)1458 5298 w
(\347)1458 5418 w
(\347)1458 5538 w
(\347)1458 5658 w
(\347)1458 5778 w
(\347)1458 5898 w
(\347)1458 6018 w
(\347)1458 6138 w
11 B f
(Figure 8.)1 422 1 1539 6422 t
11 R f
(An integer programming formulation for the TSP.)6 2203 1 2017 6422 t
12 R f
( feasible solution to this)4 1228(Hopfield and Tank's algorithm attempted to find a good)8 2842 2 970 6830 t
( the)1 185(integer program by viewing)3 1365 2 720 6980 t
12 I f
(x)2308 6980 w
9 I f
(i j)1 57 1 2376 7004 t
12 R f
(as)2481 6980 w
12 I f
(neurons)2619 6980 w
12 R f
(that could take on arbitrary values in the)7 1996 1 3044 6980 t
( connected up with an inhibitory network that tried)8 2620( neurons were)2 714( The)1 267( 0 , 1 ].)4 260(interval [)1 459 5 720 7130 t
( of a surrogate)3 753(simultaneously to impose the constraints and to lower the cost)9 3190 2 720 7280 t
12 I f
(energy)4714 7280 w
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 86 86
%%Page: 87 87
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
87 pagesetup
12 R f
(- 87 -)2 260 1 2750 500 t
( optima for this energy function were found using a local optimization)11 3542(function. Local)1 778 2 720 870 t
( changed state so as to lower their contribution to the)10 2585(algorithm where individual neurons)3 1735 2 720 1020 t
( random starts were allowed.)4 1384( Multiple)1 476(total energy.)1 601 3 720 1170 t
( algorithms we have discussed in this chapter, Hopfield)8 2765(In the context of the other)5 1305 2 970 1356 t
( they regularly found optimal)4 1494( Although)1 535(and Tank's results were not at all promising.)7 2291 3 720 1506 t
( often failed even to converge to feasible solutions when)9 2776(tours for 10-city instances, they)4 1544 2 720 1656 t
12 I f
(N)720 1806 w
12 S f
(=)850 1806 w
12 R f
( more than)2 540(30, and the best solution they ever found on such an instance was still)13 3534 2 966 1806 t
(17)720 1956 w
12 I f
(%)840 1956 w
12 R f
( very sensitive to the connection)5 1683( their approach is)3 906( Furthermore,)1 716(above optimal.)1 740 4 995 1956 t
( the above quality were difficult for other researchers to)9 2886(weights, and even results of)4 1434 2 720 2106 t
( the computational require-)3 1366( round things off,)3 892( To)1 212(reproduce [Wilson & Pawley, 1988].)4 1850 4 720 2256 t
( are exorbitant.)2 732(ments of the approach)3 1079 2 720 2406 t
12 I f
(N)2595 2406 w
9 R f
(2)2690 2358 w
12 R f
(neurons are required, each connected to all the)7 2261 1 2779 2406 t
( fully parallel implementation would thus require)6 2487(others. A)1 489 2 720 2556 t
12 S f
(Q)3746 2556 w
12 R f
(\()3845 2556 w
12 I f
(N)3895 2556 w
9 R f
(4)3990 2508 w
12 R f
(\) hardware, while a)3 985 1 4055 2556 t
(sequential simulation would have running time)5 2263 1 720 2706 t
12 S f
(W)3013 2706 w
12 R f
(\()3115 2706 w
12 I f
(N)3165 2706 w
9 R f
(4)3260 2658 w
12 R f
(\).)3325 2706 w
( have tried many techniques to salvage this basic scheme.)9 2818(Subsequently, researchers)1 1252 2 970 2892 t
( energy function as for example in Brandt, Wang, and Laub)10 2920(These include modifying the)3 1400 2 720 3042 t
( optimiza-)1 498([1988], using simulated annealing to perform a discretized version of the local)11 3822 2 720 3192 t
(tion as in the)3 640 1 720 3342 t
12 I f
(Boltzmann machine)1 957 1 1397 3342 t
12 R f
( and replacing the)3 875(approach of Aarts and Korst [1989],)5 1774 2 2391 3342 t
12 I f
(N)720 3492 w
12 R f
(neurons representing)1 1030 1 856 3492 t
12 I f
(X)1942 3492 w
9 I f
(i)2030 3516 w
9 R f
(,)2062 3516 w
9 I f
(k)2092 3516 w
12 R f
(, 1)1 146 1 2142 3492 t
12 S f
(\243)2328 3492 w
12 I f
(k)2434 3492 w
12 S f
(\243)2527 3492 w
12 I f
(N)2633 3492 w
12 R f
(by a single)2 573 1 2769 3492 t
12 I f
(N)3399 3492 w
12 R f
(-dimensional)3479 3492 w
12 I f
(Potts neuron)1 645 1 4165 3492 t
12 R f
(and)4867 3492 w
(using)720 3642 w
12 I f
(mean field annealing)2 1035 1 1021 3642 t
12 R f
( of Peterson and S)4 910(, as in the approaches)4 1070 2 2056 3642 t
(. .)1 54 1 4036 3570 t
(oderburg [1989] and)2 1004 1 4036 3642 t
( although some of these)4 1166( Unfortunately,)1 770(Van den Bout and Miller [1989] \(see Chapter 7\).)8 2384 3 720 3792 t
( cities, the tour lengths obtained)5 1583(approaches led to feasible solutions for as many as 200)9 2737 2 720 3942 t
(seem to have been 8)4 1005 1 720 4092 t
12 I f
(%)1725 4092 w
12 R f
( easily dominated)2 867(or more above the Held-Karp bound and hence)7 2310 2 1863 4092 t
( although several of these)4 1260( Moreover,)1 571( algorithm of Section 3.)4 1172(by the \(much faster\) 2-Opt)4 1317 4 720 4242 t
( interconnections needed in the corre-)5 1891(approaches succeeded in reducing the number of)6 2429 2 720 4392 t
(sponding network from)2 1144 1 720 4542 t
12 S f
(Q)1902 4542 w
12 R f
(\()2001 4542 w
12 I f
(N)2051 4542 w
9 R f
(4)2146 4494 w
12 R f
(\) to)1 172 1 2211 4542 t
12 S f
(Q)2421 4542 w
12 R f
(\()2520 4542 w
12 I f
(N)2570 4542 w
9 R f
(3)2665 4494 w
12 R f
(\), their computational requirements still remain)5 2310 1 2730 4542 t
(far too great for instances of reasonable size.)7 2148 1 720 4692 t
( back is the integer programming formulation)6 2216(A key factor holding all these variants)6 1854 2 970 4878 t
( of a neural net's work be spent merely)8 1970(of Figure 8, which requires that a large portion)8 2350 2 720 5028 t
( to find optimal solutions to the TSP via)8 2032( trying)1 330( Researchers)1 651(getting a feasible solution.)3 1307 4 720 5178 t
( much more effective formulation, as depicted in)7 2414(polyhedral techniques have relied on a)5 1906 2 720 5328 t
( the variables)2 661( Here)1 302(Figure 9.)1 444 3 720 5478 t
12 I f
(x)2167 5478 w
9 I f
(i j)1 57 1 2235 5502 t
12 R f
(, 1)1 130 1 2302 5478 t
12 S f
(\243)2472 5478 w
12 I f
(i)2578 5478 w
12 S f
(<)2662 5478 w
12 I f
(j)2788 5478 w
12 S f
(\243)2862 5478 w
12 I f
(N)2968 5478 w
12 R f
( tour edges, and)3 793(, correspond to potential)3 1199 2 3048 5478 t
(we take)1 381 1 720 5628 t
12 I f
(x)1143 5628 w
9 I f
(i j)1 57 1 1211 5652 t
12 S f
(=)1328 5628 w
12 R f
( contains an edge between cities)5 1599(1 to imply that the tour)5 1168 2 1444 5628 t
12 I f
(c)4252 5628 w
9 I f
(i)4320 5652 w
12 R f
(and)4396 5628 w
12 I f
(c)4610 5628 w
9 I f
(j)4678 5652 w
12 R f
(. \(The)1 327 1 4713 5628 t
( linear pro-)2 538(Held-Karp lower bound on the optimal tour length is in fact the solution to the)14 3782 2 720 5778 t
( in which the integrality constraint is replaced by)8 2368(gramming relaxation of this formulation)4 1952 2 720 5928 t
(0)720 6078 w
12 S f
(\243)820 6078 w
12 I f
(x)926 6078 w
9 I f
(i j)1 57 1 994 6102 t
12 S f
(\243)1101 6078 w
12 R f
(1.\))1207 6078 w
( particular, there are an exponential)5 1816( In)1 183(This formulation has its own drawbacks.)5 2071 3 970 6264 t
(number of the middle)3 1045 1 720 6414 t
12 I f
(subtour elimination)1 949 1 1797 6414 t
12 R f
( proper)1 344(constraints, one for each of the possible)6 1918 2 2778 6414 t
(subsets)720 6564 w
12 I f
(S)1103 6564 w
12 R f
( algorithms based on the Figure 9 formulation normally begin)9 3025( neural net)2 517(. Thus)1 335 3 1163 6564 t
( algorithms typically use only)4 1468( These)1 356(simply by ignoring these constraints.)4 1816 3 720 6714 t
12 S f
(Q)4399 6714 w
12 R f
(\()4498 6714 w
12 I f
(N)4548 6714 w
9 R f
(3)4643 6666 w
12 R f
(\) hard-)1 332 1 4708 6714 t
(ware or sequential time, a significant improvement over the)8 3109 1 720 6864 t
12 S f
(Q)3889 6864 w
12 R f
(\()3988 6864 w
12 I f
(N)4038 6864 w
9 R f
(4)4133 6816 w
12 R f
(\) of the original)3 842 1 4198 6864 t
( that drop-)2 527( Note)1 306(Hopfield-Tank approach, although still impractical for large instances.)7 3487 3 720 7014 t
( collection of disjoint cycles is a feasible solu-)8 2235(ping the subtour constraints means that any)6 2085 2 720 7164 t
( the minimum)2 679( also means that)3 778( \(It)1 176(tion, not just Hamiltonian circuits through all the cities.)8 2687 4 720 7314 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 44 536 764
%%EndPage: 87 87
%%Page: 88 88
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
88 pagesetup
12 R f
(- 88 -)2 260 1 2750 500 t
(Minimize)1104 1175 w
9 I f
(i)1633 1295 w
9 S f
(=)1680 1295 w
9 R f
(1)1745 1295 w
17 S f
(S)1661 1211 w
9 I f
(N)1681 1055 w
(j)1839 1295 w
9 S f
(=)1879 1295 w
9 I f
(i)1944 1295 w
9 S f
(+)1991 1295 w
9 R f
(1)2056 1295 w
17 S f
(S)1920 1211 w
9 I f
(N)1940 1055 w
12 I f
(d)2111 1175 w
12 R f
(\()2181 1175 w
12 I f
(c)2231 1175 w
9 I f
(i)2299 1199 w
12 R f
(,)2344 1175 w
12 I f
(c)2384 1175 w
9 I f
(j)2452 1199 w
12 R f
(\))2497 1175 w
(.)2557 1139 w
12 I f
(x)2597 1175 w
9 I f
(i)2665 1199 w
9 R f
(,)2697 1199 w
9 I f
(j)2735 1199 w
12 R f
(Subject to)1 485 1 1104 1494 t
9 I f
(i)1704 1614 w
9 S f
(=)1751 1614 w
9 I f
( j)1 62(k or)1 149 2 1816 1614 t
9 S f
(=)2042 1614 w
9 I f
(k)2107 1614 w
17 S f
(S)1875 1530 w
12 I f
(x)2146 1494 w
9 I f
(i j)1 57 1 2214 1518 t
12 S f
(=)2341 1494 w
12 R f
(2, 1)1 210 1 2467 1494 t
12 S f
(\243)2717 1494 w
12 I f
(k)2823 1494 w
12 S f
(\243)2916 1494 w
12 I f
(N)3022 1494 w
12 R f
(,)3102 1494 w
(and)1404 1813 w
9 S f
(\357)1704 1948 w
9 I f
(S)1749 1933 w
9 S f
(\307)1801 1933 w
9 R f
({)1877 1933 w
9 I f
(i)1927 1933 w
9 R f
(,)1959 1933 w
9 I f
(j)1997 1933 w
9 R f
(})2029 1933 w
9 S f
(\357)2072 1948 w
(=)2117 1933 w
9 R f
(1)2182 1933 w
17 S f
(S)1915 1849 w
12 I f
(x)2236 1813 w
9 I f
(i j)1 57 1 2304 1837 t
12 S f
(\263)2421 1813 w
12 R f
( all)1 151(2, for)1 290 2 2537 1813 t
12 I f
(S)3008 1813 w
12 S f
(\315)3108 1813 w
12 R f
({ 1 , 2 ,... ,)5 408 1 3233 1813 t
12 I f
(N)3651 1813 w
12 R f
(} with 1)2 392 1 3741 1813 t
12 S f
(\243)4173 1813 w
(\357)4269 1833 w
12 I f
(S)4329 1813 w
12 S f
(\357)4389 1833 w
(<)4489 1813 w
12 I f
(N)4605 1813 w
12 R f
(,)4685 1813 w
(and)1404 2132 w
12 I f
(x)1704 2132 w
9 I f
(i j)1 57 1 1772 2156 t
12 S f
(\316)1879 2132 w
12 R f
( 1)1 150({ 0 , 1 } ,)5 346 2 2004 2132 t
12 S f
(\243)2540 2132 w
12 I f
(i)2646 2132 w
12 S f
(<)2730 2132 w
12 I f
(j)2856 2132 w
12 S f
(\243)2930 2132 w
12 I f
(N)3036 2132 w
12 S f
(_ ______________________________________________________________\347)1 3731 1 1044 2207 t
(\347)4775 2092 w
(\347)4775 1972 w
(\347)4775 1852 w
(\347)4775 1732 w
(\347)4775 1612 w
(\347)4775 1492 w
(\347)4775 1372 w
(\347)4775 1252 w
(\347)4775 1132 w
(\347)4775 1012 w
(_ ______________________________________________________________)1 3731 1 1044 892 t
(\347)1044 1012 w
(\347)1044 1127 w
(\347)1044 1247 w
(\347)1044 1367 w
(\347)1044 1487 w
(\347)1044 1607 w
(\347)1044 1727 w
(\347)1044 1847 w
(\347)1044 1967 w
(\347)1044 2087 w
(\347)1044 2207 w
11 B f
(Figure 9.)1 422 1 1428 2491 t
11 R f
(A better integer programming formulation for the TSP.)7 2425 1 1906 2491 t
12 R f
( efficiently by the classic)4 1283(cost solution can be computed exactly and)6 2150 2 720 2863 t
12 I f
(b-matching)4203 2863 w
12 R f
(tech-)4800 2863 w
( although neural net algorithms have generally)6 2315(niques of Edmonds and Johnson [1970],)5 2005 2 720 3013 t
( that of turning a disjoint collection of)7 1984( problem thus becomes)3 1175( The)1 267(ignored this fact.\))2 894 4 720 3163 t
(cycles into a tour.)3 855 1 720 3313 t
( in a Boltzmann machine implementation, use extra neurons)8 2921(Aarts and Korst [1989],)3 1149 2 970 3499 t
( Cardon,)1 422( Joppe,)1 379( optimal solutions correspond to connected graphs.)6 2502(to insure that locally)3 1017 4 720 3649 t
( second level of neurons that can)6 1664(and Bioche [1990] propose something similar, with a)7 2656 2 720 3799 t
( seems to have)3 719( approach)1 475( Neither)1 426(trigger changes to the external inputs for the first level.)9 2700 4 720 3949 t
( more effective \(if less neu-)5 1345( A)1 150( more than 30 cities, however.)5 1471(been tried on instances with)4 1354 4 720 4099 t
( classical patching algorithms of Karp [1977].)6 2309(ral\) approach seems to be to invoke the)7 2011 2 720 4249 t
(This was proposed and implemented by Xu and Tsai [1991], who were able to handle up)15 4320 1 720 4399 t
( to Karp's patching heuristic, Xu and Tsai per-)8 2350( switching)1 513( Before)1 401(to 150-city instances.)2 1056 4 720 4549 t
( energy function so)3 936(form five successive neural net runs, each adding penalty terms to the)11 3384 2 720 4699 t
( in effect)2 471( This)1 296( the subtours seen in the previous rounds.)7 2144(as to inhibit the creation of)5 1409 4 720 4849 t
( Figure 9 formulation, and it suc-)6 1684(implements some of the subtour constraints from the)7 2636 2 720 4999 t
( patched together, at)3 1016(ceeds in reducing the number of cycles that eventually need to be)11 3304 2 720 5149 t
(least for the still relatively small instances they consider.)8 2733 1 720 5299 t
( are not impressive except perhaps in the context of other)10 2830(Unfortunately, the results)2 1240 2 970 5485 t
( concerns a further hybridization)4 1572( and Tsai's main proposal thus)5 1483( Xu)1 208(neural net algorithms.)2 1057 4 720 5635 t
( tours for)2 453(with classical algorithmic techniques: To use the tours they generate as starting)11 3867 2 720 5785 t
( claim that one run of 2-Opt \(Lin-Kernighan\) using their)9 2743( They)1 311(2-Opt and Lin-Kernighan.)2 1266 3 720 5935 t
( on average than the best of 25 \(20\))8 1748(method of starting tour generation yields better tours)7 2572 2 720 6085 t
( that as)2 353( however,)1 479( Note,)1 330(random starts of the corresponding local optimization algorithm.)7 3158 4 720 6235 t
( by Nearest)2 580(shown in Section 3.2, random starts are already significantly outperformed)9 3740 2 720 6385 t
( their data to a form compara-)6 1447( one converts)2 646( If)1 143(Neighbor and Greedy starts in this context.)6 2084 4 720 6535 t
( random Euclidean instances)3 1405(ble to that given in this chapter, it appears that for 100-city)11 2915 2 720 6685 t
( better tours than those for an average Greedy-start 2-Opt)9 2841(they do not on average obtain)5 1479 2 720 6835 t
( when they use their version of Lin-Kernighan)7 2287( Moreover,)1 572( the best of 25.)4 747(run, much less)2 714 4 720 6985 t
( do not even beat the average we report for a single)11 2511(as post-processor, their average tours)4 1809 2 720 7135 t
( suggests an error in their implementation of Lin-Kernighan.)8 2909( This)1 274(3-Opt run.)1 500 3 720 7285 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 88 88
%%Page: 89 89
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
89 pagesetup
12 R f
(- 89 -)2 260 1 2750 500 t
( algorithms based on the integer programming formula-)7 2725(Nevertheless, for neural net)3 1345 2 970 870 t
( and 9, it appears that hybrids with classical techniques are the only way)13 3471(tions of Figures 8)3 849 2 720 1020 t
( the substantial computational)3 1463( Given)1 360( wants to obtain reasonably good tours.)6 1928(to go if one)3 569 4 720 1170 t
( these approaches and the difficulties that many of them have with even)12 3552(requirements of)1 768 2 720 1320 t
( as)1 138(maintaining feasibility)1 1096 2 720 1470 t
12 I f
(N)1992 1470 w
12 R f
(grows, hybrid approaches also appear to be the only way to)10 2930 1 2110 1470 t
( this as motivation, Foo and Szu [1989])7 1961( With)1 310( handle large instances.)3 1148(go if one wants to)4 901 4 720 1620 t
( Section 3.4.)2 655(propose a hybrid with the geometric partitioning schemes mentioned in)9 3665 2 720 1770 t
( a hybrid algorithm,)3 1001(Unfortunately, it would appear that once one has constructed such)9 3319 2 720 1920 t
( both in time and tour quality by simply)8 2026(one can always obtain still better performance)6 2294 2 720 2070 t
(removing the neural component entirely and replacing it with single-run 3-Opt.)10 3810 1 720 2220 t
( next section we will consider approaches that for geometric instances run)11 3774(In the)1 296 2 970 2406 t
( than the approaches based on integer programming formula-)8 3016(considerably more quickly)2 1304 2 720 2556 t
(tions, and hence can be directly applied to significantly larger instances.)10 3466 1 720 2706 t
14 B f
( Neural Networks)2 1057(7.2. Geometric)1 908 2 720 3036 t
12 R f
( as a set of)4 595(In a typical geometric neural network, the neurons can be viewed)10 3347 2 720 3259 t
12 I f
(M)4714 3259 w
12 S f
(\263)4854 3259 w
12 I f
(N)4960 3259 w
12 R f
( a regular)2 455(points in the plane, initially positioned as the vertices of)9 2714 2 720 3409 t
12 I f
(M)3920 3409 w
12 R f
(-gon in the middle of)4 1020 1 4020 3409 t
( is to iteratively move these)5 1343( goal)1 239( The)1 248(the instance, as shown on the left side of Figure 10.)10 2490 4 720 3559 t
(vertices toward cities, thus deforming the)5 2031 1 720 3709 t
12 I f
(M)2789 3709 w
12 R f
( This)1 281( on the right side of Figure 10.)7 1512(-gon as)1 358 3 2889 3709 t
( the)1 186(process continues until)2 1119 2 720 3859 t
12 I f
(M)2064 3859 w
12 R f
(-gon looks like a tour, with each city matched with one of)11 2876 1 2164 3859 t
(the)720 4009 w
12 I f
(M)909 4009 w
12 R f
( lying on the straight line between the)7 1891(-gon's vertices, and each unmatched vertex)5 2140 2 1009 4009 t
( it on the)3 431(matched vertices immediately before and after)5 2238 2 720 4159 t
12 I f
(M)3421 4159 w
12 R f
( are two basic vari-)4 928(-gon. There)1 591 2 3521 4159 t
(ants on this theme, the)4 1092 1 720 4309 t
12 I f
(elastic net)1 495 1 1845 4309 t
12 R f
(of Durbin and Willshaw [1987] and the)6 1906 1 2372 4309 t
12 I f
(self-organizing)4310 4309 w
(map)720 4459 w
12 R f
(derived from ideas of Kohonen [1988])5 1850 1 956 4459 t
cleartomark
saveobj restore
end
%%BeginDocument: Fig10b.ps
%ps_include: begin
save
/ed {exch def} def
{} /showpage ed
{} /copypage ed
{} /erasepage ed
{} /letter ed
currentdict /findfont known systemdict /findfont known and {
	/findfont systemdict /findfont get def
} if
36 dict dup /PS-include-dict-dw ed begin
/context ed
count array astore /o-stack ed
%ps_include: variables begin
/llx 40 def
/lly 515 def
/urx 507 def
/ury 741 def
/w 0 def
/o 0 def
/s 0 def
/cx 2880 def
/cy -5839 def
/sx 4320 def
/sy 2160 def
/ax 0.5 def
/ay 0.5 def
/rot 0 def
%ps_include: variables end
{llx lly urx ury} /bbox ed
{newpath 2 index exch 2 index exch dup 6 index exch
 moveto 3 {lineto} repeat closepath} /boxpath ed
{dup mul exch dup mul add sqrt} /len ed
{2 copy gt {exch} if pop} /min ed
{2 copy lt {exch} if pop} /max ed
{transform round exch round exch A itransform} /nice ed
{6 array} /n ed
n defaultmatrix n currentmatrix n invertmatrix n concatmatrix /A ed
urx llx sub 0 A dtransform len /Sx ed
0 ury lly sub A dtransform len /Sy ed
llx urx add 2 div lly ury add 2 div A transform /Cy ed /Cx ed
rot dup sin abs /S ed cos abs /C ed
Sx S mul Sy C mul add /H ed
Sx C mul Sy S mul add /W ed
sy H div /Scaley ed
sx W div /Scalex ed
s 0 eq {Scalex Scaley min dup /Scalex ed /Scaley ed} if
sx Scalex W mul sub 0 max ax 0.5 sub mul cx add /cx ed
sy Scaley H mul sub 0 max ay 0.5 sub mul cy add /cy ed
urx llx sub 0 A dtransform exch atan rot exch sub /rot ed
n currentmatrix initgraphics setmatrix
cx cy translate
Scalex Scaley scale
rot rotate
Cx neg Cy neg translate
A concat
bbox boxpath clip newpath
w 0 ne {gsave bbox boxpath 1 setgray fill grestore} if
end
gsave
%ps_include: inclusion begin
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/RR1 {
pbox top get pbox bottom get sub abs
pbox left get pbox right get sub abs
2 copy lt {
Min
2 div dup dup dup
pbox left get add pbox left 3 -1 roll put
pbox right get exch sub pbox right 3 -1 roll put
pbox left get pbox bottom get moveto
pbox right get 0 3 -1 roll 90 -90 arcn
pbox left get 0 3 -1 roll -90 90 arcn closepath
} {
Min
2 div dup dup dup
pbox bottom get exch sub pbox bottom 3 -1 roll put
pbox top get add pbox top 3 -1 roll put
pbox left get pbox bottom get moveto
pbox left get add pbox top get
2 index
180 0 arc
dup pbox left get add pbox bottom get
3 -1 roll 0 180 arc
closepath
} ifelse
} bind def
/RR2 { 
dup dup dup dup dup dup dup dup 
pbox top get add pbox top 3 -1 roll put 
pbox left get add pbox left 3 -1 roll put 
pbox bottom get exch sub pbox bottom 3 -1 roll put 
pbox right get exch sub pbox right 3 -1 roll put 
pbox bottom get add pbox left get exch moveto 
pbox right get pbox bottom get 3 -1 roll 90 0 arcn 
pbox right get pbox top get 3 -1 roll  0 270 arcn 
pbox left get pbox top get 3 -1 roll  270 180 arcn 
pbox left get pbox bottom get 3 -1 roll 180 90 arcn closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/A1 {msave
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 5 -1 roll -90 add 5 -1 roll -90 add arcn
mrestore} bind def
/A2 {msave 0 0 moveto A1 closepath mrestore} def


/BitMap {
 /buffer ^1 string def
 ^2 ^5 2 div add 792 ^3 sub ^6 2 div add translate
 ^4 57.3 mul rotate
  0 ^5 2 div sub 0 ^6 2 div sub translate
 ^5 ^6 scale
 ^5 ^6 ^7 [^5 0 0 -^6 0 ^6] {currentfile buffer readhexstring pop} image
}bind def 
/note {
gsave pbox astore pop
0 792 translate 1 -1 scale CTM currentmatrix pop exch translate
pbox right get pbox left get sub 2 div
pbox bottom get pbox top get sub 2 div
translate 57.3 mul rotate setlinewidth
noteBody aload pop moveto
noteBody length 2 div 1 sub cvi{lineto}repeat
dogEar aload pop moveto
dogEar length 2 div 1 sub cvi{lineto}repeat
0.992 0.975 0.507 setrgbcolor gsave fill grestore
gsave newpath
stickem aload pop moveto
stickem length 2 div 1 sub cvi{lineto}repeat
0.760 0.760 0.760 setrgbcolor fill 
grestore
0 0 0 setrgbcolor stroke
noteShadow aload pop moveto
noteShadow length 2 div 1 sub cvi{lineto}repeat
dogEarShadow aload pop moveto
dogEarShadow length 2 div 1 sub cvi{lineto}repeat
0 0 0 setrgbcolor gsave stroke grestore fill
grestore
}bind def


 /redTbl4   [0 0 1 1 1 1 2 2 3 3 3 4 4 4 5 5] def
 /greenTbl4 [0 1 1 2 2 3 3 4 4 5 6 6 7 7 7 8] def
 /blueTbl4  [0 0 0 0 1 1 1 1 1 1 1 1 1 2 2 2] def
 /RGB4toGray4 {
	currentfile RGBBuf readhexstring pop pop
	/i 0 def
	/j 0 def
	grayBuf length {
		RGBBuf i get dup
		-4 bitshift redTbl4 exch get
		exch 15 and greenTbl4 exch get add
		RGBBuf i 1 add  get dup
		-4 bitshift blueTbl4 exch get 3 -1 roll add  4 bitshift
		exch 15 and redTbl4 exch get
		RGBBuf i 2 add  get dup
		-4 bitshift greenTbl4 exch get 3 -1 roll add
		exch 15 and blueTbl4 exch get add or
		grayBuf j 3 -1 roll put
		/i i 3 add def
		/j j 1 add def
	} repeat
	grayBuf
} bind def
/RGB8toGray8 {
	currentfile RGBBuf readhexstring pop pop
	/i 0 def
	/j 0 def
	grayBuf length {
		RGBBuf i get 0.33 mul
		RGBBuf i 1 add get 0.55 mul add
		RGBBuf i 2 add get 0.12 mul add round cvi
		grayBuf j 3 -1 roll put
		/i i 3 add def
		/j j 1 add def
	} repeat
	grayBuf
} bind def
/RGB24toGray8 {RGB8toGray8} bind def
 /redTbl2   [0 0 1 1] def
 /greenTbl2 [0 1 1 2] def
 /blueTbl2  [0 0 0 0] def
 /RGB2toGray2 {
	currentfile RGBBuf readhexstring pop pop
	/i 0 def
	/j 0 def
	grayBuf length {
		RGBBuf i get dup dup dup
		-6 bitshift redTbl2 exch get
		exch -4 bitshift 3 and
		greenTbl2 exch get add
		exch -2 bitshift 3 and
		blueTbl2 exch get add
		6 bitshift exch 3 and
		redTbl2 exch get
		RGBBuf i 1 add  get dup dup dup
		-6 bitshift greenTbl2 exch get
		exch -4 bitshift 3 and
		blueTbl2 exch get add
		4 -1 roll add
		4 bitshift 4 -1 roll or
		3 1 roll -2 bitshift 3 and
		redTbl2 exch get exch 3 and
		greenTbl2 exch get add
		RGBBuf i 2 add  get dup dup dup
		-6 bitshift blueTbl2 exch get
		5 -1 roll add
		2 bitshift 5 -1 roll or
		4 1 roll -4 bitshift 3 and
		redTbl2 exch get
		exch -2 bitshift 3 and
		greenTbl2 exch get add
		exch 3 and
		greenTbl2 exch get add or
		grayBuf j 3 -1 roll put
		/i i 3 add def
		/j j 1 add def
	} repeat
	grayBuf
} bind def
/RGB1toGray1 {
	currentfile RGBBuf readhexstring pop pop
	/i 0 def
	/j 0 def
	grayBuf length {
		RGBBuf i get dup dup
		1 bitshift 128 and exch
		3 bitshift 64 and or exch
		5 bitshift 32 and or
		RGBBuf i 1 add get dup
		-1 bitshift 16 and exch
		1 bitshift 8 and or or
		RGBBuf i 2 add get dup dup
		-5 bitshift 4 and exch
		-3 bitshift 2 and or exch
		-1 bitshift 1 and or or
		/i i 3 add def
		/j j 1 add def
	} repeat
	grayBuf
} bind def
/RGB16toGray8 {RGB8toGray8} bind def
/ScalePoint {
	0 0
	4 -2 roll
	0 0 1 1
	8 4 roll GetBoxesRatio scale
} bind def
/PointDict 4 dict def
PointDict begin
/XPoint {
		-.5 .5 moveto
		.5 -.5 lineto
		.5 .5 moveto
		-.5 -.5 lineto
	} bind def
	/DiamondPoint {
		0.0 .5 moveto
		.5 0.0 lineto
		0.0 -0.5 lineto
		-.5 0.0 lineto
		closepath
	} bind def
	/PlusPoint {
		0.0 .5 moveto
		0.0 -.5 lineto
		-.5 0.0 moveto
		.5 0.0 lineto
	} bind def
	/SquarePoint {
		-.5 .5 moveto
		.5 .5 lineto
		.5 -.5 lineto
		-.5 -.5 lineto
		closepath
	} bind def
end
/DrawPoint {
	gsave
		[] 0 setdash
		0 setlinecap
		translate
		msave
			ScalePoint
			PointDict exch get exec
		mrestore
		1.0 setlinewidth stroke
	grestore
} bind def
/Subscriber { 
 msave 
 R PC PF LC SS newpath
 mrestore 
} bind def 
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


/rampdelta {
/len 0 3 -1 roll add def
/i2 0 3 -1 roll add def
/i1 0 3 -1 roll add def
/nRampSteps len cellPenW div cvi 1 add dup 512 gt {pop 512} if def
/rampPenW len nRampSteps div def
rampColors i1 get aload pop c1 astore pop
rampColors i2 get aload pop c2 astore pop
c2 0 get c1 0 get sub nRampSteps div d 0 3 -1 roll put
c2 1 get c1 1 get sub nRampSteps div d 1 3 -1 roll put
c2 2 get c1 2 get sub nRampSteps div d 2 3 -1 roll put
d aload pop
} bind def
/adddelta {
d astore pop
 mycurrentrgbcolor c1 copy pop
c1 0 get d 0 get add c2 0 3 -1 roll put
c1 1 get d 1 get add c2 1 3 -1 roll put
c1 2 get d 2 get add c2 2 3 -1 roll put
c2 aload pop setrgbcolor
c2 mycurrentrgbcolor copy pop
} bind def
/rampline {
segbox ulx get rampPenW add segbox ulx 3 -1 roll put
segbox llx get rampPenW add segbox llx 3 -1 roll put
segbox ulx get segbox uly get moveto
segbox llx get segbox lly get lineto
delta aload pop adddelta stroke
}bind def
/slantrampseg {
gsave newpath
segbox ulx get segbox urx get sub abs
rampdelta delta astore pop
segbox ulx get rampPenW .5 mul sub segbox ulx 3 -1 roll put
segbox llx get rampPenW .5 mul sub segbox llx 3 -1 roll put
rampColors exch get aload mycurrentrgbcolor copy pop setrgbcolor
rampPenW setlinewidth nRampSteps {rampline} repeat
grestore
}bind def
/flipramp {
rampColors 0 get rampColors 3 get rampColors 0 3 -1 roll put rampColors 3 3 -1 roll put
rampColors 1 get rampColors 2 get rampColors 1 3 -1 roll put rampColors 2 3 -1 roll put
} bind def
/leftrbox {
rbox segbox copy pop	
rbox urx get rbox ulx get sub
flipRatio mul dup 
segbox ulx get add segbox urx 3 -1 roll put
segbox llx get add segbox lrx 3 -1 roll put
} bind def
/rightrbox {
rbox segbox copy pop	
rbox urx get rbox ulx get sub
flipRatio mul dup 
segbox ulx get add segbox ulx 3 -1 roll put
segbox llx get add segbox llx 3 -1 roll put
} bind def
/drawslantramp {
segbox urx get segbox ulx get sub 3 div dup dup dup dup dup dup dup dup dup
segbox ulx get add segbox urx 3 -1 roll put
segbox llx get add segbox lrx 3 -1 roll put
segbox aload pop
0 0 1 slantrampseg
segbox astore pop
segbox ulx get add segbox ulx 3 -1 roll put
segbox llx get add segbox llx 3 -1 roll put
segbox urx get add segbox urx 3 -1 roll put
segbox lrx get add segbox lrx 3 -1 roll put
segbox aload pop
1 1 2 slantrampseg
segbox astore pop
segbox ulx get add segbox ulx 3 -1 roll put
segbox llx get add segbox llx 3 -1 roll put
segbox urx get add segbox urx 3 -1 roll put
segbox lrx get add segbox lrx 3 -1 roll put
2 2 3 slantrampseg
}bind def
/tan {
dup sin exch cos div
}bind def
/rampbox {
pbox top get dup rbox uly 3 -1 roll put rbox ury 3 -1 roll put
pbox left get dup rbox ulx 3 -1 roll put rbox llx 3 -1 roll put
pbox bottom get dup rbox lly 3 -1 roll put rbox lry 3 -1 roll put
pbox right get dup rbox urx 3 -1 roll put rbox lrx 3 -1 roll put
}bind def
/LoadSegBox {
4 copy
segbox llx 6 -1 roll put
segbox lly 5 -1 roll put
segbox lrx 4 -1 roll put
segbox lry 6 -1 roll put
segbox urx 5 -1 roll put
segbox ury 3 -1 roll put
segbox ulx 4 -1 roll put
segbox uly 3 -1 roll put
} bind def
/TransToCenter {
gsave
flattenpath
pathbbox
grestore
2 index
sub 2.0 div exch
3 index sub 2.0 div
4 -1 roll add
3 1 roll add
translate
} bind def
/RotRampGrad {
gsave
TransToCenter
-1.0 mul 180.0 add rotate
flattenpath
pathbbox 
clip
newpath
LoadSegBox
flipRatio 1 lt dup{flipramp}if flipRatio 0 gt and
{
/flipRatio 1.0 flipRatio sub def
segbox rbox copy pop leftrbox drawslantramp flipramp rightrbox drawslantramp
}
{drawslantramp} ifelse
grestore
} bind def
/bbg {
pbox exch get
} bind def
/DR {		% Directional ramp
/workingMatrix mstore def
objectCord setmatrix
flipramp
gsave
flattenpath pathbbox
grestore
pbox bottom 3 -1 roll put pbox right 3 -1 roll put pbox top 3 -1 roll put pbox left 3 -1 roll put
rampAngle RotRampGrad
RF
workingMatrix setmatrix
}bind def
/ramparc {
gsave
circum rampdelta delta astore pop
/rampPenW 60.0 nRampSteps div def
/ang1 exch rampAngle sub def 
/ang2 rampPenW ang1 add def 
rampColors exch get aload mycurrentrgbcolor copy pop setrgbcolor 1 setlinewidth
nRampSteps {ramparcseg}repeat
grestore
}bind def
/ramparcseg {
newpath
rampcenter aload pop moveto
rampcenter aload pop rampradius ang2 ang1 arcn fill
/ang1 ang2 def 
/ang2 ang2 rampPenW add def
delta aload pop adddelta
}bind def
/GetRadius {
rbox urx get rbox llx get sub 2 div rampcenter 0 get abs add dup mul
rbox lly get rbox ury get sub 2 div rampcenter 1 get abs add dup mul
add sqrt
} bind def
/circularRamp {
rampbox
/rampradius GetRadius def
CalcCrcm
flipramp
0 0 0 1 ramparc
1 60 1 2 ramparc
2 120 2 3 ramparc
flipramp
0 180 0 1 ramparc
1 240 1 2 ramparc
2 300 2 3 ramparc
}bind def
/GetCircumf {
2.0 mul 3.1415926 mul
} bind def
/CalcCrcm {
rampradius GetCircumf
/circum exch 6.0 div def
} bind def
/CR {
gsave
clip
MTC currentmatrix pop
CTM setmatrix
flattenpath
pathbbox pbox bottom 3 -1 roll put pbox right 3 -1 roll put pbox top 3 -1 roll put pbox left 3 -1 roll put
pbox left get pbox right get sub abs 2 div 
pbox left get add rampcenter 0 get add rampcenter 0 3 -1 roll put
pbox top get pbox bottom get sub abs 2 div
pbox top get add rampcenter 1 get add rampcenter 1 3 -1 roll put
circularRamp
MTC setmatrix
grestore
RF
}bind def
/SBR {
gsave
clip
/workingMatrix mstore def
objectCord setmatrix
flattenpath
/BaseBox pathbbox 4 array astore def
/len BaseBox 2 get BaseBox 0 get sub dup mul
BaseBox 3 get BaseBox 1 get sub dup mul
add sqrt
12.0 div
def
/EndBox
BaseBox aload pop
3 -1 roll sub
3 1 roll
exch sub
/dbx exch def
/dby exch def
BaseBox aload pop pop pop
/blly exch def
/bllx exch def
sbox 0 get 100.0 div dby mul blly add
sbox 1 get 100.0 div dbx mul bllx add
sbox 2 get 100.0 div dby mul blly add
sbox 3 get 100.0 div dbx mul bllx add
exch
4 -2 roll
exch
4 -2 roll
4 array astore
def
BaseBox EndBox ShapeBurst
workingMatrix setmatrix
grestore
} bind def
/GetBoxCenter {
2 index
sub 2.0 div
3 -1 roll add
3 1 roll
1 index sub
2.0 div add
exch
} bind def
/GetInterBox {
/boxInter exch def
4 1 7 {
-1 roll
7 index
} for
sub boxInter mul
8 -1 roll add
7 1 roll
sub boxInter mul
7 -1 roll add
6 1 roll
sub boxInter mul
6 -1 roll add
5 1 roll
sub boxInter mul
5 -1 roll add
4 1 roll
} bind def
/GetBoxCenterDeltas {
GetBoxCenter
6 2 roll
GetBoxCenter
3 -1 roll exch sub
3 1 roll sub
exch
} bind def
/GetBoxCornerDeltas {
pop pop
4 2 roll pop pop
3 -1 roll sub
3 1 roll exch sub
exch
} bind def
/getpath {
/k 0 def
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{}pathforall
/pfa k array def
/k 0 def
{{moveto} 3 array astore pfa k 3 -1 roll put /k k 1 add def}
{{lineto} 3 array astore pfa k 3 -1 roll put /k k 1 add def}
{{curveto} 7 array astore pfa k 3 -1 roll put /k k 1 add def}
{}pathforall
}bind def
/ShapeBurst {
getpath
newpath
/SBERect exch 4 array copy def
/SBBRect exch 4 array copy def
/interRect1 SBBRect aload pop SBERect aload pop .3333333 GetInterBox 4 array astore def
/interRect2 SBBRect aload pop SBERect aload pop .6666666 GetInterBox 4 array astore def
0 0 1 SBBRect interRect1 ShapeBurstSeg
msave
interRect1 0 get interRect1 1 get translate
SBBRect aload pop interRect1 aload pop GetBoxesRatio scale
SBBRect 0 get -1.0 mul SBBRect 1 get -1.0 mul translate
1 1 2 interRect1 interRect2 ShapeBurstSeg
mrestore
msave
interRect2 0 get interRect2 1 get translate
SBBRect aload pop interRect2 aload pop GetBoxesRatio scale
SBBRect 0 get -1.0 mul SBBRect 1 get -1.0 mul translate
2 2 3 interRect2 SBERect ShapeBurstSeg
mrestore
} bind def
/ShapeBurstSeg {
/sbr1 exch 4 array copy def
/sbr0 exch 4 array copy def
/blx sbr0 0 get def
/bly sbr0 1 get def
len rampdelta delta astore pop
sbr0 aload pop sbr1 aload pop GetBoxesRatio
/ratioY exch def
/ratioX exch def
sbr0 aload pop sbr1 aload pop GetBoxCornerDeltas
/dlly exch nRampSteps div def
/dllx exch nRampSteps div def
/scaleStepX 1.0 ratioX sub nRampSteps div def
/scaleStepY 1.0 ratioY sub nRampSteps div def
/currentScaleX 1.0 scaleStepX sub def
/currentScaleY 1.0 scaleStepY sub def
/translationX blx dllx add def
/translationY bly dlly add def
/currentScaleX 1.0  def
/currentScaleY 1.0  def
/translationX blx def
/translationY bly def
rampColors exch get aload mycurrentrgbcolor copy pop setrgbcolor
nRampSteps {
msave
translationX translationY translate
currentScaleX currentScaleY scale
blx -1.0 mul bly -1.0 mul translate
pfa {aload pop exec} forall fill
delta aload pop adddelta
/translationX translationX dllx add def
/translationY translationY dlly add def
/currentScaleX currentScaleX scaleStepX sub def
/currentScaleY currentScaleY scaleStepY sub def
mrestore
} repeat
msave
translationX translationY translate
currentScaleX currentScaleY scale
blx -1.0 mul bly -1.0 mul translate
pfa {aload pop exec} forall fill
mrestore
} bind def
initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 60.746 54.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 63.269 56.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 200.746 182.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 203.269 184.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 249.746 73.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 252.269 75.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 67.746 113.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 70.269 115.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 171.746 82.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 174.269 84.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 114.746 108.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 117.269 110.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 157.746 240.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 160.269 242.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 256.746 163.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 259.269 165.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 58.746 195.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 61.269 197.921 0.000 0.000 2.250 2.250 rect
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
1.000 0 126.546 140.675 0.000 0.000 49.203 49.203
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[24.554 0.000] CP
[34.656 2.046] CP
[42.992 8.156 ] CP
[48.160 17.136 ] CP
[49.203 27.441 ] CP
[46.019 37.292 ] CP
[39.136 45.019 ] CP
[29.714 49.203 ] CP
[19.363 49.203 ] CP
[10.003 45.019 ] CP
[3.125 37.292 ] CP
[0.000 27.441 ] CP
[0.996 17.136 ] CP
[6.156 8.156 ] CP
[14.453 2.046 ] CP
[14.453 2.046 24.554 0.000 24.554 0.000] CP
closepath
/useClip true def
PC PF
LC SS
saveobj restore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 127.234 174.539 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 133.621 182.328 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 141.718 186.695 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 151.839 187.933 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 161.582 184.972 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 169.933 177.539 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 125.062 163.925 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 141.921 140.332 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 152.351 139.179 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 162.222 142.339 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 127.320 153.355 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 133.371 145.078 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 170.105 149.378 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 173.699 158.132 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 173.906 168.683 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 60.746 299.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 63.269 301.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 200.746 427.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 203.269 429.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 249.746 318.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 252.269 320.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 67.746 358.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 70.269 360.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 171.746 327.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 174.269 329.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 114.746 353.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 117.269 355.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 157.746 485.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 160.269 487.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 256.746 408.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 259.269 410.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {1.000 1.000 1.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.250 0 58.746 440.398 0.000 0.000 7.296 7.296 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.500 4.712 61.269 442.921 0.000 0.000 2.250 2.250 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 75.359 400.539 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 99.964 450.984 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 79.937 430.539 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 128.839 460.714 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 164.488 457.847 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 179.933 432.539 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 85.281 373.988 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 143.035 361.335 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 176.351 353.296 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 203.285 344.777 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 89.238 344.273 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 114.503 375.875 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 227.949 353.628 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 233.574 392.039 0.000 0.000 3.375 3.375 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PC {0.000 0.000 0.000 setrgbcolor } def
/PF {gsave fill grestore} def
0.750 4.712 198.187 408.996 0.000 0.000 3.375 3.375 rect
/saveobj save def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {} def
/PC {} def
1.000 0 76.671 345.238 0.000 0.000 159.167 117.472
pbox astore pop
0 792 translate 1 -1 scale exch translate pop CTM currentmatrix pop
/objectCord mstore def
pbox bbox copy pop
/CP {aload pop moveto /CP {aload length 2 eq {lineto}{curveto}ifelse} bind def} bind def
[0.000 13.898] CP
[31.386 10.312] CP
[57.390 0.000 ] CP
[87.433 4.933 ] CP
[108.058 25.554 ] CP
[117.472 54.250 ] CP
[114.335 90.121 ] CP
[89.226 104.917 ] CP
[65.015 123.300 ] CP
[48.871 159.167 ] CP
[9.867 152.890 ] CP
[0.898 128.230 ] CP
[9.867 101.332 ] CP
[17.937 68.152 ] CP
[32.730 39.457 ] CP
[32.730 39.457 0.000 13.898 0.000 13.898] CP
closepath
/useClip true def
PC PF
LC SS
saveobj restore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {} def
/PC {} def
0.250 0 51.500 41.000 0.000 0.000 225.000 220.000 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC {0.000 0.000 0.000 setrgbcolor } def
/PF {} def
/PC {} def
0.250 0 51.500 286.000 0.000 0.000 225.000 220.000 rect
end
%ps_include: inclusion end
grestore
PS-include-dict-dw begin
o 0 ne {gsave A defaultmatrix /A ed llx lly nice urx ury nice
	initgraphics 0.1 setlinewidth boxpath stroke grestore} if
clear o-stack aload pop
context end restore
%ps_include: end
%%EndDocument
DpostDict begin
/saveobj save def
mark
11 B f
(Figure 10.)1 477 1 1110 7106 t
11 R f
(A geometry-based neural net at the start and middle of an execution.)11 3007 1 1643 7106 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 65 536 764
%%EndPage: 89 89
%%Page: 90 90
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
90 pagesetup
12 R f
(- 90 -)2 260 1 2750 500 t
14 I f
(Elastic Nets)1 674 1 720 870 t
12 R f
(In the Durbin and Willshaw elastic net approach, each iteration of the algorithm simulta-)13 4320 1 720 1093 t
( of all the vertices \(and hence can be executed in parallel if)12 2888(neously updates the positions)3 1432 2 720 1243 t
( determines its new location depend-)5 1806( an iteration, each vertex independently)5 1930(desired\). In)1 584 3 720 1393 t
( current position, the locations of the cities, the positions of the two neighboring)13 3867(ing on its)2 453 2 720 1543 t
12 I f
(M)720 1693 w
12 R f
(-gon vertices, and a control parameter)5 1956 1 820 1693 t
12 I f
(K)2833 1693 w
12 R f
( The)1 273(that is reduced after each iteration.)5 1797 2 2970 1693 t
( pulls the vertices toward)4 1209( first force)2 503( The)1 247(motion of the vertices is governed by two forces.)8 2361 4 720 1843 t
(the cities, with the relative attraction of the nearer cities growing stronger as)12 4036 1 720 1993 t
12 I f
(K)4817 1993 w
12 R f
(is)4959 1993 w
( are)1 195( Ties)1 286( is what drives the vertices to match up with particular cities.)11 3136(reduced. This)1 703 4 720 2143 t
(avoided by choosing)2 1004 1 720 2293 t
12 I f
(M)1759 2293 w
12 R f
(to be a sufficiently large multiple of)6 1762 1 1894 2293 t
12 I f
(N)3691 2293 w
12 R f
( taking advantages)2 906(and by)1 328 2 3806 2293 t
( unparameterized force pulls each vertex)5 1965( second,)1 397( This)1 278(of side-effects of the second force.)5 1680 4 720 2443 t
( locations of its two neighboring vertices in the)8 2314(toward the current)2 890 2 720 2593 t
12 I f
(M)3960 2593 w
12 R f
( thus acts to)3 590(-gon. It)1 390 2 4060 2593 t
(keep the perimeter of the)4 1221 1 720 2743 t
12 I f
(M)1976 2743 w
12 R f
( appropriately balancing these two forces, one)6 2235( By)1 204(-gon short.)1 525 3 2076 2743 t
( city eventually is matched to a vertex of the)9 2188(can insure that each)3 965 2 720 2893 t
12 I f
(M)3909 2893 w
12 R f
(-gon and that no ver-)4 1031 1 4009 2893 t
(tex is matched to more than one city [Durbin, Szeliski, & Yuille, 1989], [Simmen, 1991].)14 4296 1 720 3043 t
( sequential implementation of the elastic)5 2030(As described by Durbin and Willshaw, a)6 2040 2 970 3229 t
(net algorithm would take)3 1218 1 720 3379 t
12 S f
(Q)1972 3379 w
12 R f
(\()2071 3379 w
12 I f
(N)2121 3379 w
12 R f
( their case, this meant an)5 1204( In)1 163( iteration.)1 465(\) time per vertex per)4 997 4 2211 3379 t
(overall time of)2 747 1 720 3529 t
12 S f
(W)1516 3529 w
12 R f
(\()1618 3529 w
12 I f
(N)1668 3529 w
9 R f
(3)1763 3481 w
12 R f
( typically performed was a)4 1361(\) since the number of iterations they)6 1851 2 1828 3529 t
(large multiple of)2 807 1 720 3679 t
12 I f
(N)1559 3679 w
12 R f
( instance they could test,)4 1190( were thus constrained as to the largest)7 1873(. They)1 338 3 1639 3679 t
( com-)1 281( their only)2 501( Furthermore,)1 694(and they considered no instance with more than 100 cities.)9 2844 4 720 3829 t
( Nevertheless,)1 722( annealing algorithm of unknown quality.)5 2057(parisons were with a simulated)4 1541 3 720 3979 t
( get some idea of how)5 1142(since they concentrated on random Euclidean instances, we can)8 3178 2 720 4129 t
( the elastic net)3 761( 50-city random Euclidean instances,)4 1875( For)1 251(their performance stacks up.)3 1433 4 720 4279 t
(approach averaged 3)2 999 1 720 4429 t
12 I f
(%)1719 4429 w
12 R f
( This)1 279( the best simulated annealing solutions they saw.)7 2381(worse than)1 527 3 1853 4429 t
(is clearly worse than the 3-Opt results reported in Section 3.2, where the average excess)14 4320 1 720 4579 t
(over the Held-Karp lower bound was less than 3)8 2415 1 720 4729 t
12 I f
(%)3135 4729 w
12 R f
( one 100-city instance they)4 1347( the)1 189(. For)1 269 3 3235 4729 t
( their simulated annealing implementation,)4 2072(tested, the elastic net algorithm did better than)7 2248 2 720 4879 t
(although probably still worse than 3-Opt.)5 1984 1 720 5029 t
(Indeed, subsequent experiments suggest that when)5 2439 1 970 5215 t
12 I f
(N)3441 5215 w
12 S f
(>)3571 5215 w
12 R f
(100 the elastic net approach)4 1353 1 3687 5215 t
( which typically gets within 5)5 1442(does not even outperform 2-Opt,)4 1587 2 720 5365 t
12 I f
(%)3749 5365 w
12 R f
(of the Held-Karp bound)3 1158 1 3882 5365 t
( compared the elastic net approach to)6 1878( [1990])1 364( Peterson)1 488(for random Euclidean instances.)3 1590 4 720 5515 t
( 200-city instances and obtained results that averaged 6)8 2777(various others on)2 860 2 720 5665 t
12 I f
(%)4357 5665 w
12 R f
(worse than)1 538 1 4502 5665 t
(those found by a version of the M)7 1681 1 720 5815 t
(. .)1 54 1 2401 5743 t
( [1988] genetic algorithm described in)5 1885(uhlenbein et al.)2 754 2 2401 5815 t
( the)1 188( and Golden [1995] used a hierarchical scheme to speed up)10 2953( Vakhutinsky)1 686(Section 6.)1 493 4 720 5965 t
( handle 500-city random)3 1247(process \(and slightly improve tour quality\) and were able to)9 3073 2 720 6115 t
(Euclidean instances, but they appear to have found tours that were more than 10)13 3901 1 720 6265 t
12 I f
(%)4621 6265 w
12 R f
(above)4754 6265 w
(the Held-Karp bound.)2 1049 1 720 6415 t
( in much)2 439(Boeres, de Carvalho, and Barbosa [1992] sped up the elastic net approach)11 3631 2 970 6601 t
( way that Bonomi and Lutton [1984] sped up simulated annealing, using a parti-)13 3892(the same)1 428 2 720 6751 t
( partic-)1 346( In)1 162( narrow their searches.)3 1092(tion of the unit square into a grid of smaller cells to help)12 2720 4 720 6901 t
( a vertex by the cities, they restricted attention)8 2222(ular, when computing the force imposed on)6 2098 2 720 7051 t
( to handle 1000-city random)4 1482( enabled them)2 732( This)1 303(to just those cities in nearby cells.)6 1803 4 720 7201 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 55 536 764
%%EndPage: 90 90
%%Page: 91 91
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
91 pagesetup
12 R f
(- 91 -)2 260 1 2750 500 t
( Their)1 322( tour quality.)2 623(Euclidean instances, and they claim that there is no significant loss in)11 3375 3 720 870 t
(tours, however, are 5-10)3 1256 1 720 1020 t
12 I f
(%)1976 1020 w
12 R f
( Lin-)1 267(worse than those found by their implementation of)7 2638 2 2135 1020 t
( 2-)1 133(Kernighan, and they are hence worse than what 2-Opt could have provided, given that)13 4187 2 720 1170 t
( only 3)2 394(Opt typically)1 661 2 720 1320 t
12 I f
(%)1775 1320 w
12 R f
(or so behind Lin-Kernighan on random Euclidean instances.)7 3105 1 1935 1320 t
( faster: for 1000)3 783(Moreover, 2-Opt and even Lin-Kernighan would have been substantially)8 3537 2 720 1470 t
( al. running time is roughly 15,000 seconds on a SPARCstation, ver-)11 3387(cities the Boeres et)3 933 2 720 1620 t
( on our SGI Challenge, a machine)6 1648(sus an average of less than a second for Lin-Kernighan)9 2672 2 720 1770 t
( advan-)1 358( their paper, Boeres et al. claim significant speed)8 2352( In)1 161(that is at most 15 times faster.)6 1449 4 720 1920 t
( is based on an implemen-)5 1289(tages for elastic nets over Lin-Kernighan, but this comparison)8 3031 2 720 2070 t
( appears to have a worse than quadratic running time growth rate,)11 3225(tation of the latter that)4 1095 2 720 2220 t
( to the decidedly subquadratic running time reported for Lin-Kernighan in)10 3768(as opposed)1 552 2 720 2370 t
(Section 4.2.)1 571 1 720 2520 t
14 I f
(Self-Organizing Maps)1 1241 1 720 2850 t
12 R f
(The)720 3073 w
12 I f
(self-organizing map)1 977 1 947 3073 t
12 R f
( has han-)2 457(approach is a variant on the elastic net approach that)9 2618 2 1965 3073 t
( variant was inspired by the)5 1390( This)1 287(dled significantly larger instances.)3 1690 3 720 3223 t
12 I f
(competitive neural)1 910 1 4130 3223 t
(nets)720 3373 w
12 R f
( the competition is between the vertices of the)8 2259( Here)1 298(of Kohonen [1988].)2 961 3 950 3373 t
12 I f
(M)4504 3373 w
12 R f
(-gon. At)1 436 1 4604 3373 t
(each step, we choose a random city)6 1756 1 720 3523 t
12 I f
(c)2515 3523 w
12 R f
(and determine that vertex)3 1252 1 2607 3523 t
12 I f
(v)3898 3523 w
12 R f
(which is closest to it.)4 1050 1 3990 3523 t
(The location of)2 752 1 720 3673 t
12 I f
(v)1511 3673 w
12 R f
( of)1 140(is then moved toward that)4 1285 2 1603 3673 t
12 I f
(c)3068 3673 w
12 R f
(, with)1 284 1 3121 3673 t
12 I f
(v)3445 3673 w
12 R f
('s neighbors on the)3 948 1 3498 3673 t
12 I f
(M)4486 3673 w
12 R f
(-gon also)1 454 1 4586 3673 t
(moving in that direction, but to a lesser extent, and)9 2623 1 720 3823 t
12 I f
(their)3393 3823 w
12 R f
( to a still)3 477(neighbors moving)1 892 2 3671 3823 t
( strength of the effects on neighboring vertices will normally)9 3166( The)1 273( etc.)1 227(lesser extent,)1 654 4 720 3973 t
(decline in later stages of the algorithm.)6 1875 1 720 4123 t
( mak-)1 285(Typically we choose the cities according to random permutations, rather than)10 3785 2 970 4309 t
( independent choice at each step, so we can speak of)10 2525(ing an)1 299 2 720 4459 t
12 I f
(rounds)3575 4459 w
12 R f
( that)1 212( Note)1 294(of the cities.)2 594 3 3940 4459 t
( all)1 184( Whereas)1 512( ``iterations'' of the elastic net algorithm.)6 2188(these are different from the)4 1436 4 720 4609 t
( can at least conceptually be computed)6 1885(updates in an iteration of the elastic net algorithm)8 2435 2 720 4759 t
( map approach)2 740(and performed in parallel, the updates in a round of the self-organizing)11 3580 2 720 4909 t
( vertex)1 341(must be performed sequentially because of the very real possibility that a single)12 3979 2 720 5059 t
( variants of the self-organizing)4 1540( Some)1 350( different cities.)2 791(may be the closest vertex to two)6 1639 4 720 5209 t
( new)1 232( The)1 249( winning vertex.)2 790(map approach respond to such a double win by duplicating the)10 3049 4 720 5359 t
(vertex is inserted into the \(now\) \()6 1663 1 720 5509 t
12 I f
(M)2393 5509 w
12 S f
(+)2523 5509 w
12 R f
( between the old one and one of its neigh-)9 2101(1 \)-gon)1 330 2 2609 5509 t
( Often)1 344( it is this new vertex that is declared the champion for the current city.)14 3524(bors, and)1 452 3 720 5659 t
(this vertex-addition approach is accompanied by a vertex-deletion strategy, whereby ver-)10 4320 1 720 5809 t
(tices that fail to win any competitions in successive rounds get deleted.)11 3415 1 720 5959 t
( have generally led to the conclu-)6 1649(Experiments with self-organizing map algorithms)4 2421 2 970 6145 t
( faster than elastic net algorithms, they tend)7 2120(sion that while they can be made to converge)8 2200 2 720 6295 t
( Fort)1 278( et al., 1988], [Burke & Damany, 1992].)7 2046( eniol)1 196( \302)1 45( worse tours [Ang)3 914(to produce slight)2 841 6 720 6445 t
( the approach \(without vertex duplication\) to 400-city instances and got)10 3599([1988] applied)1 721 2 720 6595 t
(within 3)1 410 1 720 6745 t
12 I f
(%)1130 6745 w
12 R f
( [1977] estimate that for random Euclidean instances the expected)9 3291(of Stein's)1 477 2 1272 6745 t
( length is approximately .765)4 1459(optimal tour)1 607 2 720 6902 t
13 S f
(\326` `)1 172 1 2786 6902 t
12 I f
(N)2868 6902 w
12 R f
( we pointed out in Section 2.3, how-)7 1836(. As)1 236 2 2968 6902 t
( this size 3-Opt typically)4 1204( instances of)2 609( For)1 231(ever, Stein's formula is a serious overestimate.)6 2276 4 720 7052 t
(finds tours that are)3 899 1 720 7202 t
12 I f
(better)1649 7202 w
12 R f
(than Stein's estimate, and 2-Opt is less than 2)8 2196 1 1960 7202 t
12 I f
(%)4156 7202 w
12 R f
(above.)4286 7202 w
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 55 536 764
%%EndPage: 91 91
%%Page: 92 92
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
92 pagesetup
12 R f
(- 92 -)2 260 1 2750 500 t
( duplication)1 577(Fritzke and Wilke [1991] applied a version of the algorithm with vertex)11 3493 2 970 870 t
(to instances from)2 833 1 720 1020 t
12 C f
(TSPLIB)1585 1020 w
12 R f
(up to)1 246 1 2049 1020 t
12 C f
(pr2392)2327 1020 w
12 R f
( order to handle these larger instances, they)7 2089(. In)1 192 2 2759 1020 t
(restricted their nearest-vertex searches to a constant number of candidates, thus speeding)11 4320 1 720 1170 t
( up from)2 448(the algorithm)1 664 2 720 1320 t
12 S f
(W)1879 1320 w
12 R f
(\()1981 1320 w
12 I f
(N)2031 1320 w
9 R f
(2)2126 1272 w
12 R f
( restriction on candi-)3 1050( The)1 263(\) to approximately linear time.)4 1536 3 2191 1320 t
( accomplished in the first round by starting with)8 2385(dates was)1 471 2 720 1470 t
12 I f
(M)3615 1470 w
12 S f
(=)3765 1470 w
12 R f
(3 \(an allowable starting)3 1159 1 3881 1470 t
( vertex duplication will eventually increase)5 2144(value since)1 552 2 720 1620 t
12 I f
(M)3460 1620 w
12 R f
(to at least)2 490 1 3604 1620 t
12 I f
(N)4138 1620 w
12 R f
( subsequent)1 578(\). In)1 244 2 4218 1620 t
( city)1 213(rounds, the candidates for the nearest vertex to)7 2249 2 720 1770 t
12 I f
(c)3214 1770 w
12 R f
(were restricted to the previous near-)5 1741 1 3299 1770 t
(est vertex plus the)3 902 1 720 1920 t
12 I f
(k)1662 1920 w
12 R f
(vertices nearest to it on the)5 1343 1 1755 1920 t
12 I f
(M)3138 1920 w
12 R f
( Wilke's algorithm)2 928( and)1 213(-gon. Fritzke)1 661 3 3238 1920 t
( thus yielding linear)3 1014(apparently needed only a bounded number of rounds to converge,)9 3306 2 720 2070 t
( constant of proportionality was high, however, yielding a time for)10 3229(time. The)1 494 2 720 2220 t
12 C f
(pr2392)4476 2220 w
12 R f
(of)4940 2220 w
( 2, compared to 1.2 seconds for neighbor-list 3-)8 2363(about 1000 seconds on a SPARCstation)5 1957 2 720 2370 t
( to tour)2 372( As)1 205( than 10 times faster.)4 1054(Opt on our SGI Challenge, a machine that is no more)10 2689 4 720 2520 t
( Wilke were some 10)4 1076(quality, here Fritzke and)3 1214 2 720 2670 t
12 I f
(%)3010 2670 w
12 R f
(above optimal and hence significantly)4 1886 1 3154 2670 t
( a speed advantage over)4 1169( claim)1 305( They)1 313(worse even than 2-Opt, as they themselves observe.)7 2533 4 720 2820 t
( an)1 152(2-Opt, but this is because they were using)7 2065 2 720 2970 t
12 S f
(W)2976 2970 w
12 R f
(\()3078 2970 w
12 I f
(N)3128 2970 w
9 R f
(2)3223 2922 w
12 R f
(\) implementation rather than one of)5 1752 1 3288 2970 t
(the much more efficient ones discussed in Section 3.)8 2528 1 720 3120 t
( to handle instances with as many as 10,000)8 2242(Favata and Walker [1991] were able)5 1828 2 970 3306 t
( no duplication of vertices; if a vertex was)8 2031( there was)2 490( Here)1 294(cities, using a different variant.)4 1505 4 720 3456 t
( was taken to mean that those cities)7 1770(chosen by more than one city in a given round, this)10 2550 2 720 3606 t
( relative order in the tour didn't matter.)7 1962(should be consecutive in the tour, but that their)8 2358 2 720 3756 t
( the algorithm generate a tour by traversing the cities in the)11 2865(One could thus at any point in)6 1455 2 720 3906 t
( were matched to)3 892(order in which they)3 1009 2 720 4056 t
12 I f
(M)2674 4056 w
12 R f
(-gon vertices, randomly ordering those cities)5 2266 1 2774 4056 t
( and Walker took advantage of this by stopping the)9 2516( Favata)1 387( given vertex.)2 671(matched to any)2 746 4 720 4206 t
( length was within 10)4 1047(process as soon as their tour's)5 1459 2 720 4356 t
12 I f
(%)3226 4356 w
12 R f
(of the length they obtained using a)6 1681 1 3359 4356 t
( algorithm \(and hence still far worse than what could be obtained)11 3336(simulated annealing)1 984 2 720 4506 t
( so, their running time for a 1000-city random Euclidean instance was)11 3369( Even)1 308(using 2-Opt\).)1 643 3 720 4656 t
( 2-Opt \(after adjusting for the relative)6 1972(still more than 20 times that for neighbor-list)7 2348 2 720 4806 t
( do not report times for their)6 1436( They)1 318(speeds of their VAX 3600 and our SGI Challenge\).)8 2566 3 720 4956 t
( and Stehouwer [1993] apply a similar self-organizing map)8 2965( Aarts)1 335(10,000-city instance.)1 1020 3 720 5106 t
( instances from)2 743(approach to)1 568 2 720 5256 t
12 C f
(TSPLIB)2065 5256 w
12 R f
(of up to 11,849 cities, and although they apparently)8 2509 1 2531 5256 t
( Favata and Walker, their tour quality still loses to 2-Opt)10 2744(perform far more rounds than do)5 1576 2 720 5406 t
( percentage excess over Held Karp)5 1682(by a margin that grows with instance size, the average)9 2638 2 720 5556 t
(being 17.4)1 507 1 720 5706 t
12 I f
(%)1227 5706 w
12 R f
(on the 11,849-city instance, compared to 6)6 2049 1 1357 5706 t
12 I f
(%)3406 5706 w
12 R f
(for 2-Opt.)1 480 1 3536 5706 t
( algorithm has)2 695(As of this writing, the largest instance to which a self-organizing map)11 3375 2 970 5892 t
( by Amin [1994].)3 930(been applied is a 30,000-city random Euclidean instance handled)8 3390 2 720 6042 t
( yields tour)2 570(Amin's algorithm uses dynamic duplication and elimination of vertices and)9 3750 2 720 6192 t
(quality in the same ballpark as that reported by the earlier authors: 4)12 3448 1 720 6342 t
12 I f
(%)4168 6342 w
12 R f
(worse than the)2 728 1 4312 6342 t
(Stein bound, which at)3 1081 1 720 6492 t
12 I f
(N)1842 6492 w
12 S f
(=)1972 6492 w
12 R f
( is itself more than 7)5 1047(30 , 000)2 350 2 2058 6492 t
12 I f
(%)3455 6492 w
12 R f
(above the average Held-Karp)3 1443 1 3597 6492 t
( has a quadratic running-time growth rate,)6 2025( Amin's algorithm)2 894( Unfortunately,)1 766(lower bound.)1 635 4 720 6642 t
( long running times as opposed to algorithmic efficiency to handle)10 3474(and so must use)3 846 2 720 6792 t
( hours [Arthur,)2 761( 30,000-city instance required 44 workstation)5 2298( The)1 269(instances this large.)2 992 4 720 6942 t
(1994], compared to less than 20 seconds for 2- or 3-Opt on the SGI Challenge.)14 3782 1 720 7092 t
( despite)1 380(From all this we can only conclude that the geometric neural net approach,)12 3690 2 970 7278 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 47 536 764
%%EndPage: 92 92
%%Page: 93 93
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
93 pagesetup
12 R f
(- 93 -)2 260 1 2750 500 t
(its ability to handle larger instances, has no more practical value than the approaches)13 4320 1 720 870 t
( the large body of research into refining)7 1982( If)1 150(based on integer programming formulations.)4 2188 3 720 1020 t
( to have any practical consequences, it will most likely have to be in)13 3396(these algorithms is)2 924 2 720 1170 t
( the TSP domain might bear more useful)7 2101(other domains, where the lessons learned in)6 2219 2 720 1320 t
(fruit.)720 1470 w
14 B f
(8. CONCLUSION)1 1125 1 720 1800 t
12 R f
( best ones)2 480( The)1 249( chapter we have surveyed a wide variety of approaches to the TSP.)12 3284(In this)1 307 4 720 2023 t
( one has enough time to)5 1185( Assuming)1 556( or another.)2 566(are all based on local search in one form)8 2013 4 720 2173 t
( tour construction heuristic, one's first)5 1924(run something more sophisticated than a simple)6 2396 2 720 2323 t
( of the classic local opti-)5 1255(choice would probably be an efficient implementation of one)8 3065 2 720 2473 t
( Sections 3 and 4.)4 887(mization algorithms 2-Opt, 3-Opt, and Lin-Kernighan, as discussed in)8 3433 2 720 2623 t
(The last comes within 1.5)4 1247 1 720 2773 t
12 I f
(%)1967 2773 w
12 R f
(of optimal for random Euclidean instances with as many as a)10 2941 1 2099 2773 t
( is capable of doing almost as well for the real-world instances in)12 3312(million cities, and it)3 1008 2 720 2923 t
12 C f
(TSPLIB)720 3073 w
12 R f
( the running time bounds of these algorithms, no tabu search, simulated)11 3460(. Within)1 428 2 1152 3073 t
( been developed that provides compa-)5 1864(annealing, genetic, or neural net algorithm has yet)7 2456 2 720 3223 t
( tours are wanted and significantly more time is available,)9 2930( shorter)1 381( If)1 157(rably good tours.)2 852 4 720 3373 t
( find better tours)3 814(both simulated annealing and genetic algorithms can for many instances)9 3506 2 720 3523 t
( runs of Lin-)3 637(than could be found in the same time by performing multiple independent)11 3683 2 720 3673 t
( also have the advantage that one can use them without the)11 2863( approaches)1 572(Kernighan. These)1 885 3 720 3823 t
( one does have an implementa-)5 1526( If)1 147( required to implement Lin-Kernighan.)4 1901(detailed coding)1 746 4 720 3973 t
( latter, however, the best choice would seem to be the ``production-mode'')11 3791(tion of the)2 529 2 720 4123 t
( algorithm can be implemented so)5 1664( This)1 281(Iterated Lin-Kernighan algorithm of Section 6.2.)5 2375 3 720 4273 t
( grows subquadratically for)3 1327(that its running time)3 981 2 720 4423 t
12 I f
(N)3061 4423 w
12 S f
(\243)3181 4423 w
12 R f
( and it can typically reduce)5 1313(100 , 000,)2 440 2 3287 4423 t
(the excess above optimal to 0.2-0.5)5 1724 1 720 4573 t
12 I f
(%)2444 4573 w
12 R f
( time is no object, solutions within 0.1)7 1872( If)1 144(or less.)1 345 3 2579 4573 t
12 I f
(%)4940 4573 w
12 R f
( performing several longer runs of ILK, and still better)9 2660(or less of optimal can be found by)7 1660 2 720 4723 t
( on ILK and the branch-width-based)5 1822(ones can be obtained by genetic algorithms based)7 2498 2 720 4873 t
( and Cook [1994].)3 873( atal,)1 159( \302)1 45(mating scheme of Applegate, Bixby, Chv)5 1992 4 720 5023 t
( with what is known theoretically about)6 1963(These empirical results all contrast sharply)5 2107 2 970 5209 t
( TSP, since most of the theoretical TSP results are worst-case results,)11 3385(local search for the)3 935 2 720 5359 t
( one domain where)3 928( The)1 250( average-case performance.)2 1322(or are far-from-tight upper bounds on)5 1820 4 720 5509 t
( the mathematically interesting but)4 1797(the predictions of theory do seem to hold up is)9 2523 2 720 5659 t
( studied)1 395( all the heuristics we)4 1053( Here)1 308(application-free realm of random distance matrices.)5 2564 4 720 5809 t
( optimal tour length grows with)5 1666(produce tours whose percentage excess over the)6 2485 2 720 5959 t
12 I f
(N)4930 5959 w
12 R f
(,)5010 5959 w
(although for Lin-Kernighan the average excess is still less than 7)10 3118 1 720 6109 t
12 I f
(%)3838 6109 w
12 R f
(for)3968 6109 w
12 I f
(N)4138 6109 w
12 S f
(\243)4258 6109 w
12 R f
(30 , 000.)2 380 1 4364 6109 t
( one must rec-)3 690( First,)1 314( applications?)1 667(What lessons do these results provide us for other)8 2399 4 970 6295 t
( among NP-hard optimization problems as)5 2066(ognize that the TSP is something of an outlier)8 2254 2 720 6445 t
( other problems do not have a classical algorithm)8 2389( Most)1 311( go.)1 183(far as the quality of heuristics)5 1437 4 720 6595 t
(with the speed and effectiveness of the Lin-Kernighan algorithm, thus leaving much)11 4320 1 720 6745 t
( careful attention to data)4 1241( Nevertheless,)1 728( approaches to shine.)3 1061(more room for alternative)3 1290 4 720 6895 t
( per-)1 233(structures and algorithmic tradeoffs will probably still be necessary to obtain good)11 4087 2 720 7045 t
( many TSP heuristics, running times can be reduced by a factor of)12 3329(formance. For)1 723 2 720 7195 t
12 I f
(N)4816 7195 w
12 R f
(or)4940 7195 w
( just as true for simulated)5 1221(more by making appropriate implementation choices, and this is)8 3099 2 720 7345 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 41 536 764
%%EndPage: 93 93
%%Page: 94 94
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
94 pagesetup
12 R f
(- 94 -)2 260 1 2750 500 t
( the ways in)3 628( Studying)1 512( Lin-Kernighan.)1 790(annealing and neural nets as it is for 3-Opt and)9 2390 4 720 870 t
( about how best to)4 913(which this was done for the TSP may well be a good source of ideas)14 3407 2 720 1020 t
(accomplish it in other domains.)4 1515 1 720 1170 t
14 B f
(ACKNOWLEDGEMENTS)720 1500 w
12 R f
( long)1 252( A)1 154( are grateful to many people for their help in preparing this chapter.)12 3337(The authors)1 577 4 720 1723 t
( down references and where relevant to clarify technical)8 2756(list of people helped us to track)6 1564 2 720 1873 t
( Shara Amin,)2 641( help in this way, we thank Emil Aarts,)8 1884( For)1 228(issues related to their own work.)5 1567 4 720 2023 t
( Cook,)1 327(David Applegate, Jon Bentley, Kenneth Boese, Thang Bui, Bruno Codenotti, Bill)10 3993 2 720 2173 t
( Andew Kahng, Scott)3 1044(Hal Gabow, Michel Gendreau, Fred Glover, Bruce Golden, Jun Gu,)9 3276 2 720 2323 t
( Olivier Martin,)2 765(Kirkpatrick, John Knox, Jooyoung Lee, Jan van Leeuwen, Tom Liebling,)9 3555 2 720 2473 t
(Byung-Ro Moon, Heinz M)3 1381 1 720 2623 t
(. .)1 54 1 2101 2551 t
( Peterson, Chris Potts, Giovanni Resta,)5 2011(uhlenbein, Carsten)1 928 2 2101 2623 t
( Wei-tek Tsai, Christine Valenzuela, Steef van de Velde, Marco Verhoeven,)10 3702(Andre Rohe,)1 618 2 720 2773 t
( apolo-)1 342( Our)1 251( Xin Xu, Mihalis Yannakakis, and Martin Zachariasen.)7 2676(Dominique de Werra,)2 1051 4 720 2923 t
( also thank Emile Aarts, Kenneth)5 1620( We)1 231( list.)1 214(gies to anyone inadvertently left off the above)7 2255 4 720 3073 t
( Jan Karel Lenstra, Christine Valen-)5 1759(Boese, Marco Dorigo, Fred Glover, Howard Karloff,)6 2561 2 720 3223 t
( their insightful comments on preliminary versions of)7 2649(zuela, and Martin Zachariasen for)4 1671 2 720 3373 t
(this chapter.)1 588 1 720 3523 t
14 B f
(REFERENCES)2408 3823 w
11 R f
( H. L. A)3 416(1. E.)1 218 2 775 4022 t
9 R f
(ARTS AND)1 465 1 1409 4022 t
11 R f
(J. K)1 195 1 1919 4022 t
9 R f
(ORST)2114 4022 w
11 R f
( problems,'')1 555(, ``Boltzmann machines for traveling salesman)5 2141 2 2344 4022 t
11 I f
(European J. Operational Res.)3 1317 1 898 4152 t
11 B f
(39)2252 4152 w
11 R f
(\(1989\), 79-95.)1 632 1 2390 4152 t
( H. L. A)3 389(2. E.)1 218 2 775 4314 t
9 R f
(ARTS)1382 4314 w
11 R f
(, J. K)2 250 1 1612 4314 t
9 R f
(ORST)1862 4314 w
11 R f
(,)2092 4314 w
9 R f
(AND)2151 4314 w
11 R f
(P. J. M.)2 359 1 2382 4314 t
9 R f
(VAN)2777 4314 w
11 R f
(L)3008 4314 w
9 R f
(AARHOVEN)3075 4314 w
11 R f
( analysis of the)3 690(, ``A quantitative)2 770 2 3580 4314 t
( algorithm: A case study for the traveling salesman problem,'')9 2771(simulated annealing)1 887 2 898 4444 t
11 I f
(J. Statisti-)1 452 1 4588 4444 t
(cal Physics)1 497 1 898 4574 t
11 B f
(50)1432 4574 w
11 R f
(\(1988\), 189-206.)1 742 1 1570 4574 t
( H. L. A)3 398(3. E.)1 218 2 775 4736 t
9 R f
(ARTS AND)1 459 1 1391 4736 t
11 R f
(P. J. M.)2 367 1 1890 4736 t
9 R f
(VAN)2297 4736 w
11 R f
(L)2532 4736 w
9 R f
(AARHOVEN)2599 4736 w
11 R f
(, ``Simulated annealing: An introduction,'')4 1936 1 3104 4736 t
11 I f
(Statistica Neerlandica)1 982 1 898 4866 t
11 B f
(43)1917 4866 w
11 R f
(\(1985\), 31-52.)1 632 1 2055 4866 t
( H. L. A)3 371(4. E.)1 218 2 775 5028 t
9 R f
(ARTS AND)1 451 1 1364 5028 t
11 R f
(H. P. S)2 321 1 1846 5028 t
9 R f
(TEHOUWER)2167 5028 w
11 R f
(, ``Neural networks and the travelling salesman prob-)7 2368 1 2672 5028 t
(lem,'' in)1 379 1 898 5158 t
11 I f
(Proc.)1305 5158 w
11 R f
(, S. Gielen and B. Kappan \(Eds.\), Springer-Verlag, Berlin, 1993, 950-955.)10 3267 1 1546 5158 t
( A. A)2 272( R.)1 144(5. J.)1 194 3 775 5320 t
9 R f
(LLWRIGHT AND)1 703 1 1385 5320 t
11 R f
(D. B. C)2 369 1 2131 5320 t
9 R f
(ARPENTER)2500 5320 w
11 R f
(, ``A distributed implementation of simulated)5 2075 1 2965 5320 t
(annealing for the travelling salesman problem,'')5 2116 1 898 5450 t
11 I f
(Parallel Computing)1 879 1 3042 5450 t
11 B f
(10)3958 5450 w
11 R f
(\(1989\), 335-338.)1 742 1 4096 5450 t
( A)1 113(6. S.)1 213 2 775 5612 t
9 R f
(MIN)1101 5612 w
11 R f
(, ``A self-organized travelling salesman,'')4 1863 1 1276 5612 t
11 I f
(Neural Comput. & Applic.)3 1186 1 3173 5612 t
11 B f
(2)4396 5612 w
11 R f
(\(1994\), 129-)1 555 1 4485 5612 t
(133.)898 5742 w
( A)1 117(7. B.)1 225 2 775 5904 t
9 R f
(NGE)1117 5904 w
11 R f
(\302)1263 5882 w
9 R f
(NIOL)1309 5904 w
11 R f
(, G. D. L. C. V)5 708 1 1524 5904 t
9 R f
(AUBOIS)2232 5904 w
11 R f
(,)2567 5904 w
9 R f
(AND)2628 5904 w
11 R f
(J.-Y. L)1 320 1 2861 5904 t
9 R f
(E)3181 5904 w
11 R f
(T)3275 5904 w
9 R f
(EXIER)3342 5904 w
11 R f
(, ``Self-organizing feature maps)3 1433 1 3607 5904 t
(and the travelling salesman problem,'')4 1693 1 898 6034 t
11 I f
(Neural Networks)1 750 1 2619 6034 t
11 B f
(1)3406 6034 w
11 R f
(\(1988\), 289-293.)1 742 1 3489 6034 t
( A)1 107(8. D.)1 230 2 775 6196 t
9 R f
(PPLEGATE)1112 6196 w
11 R f
(, R. B)2 260 1 1562 6196 t
9 R f
(IXBY)1822 6196 w
11 R f
(, V. C)2 265 1 2042 6196 t
9 R f
(HVA)2307 6196 w
11 R f
(\302)2453 6174 w
9 R f
(TAL)2499 6196 w
11 R f
(,)2674 6196 w
9 R f
(AND)2725 6196 w
11 R f
(W. C)1 233 1 2948 6196 t
9 R f
(OOK)3181 6196 w
11 R f
(, private communication \(1994\).)3 1420 1 3376 6196 t
( A)1 116(9. D.)1 230 2 775 6358 t
9 R f
(PPLEGATE)1121 6358 w
11 R f
(, R. B)2 278 1 1571 6358 t
9 R f
(IXBY)1849 6358 w
11 R f
( C)1 112(, V.)1 172 2 2069 6358 t
9 R f
(HVA)2353 6358 w
11 R f
(\302)2499 6336 w
9 R f
(TAL)2545 6358 w
11 R f
(,)2720 6358 w
9 R f
(AND)2781 6358 w
11 R f
(W. C)1 243 1 3014 6358 t
9 R f
(OOK)3257 6358 w
11 R f
(, ``Finding cuts in the TSP \(A pre-)7 1588 1 3452 6358 t
( Mathematics and Theoretical Com-)4 1606(liminary report\),'' Report No. 95-05, Center for Discrete)7 2536 2 898 6488 t
(puter Science \(DIMACS\), Rutgers University, Piscataway, NJ, 1995.)7 3042 1 898 6618 t
( L. A)2 268(10. D.)1 285 2 720 6780 t
9 R f
(PPLEGATE)1273 6780 w
11 R f
( C)1 122(, V.)1 182 2 1723 6780 t
9 R f
(HVA)2027 6780 w
11 R f
(\302)2173 6758 w
9 R f
(TAL)2219 6780 w
11 R f
(,)2394 6780 w
9 R f
(AND)2465 6780 w
11 R f
(W. C)1 253 1 2708 6780 t
9 R f
(OOK)2961 6780 w
11 R f
(, ``Data structures for the Lin-Kernighan)5 1884 1 3156 6780 t
(heuristic,'' talk presented at the CRPC TSP Workshop, April 22-24, 1990, Houston, TX.)12 3910 1 898 6910 t
( L. A)2 270(11. D.)1 285 2 720 7072 t
9 R f
(PPLEGATE AND)1 688 1 1275 7072 t
11 R f
(W. C)1 253 1 2011 7072 t
9 R f
(OOK)2264 7072 w
11 R f
(, ``Solving large-scale matching problems,'' in)5 2160 1 2459 7072 t
11 I f
(Network)4667 7072 w
(Flows and Matching: First DIMACS Implementation Challenge)6 2974 1 898 7202 t
11 R f
(, American Mathematical)2 1168 1 3872 7202 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 55 536 764
%%EndPage: 94 94
%%Page: 95 95
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
95 pagesetup
11 R f
(- 95 -)2 238 1 2761 490 t
(Society, Providence, RI, 1993, 557-576.)4 1771 1 898 850 t
( L. A)2 230(12. D.)1 285 2 720 1012 t
9 R f
(PPLEGATE AND)1 668 1 1235 1012 t
11 R f
(W. C)1 233 1 1931 1012 t
9 R f
(OOK)2164 1012 w
11 R f
(, private communication \(1994\).)3 1420 1 2359 1012 t
( A)1 116(13. S.)1 268 2 720 1174 t
9 R f
(RORA)1104 1174 w
11 R f
(, C. L)2 271 1 1354 1174 t
9 R f
(UND)1625 1174 w
11 R f
(, R. M)2 302 1 1820 1174 t
9 R f
(OTWANI)2122 1174 w
11 R f
(, M. S)2 292 1 2487 1174 t
9 R f
(UDAN)2779 1174 w
11 R f
(,)3039 1174 w
9 R f
(AND)3100 1174 w
11 R f
(M. S)1 226 1 3333 1174 t
9 R f
(ZEGEDY)3559 1174 w
11 R f
(, ``Proof verification and)3 1121 1 3919 1174 t
(hardness of approximation problems,'')3 1726 1 898 1304 t
11 I f
(in)2658 1304 w
11 R f
(``Proceedings 33rd Ann. Symp. on Foundations of)6 2262 1 2778 1304 t
(Computer Science,'' IEEE Computer Society, Los Angeles, Calif., 1992, 14-23.)9 3527 1 898 1434 t
( A)1 107(14. C.)1 280 2 720 1596 t
9 R f
(RTHUR)1107 1596 w
11 R f
(, ``Smart ants solve travelling salesman problem,'')6 2229 1 1412 1596 t
11 I f
(New Scientist)1 597 1 3669 1596 t
11 R f
(\(4 June 1994\), 6.)3 743 1 4294 1596 t
( B. B)2 234(15. E.)1 273 2 720 1758 t
9 R f
(AUM)1227 1758 w
11 R f
( optimiza-)1 451(, ``Iterated descent: A better algorithm for local search in combinatorial)10 3152 2 1437 1758 t
(tion problems,'' manuscript \(1986a\).)3 1621 1 898 1888 t
( B. B)2 250(16. E.)1 273 2 720 2050 t
9 R f
(AUM)1243 2050 w
11 R f
( `neural' computation for combinatorial optimization prob-)6 2654(, ``Towards practical)2 933 2 1453 2050 t
(lems,'' in)1 425 1 898 2180 t
11 I f
(Neural Networks for Computing)3 1434 1 1354 2180 t
11 R f
( American Institute of Physics,)4 1368(, J. S. Denker \(Ed.\),)4 884 2 2788 2180 t
(New York, 1986b.)2 818 1 898 2310 t
( B)1 107(17. J.)1 249 2 720 2472 t
9 R f
(EARDWOOD)1076 2472 w
11 R f
(, J. H. H)3 384 1 1601 2472 t
9 R f
(ALTON)1985 2472 w
11 R f
(,)2290 2472 w
9 R f
(AND)2346 2472 w
11 R f
(J. M. H)2 344 1 2574 2472 t
9 R f
(AMMERSLEY)2918 2472 w
11 R f
(, ``The shortest path through many)5 1557 1 3483 2472 t
(points,'')898 2602 w
11 I f
(Proc. Cambridge Philos. Soc.)3 1316 1 1296 2602 t
11 B f
(55)2649 2602 w
11 R f
(\(1959\), 299-327.)1 742 1 2787 2602 t
( L. B)2 241(18. J.)1 249 2 720 2764 t
9 R f
(ENTLEY)1210 2764 w
11 R f
( trees used for associative search,'')5 1578(, ``Multidimensional binary search)3 1550 2 1560 2764 t
11 I f
(Comm.)4725 2764 w
(ACM)898 2894 w
11 B f
(18)1167 2894 w
11 R f
(\(1975\), 309-517.)1 742 1 1305 2894 t
( L. B)2 259(19. J.)1 249 2 720 3056 t
9 R f
(ENTLEY)1228 3056 w
11 R f
( in)1 132(, ``Experiments on traveling salesman heuristics,'')5 2303 2 1578 3056 t
11 I f
(Proc. 1st Ann. ACM-)3 981 1 4059 3056 t
(SIAM Symp. on Discrete Algorithms)4 1597 1 898 3186 t
11 R f
(, SIAM, Philadelphia, PA, 1990a, 91-99.)5 1798 1 2495 3186 t
( L. B)2 237(20. J.)1 249 2 720 3348 t
9 R f
(ENTLEY)1206 3348 w
11 R f
(, ``)1 134 1 1556 3348 t
11 I f
(K)1690 3348 w
11 S f
(-)1791 3348 w
11 I f
(d)1870 3348 w
11 R f
(trees for semidynamic point sets,'' in)5 1667 1 1959 3348 t
11 I f
( Ann. Symp. on Com-)4 964(Proc. 6th)1 416 2 3660 3348 t
(putational Geometry)1 913 1 898 3478 t
11 R f
(, ACM, New York, 1990b, 187-197.)5 1603 1 1811 3478 t
( L. B)2 225(21. J.)1 249 2 720 3640 t
9 R f
(ENTLEY)1194 3640 w
11 R f
( geometric traveling salesman problems,'')4 1855(, ``Fast algorithms for)3 966 2 1544 3640 t
11 I f
(ORSA J. Com-)2 646 1 4394 3640 t
(put.)898 3770 w
11 B f
(4)1104 3770 w
11 R f
(\(1992\), 387-411.)1 742 1 1187 3770 t
( G. B)2 275(22. R.)1 280 2 720 3932 t
9 R f
(LAND AND)1 487 1 1275 3932 t
11 R f
(D. F. S)2 353 1 1809 3932 t
9 R f
(HALLCROSS)2162 3932 w
11 R f
( salesman problems arising from)4 1515(, ``Large traveling)2 838 2 2687 3932 t
( report on computation,'')3 1168(experiments in X-ray crystallography: A preliminary)5 2430 2 898 4062 t
11 I f
(Operations)4545 4062 w
(Res. Lett.)1 414 1 898 4192 t
11 B f
(8)1349 4192 w
11 R f
(\(1989\), 125-128.)1 742 1 1432 4192 t
( B)1 107(23. F.)1 268 2 720 4354 t
9 R f
(OCK)1095 4354 w
11 R f
( optimization)1 591(, ``An algorithm for solving ``traveling-salesman'' and related network)8 3164 2 1285 4354 t
( talk presented at the 14th ORSA)6 1689(problems,'' unpublished manuscript associated with)4 2453 2 898 4484 t
(National Meeting, 1958.)2 1076 1 898 4614 t
( C. S. B)3 365(24. M.)1 304 2 720 4776 t
9 R f
(OERES)1389 4776 w
11 R f
(, L. A. V.)3 436 1 1674 4776 t
9 R f
(DE)2143 4776 w
11 R f
(C)2296 4776 w
9 R f
(ARVALHO)2370 4776 w
11 R f
(,)2810 4776 w
9 R f
(AND)2866 4776 w
11 R f
(V. C. B)2 349 1 3094 4776 t
9 R f
(ARBOSA)3443 4776 w
11 R f
(, ``A faster elastic-net algo-)4 1232 1 3808 4776 t
(rithm for the traveling salesman problem,'' in)6 2114 1 898 4906 t
11 I f
( Networks)1 460(Proc. Int. Joint Conf. on Neural)5 1495 2 3057 4906 t
11 R f
(,)5012 4906 w
(IEEE, Piscataway, NJ, 1992, II:215-220.)4 1793 1 898 5036 t
( B)1 120( D.)1 152(25. K.)1 285 3 720 5198 t
9 R f
(OESE)1277 5198 w
11 R f
(, A. B. K)3 454 1 1502 5198 t
9 R f
(AHNG)1956 5198 w
11 R f
(,)2216 5198 w
9 R f
(AND)2285 5198 w
11 R f
(S. M)1 234 1 2526 5198 t
9 R f
(UDDU)2760 5198 w
11 R f
(, ``A new adaptive multi-start technique for)6 2020 1 3020 5198 t
(combinatorial global optimizations,'')2 1641 1 898 5328 t
11 I f
(Operations Res. Lett.)2 937 1 2567 5328 t
11 B f
(16)3541 5328 w
11 R f
(\(1994\), 101-113.)1 742 1 3679 5328 t
( B)1 105(26. E.)1 273 2 720 5490 t
9 R f
(ONOMI AND)1 526 1 1098 5490 t
11 R f
(J.-L. L)1 300 1 1655 5490 t
9 R f
(UTTON)1955 5490 w
11 R f
(, ``The)1 301 1 2260 5490 t
11 I f
(N)2593 5490 w
11 R f
(-city travelling salesman problem: statistical mechan-)5 2373 1 2667 5490 t
(ics and the Metropolis algorithm,'')4 1537 1 898 5620 t
11 I f
(SIAM Rev.)1 468 1 2463 5620 t
11 B f
(26)2968 5620 w
11 R f
(\(1984\), 551-568.)1 742 1 3106 5620 t
( M. B)2 304(27. R.)1 280 2 720 5782 t
9 R f
(RADY)1304 5782 w
11 R f
( gleaned from biological evolution,'')4 1721(, ``Optimization strategies)2 1199 2 1559 5782 t
11 I f
(Nature)4532 5782 w
11 B f
(317)4875 5782 w
11 R f
(\(October 31, 1985\), 804-806.)3 1288 1 898 5912 t
( D. B)2 251(28. R.)1 280 2 720 6074 t
9 R f
(RANDT)1251 6074 w
11 R f
(, Y. W)2 308 1 1561 6074 t
9 R f
(ANG)1869 6074 w
11 R f
(,)2064 6074 w
9 R f
(AND)2122 6074 w
11 R f
(A. J. L)2 315 1 2352 6074 t
9 R f
(AUB)2667 6074 w
11 R f
( the traveling)2 596(, ``Alternative networks for solving)4 1587 2 2857 6074 t
(salesman problem an the list-matching problem,'' in)6 2384 1 898 6204 t
11 I f
( Int. Conf. on Neural Net-)5 1198(Proc. IEEE)1 519 2 3323 6204 t
(works)898 6334 w
11 R f
(, IEEE, Piscataway, NJ, 1988, II:333-340.)5 1849 1 1161 6334 t
( B)1 116(29. H.)1 285 2 720 6496 t
9 R f
(RAUN)1121 6496 w
11 R f
( solving travelling salesman problems by genetic algorithms,'' in)8 2984(, ``On)1 276 2 1376 6496 t
11 I f
(Parallel)4679 6496 w
(Problem Solving from Nature)3 1324 1 898 6626 t
11 R f
( Schwefel and R. M)4 897(, H.-P.)1 295 2 2222 6626 t
(. .)1 50 1 3414 6560 t
( Notes in Com-)3 692( Lecture)1 394(anner \(Eds.\))1 540 3 3414 6626 t
(puter Science, Vol. 496, Springer, Berlin, 1991, 129-133.)7 2526 1 898 6756 t
( N. B)2 245(30. T.)1 273 2 720 6918 t
9 R f
(UI AND)1 317 1 1238 6918 t
11 R f
(B. R. M)2 366 1 1587 6918 t
9 R f
(OON)1953 6918 w
11 R f
( new genetic approach for the traveling salesman problem,'')8 2681(, ``A)1 211 2 2148 6918 t
(in)898 7048 w
11 I f
( Evolutionary Computations)2 1277(Proc. IEEE Conf. on)3 960 2 1027 7048 t
11 R f
(, D. B. Fogel \(Ed.\), IEEE, Piscataway,)6 1776 1 3264 7048 t
(NJ, 1994, 7-12.)2 683 1 898 7178 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 58 536 764
%%EndPage: 95 95
%%Page: 96 96
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
96 pagesetup
11 R f
(- 96 -)2 238 1 2761 490 t
( I. B)2 194(31. L.)1 273 2 720 850 t
9 R f
(URKE AND)1 463 1 1187 850 t
11 R f
(P. D)1 197 1 1678 850 t
9 R f
(AMANY)1875 850 w
11 R f
( net for the traveling salesman problem,'')6 1827(, ``The guilty)2 584 2 2215 850 t
11 I f
(Comput-)4655 850 w
(ers & Oper. Res)3 715 1 898 980 t
11 B f
(19)1650 980 w
11 R f
(\(1992\), 255-265.)1 742 1 1788 980 t
( C)1 139(32. J.)1 249 2 720 1142 t
9 R f
(ARLIER AND)1 580 1 1108 1142 t
11 R f
(P. V)1 234 1 1753 1142 t
9 R f
(ILLON)1987 1142 w
11 R f
( for the traveling salesman problem,'')5 1849(, ``A new heuristic)3 934 2 2257 1142 t
11 I f
(Recherche Operationelle/Operations Research)2 2059 1 898 1272 t
11 B f
(24)2985 1272 w
11 R f
(\(1990\), 245-253.)1 742 1 3123 1272 t
( C)1 115(33. V.)1 285 2 720 1434 t
9 R f
(ERNY)1120 1434 w
11 R f
( Thermodynamical Approach to the Travelling Salesman Problem: An Effi-)9 3455(, ``A)1 220 2 1365 1434 t
(cient Simulation Algorithm,'')2 1313 1 898 1564 t
11 I f
(J. Optimization Theory and Appl.)4 1476 1 2239 1564 t
11 B f
(45)3752 1564 w
11 R f
(\(1985\), 41-51.)1 632 1 3890 1564 t
( C)1 106(34. B.)1 280 2 720 1726 t
9 R f
(HANDRA)1106 1726 w
11 R f
( K)1 112(, H.)1 167 2 1491 1726 t
9 R f
(ARLOFF)1770 1726 w
11 R f
(,)2115 1726 w
9 R f
(AND)2171 1726 w
11 R f
(C. T)1 202 1 2399 1726 t
9 R f
(OVEY)2601 1726 w
11 R f
(, ``New results on the old)5 1143 1 2851 1726 t
11 I f
(k)4027 1726 w
11 R f
(-opt algorithm for the)3 965 1 4075 1726 t
(TSP,'')898 1856 w
11 I f
(in)1222 1856 w
11 R f
( ACM-SIAM Symp. on Discrete Algorithms,'' Society for Indus-)8 2917(``Proceedings 5th)1 782 2 1341 1856 t
(trial and Applied Mathematics, Philadelphia, 1994, 150-159.)6 2672 1 898 1986 t
( C)1 104(35. G.)1 285 2 720 2148 t
9 R f
(LARKE AND)1 520 1 1109 2148 t
11 R f
(J. W. W)2 365 1 1659 2148 t
9 R f
(RIGHT)2024 2148 w
11 R f
( to a number of)4 684(, ``Scheduling of vehicles from a central depot)7 2057 2 2299 2148 t
(delivery points,'')1 757 1 898 2278 t
11 I f
(Operations Res.)1 709 1 1683 2278 t
11 B f
(12)2429 2278 w
11 R f
(\(1964\), 568-581.)1 742 1 2567 2278 t
( C)1 109(36. N.)1 285 2 720 2440 t
9 R f
(HRISTOFIDES)1114 2440 w
11 R f
( prob-)1 273(, ``Worst-case analysis of a new heuristic for the travelling salesman)10 3078 2 1689 2440 t
(lem,'' Report No. 388, GSIA, Carnegie-Mellon University, Pittsburgh, PA, 1976.)9 3595 1 898 2570 t
( C)1 106(37. B.)1 280 2 720 2732 t
9 R f
(ODENOTTI)1106 2732 w
11 R f
(, G. M)2 297 1 1561 2732 t
9 R f
(ANZINI)1858 2732 w
11 R f
(, L. M)2 285 1 2168 2732 t
9 R f
(ARGARA)2453 2732 w
11 R f
(,)2833 2732 w
9 R f
(AND)2888 2732 w
11 R f
(G. R)1 214 1 3115 2732 t
9 R f
(ESTA)3329 2732 w
11 R f
(, ``Global strategies for augment-)4 1486 1 3554 2732 t
( of TSP heuristics,'' in)4 1017(ing the efficiency)2 777 2 898 2862 t
11 I f
(Proc. 3rd Workshop on Algorithms and Data Struc-)7 2316 1 2724 2862 t
(tures)898 2992 w
11 R f
(, Lecture Notes in Computer Science, Vol. 709, Springer, Berlin, 1993, 253-264.)11 3556 1 1118 2992 t
( C)1 103(38. B.)1 280 2 720 3154 t
9 R f
(ODENOTTI)1103 3154 w
11 R f
(, G. M)2 291 1 1558 3154 t
9 R f
(ANZINI)1849 3154 w
11 R f
(, L. M)2 279 1 2159 3154 t
9 R f
(ARGARA)2438 3154 w
11 R f
(,)2818 3154 w
9 R f
(AND)2870 3154 w
11 R f
(G. R)1 211 1 3094 3154 t
9 R f
(ESTA)3305 3154 w
11 R f
(, ``Perturbation: An efficient tech-)4 1510 1 3530 3154 t
(nique for the solution of very large instances of the Euclidean TSP,'' manuscript, 1994.)13 3848 1 898 3284 t
( C)1 102(39. W.)1 309 2 720 3446 t
9 R f
(OOK AND)1 413 1 1131 3446 t
11 R f
(P. D. S)2 315 1 1572 3446 t
9 R f
(EYMOUR)1887 3446 w
11 R f
(, private communication \(1993\).)3 1420 1 2277 3446 t
( C)1 104(40. G.)1 285 2 720 3608 t
9 R f
(ORNUEJOLS AND)1 735 1 1109 3608 t
11 R f
(G. L. N)2 341 1 1874 3608 t
9 R f
(EMHAUSER)2215 3608 w
11 R f
(, ``Tight bounds for Christofides' traveling salesman)6 2330 1 2710 3608 t
(heuristic,'')898 3738 w
11 I f
(Math. Programming)1 905 1 1404 3738 t
11 B f
(14)2346 3738 w
11 R f
(\(1978\), 116-121.)1 742 1 2484 3738 t
( A. C)2 287(41. G.)1 285 2 720 3900 t
9 R f
(ROES)1292 3900 w
11 R f
( solving traveling salesman problems,'')4 1842(, ``A method for)3 795 2 1522 3900 t
11 I f
(Operations Res.)1 735 1 4213 3900 t
11 B f
(6)4985 3900 w
11 R f
(\(1958\), 791-812.)1 742 1 898 4030 t
( C)1 112(42. H.)1 285 2 720 4192 t
9 R f
(ROWDER AND)1 618 1 1117 4192 t
11 R f
(M. P)1 226 1 1773 4192 t
9 R f
(ADBERG)1999 4192 w
11 R f
( travelling salesman prob-)3 1177(, ``Solving large-scale symmetric)3 1494 2 2369 4192 t
(lems to optimality,'')2 904 1 898 4322 t
11 I f
(Mgmt. Sci.)1 474 1 1830 4322 t
11 B f
(26)2341 4322 w
11 R f
(\(1980\), 495-509.)1 742 1 2479 4322 t
( D)1 117(43. M.)1 304 2 720 4484 t
9 R f
(AM AND)1 373 1 1141 4484 t
11 R f
(M. Z)1 231 1 1552 4484 t
9 R f
(ACHARIASEN)1783 4484 w
11 R f
(,)2363 4484 w
11 I f
( Traveling Salesman Prob-)3 1222(Tabu Search on the Geometric)4 1389 2 2429 4484 t
(lem)898 4614 w
11 R f
( Department of Computer Science, University of Copenhagen, Copenhagen,)8 3363(, M.S. Thesis,)2 621 2 1056 4614 t
(1994.)898 4744 w
( D)1 113(44. M.)1 304 2 720 4906 t
9 R f
(AM AND)1 369 1 1137 4906 t
11 R f
(M. Z)1 227 1 1540 4906 t
9 R f
(ACHARIASEN)1767 4906 w
11 R f
( Salesman Prob-)2 735(, ``Tabu Search on the Geometric Traveling)6 1958 2 2347 4906 t
(lem,'' manuscript \(1995\).)2 1129 1 898 5036 t
( D)1 131(45. G.)1 285 2 720 5198 t
9 R f
(UECK)1136 5198 w
11 R f
( algorithm and the record-to-)4 1368(, ``New optimization heuristics: The great-deluge)5 2291 2 1381 5198 t
(record-travel,'')898 5328 w
11 I f
(J. Computational Physics)2 1129 1 1589 5328 t
11 B f
(104)2755 5328 w
11 R f
(\(1993\), 86-92.)1 632 1 2948 5328 t
( D)1 126(46. G.)1 285 2 720 5490 t
9 R f
(UECK AND)1 482 1 1131 5490 t
11 R f
(T. S)1 204 1 1660 5490 t
9 R f
(CHEUER)1864 5490 w
11 R f
( accepting: A new general purpose optimization)6 2224(, ``Threshold)1 592 2 2224 5490 t
(algorithm superior to simulated annealing,'')4 1939 1 898 5620 t
11 I f
(J. Computational Physics)2 1129 1 2865 5620 t
11 B f
(90)4031 5620 w
11 R f
(\(1990\), 161-175.)1 742 1 4169 5620 t
( D)1 121(47. R.)1 280 2 720 5782 t
9 R f
(URBIN)1121 5782 w
11 R f
(, R. S)2 276 1 1401 5782 t
9 R f
(ZELISKI)1677 5782 w
11 R f
(,)2017 5782 w
9 R f
(AND)2082 5782 w
11 R f
(A. Y)1 228 1 2319 5782 t
9 R f
(UILLE)2547 5782 w
11 R f
( analysis of the elastic net approach to the)8 1957(, ``An)1 276 2 2807 5782 t
(traveling salesman problem,'')2 1314 1 898 5912 t
11 I f
(Neural Computation)1 910 1 2240 5912 t
11 B f
(1)3187 5912 w
11 R f
(\(1989\), 348-358.)1 742 1 3270 5912 t
( D)1 115(48. R.)1 280 2 720 6074 t
9 R f
(URBIN AND)1 506 1 1115 6074 t
11 R f
(D. W)1 246 1 1657 6074 t
9 R f
(ILLSHAW)1903 6074 w
11 R f
( approach to the travelling salesman problem)6 2031(, ``An analogue)2 701 2 2308 6074 t
(using an elastic net method,'')4 1298 1 898 6204 t
11 I f
(Nature)2224 6204 w
11 B f
(326)2567 6204 w
11 R f
(\(April 16, 1987\), 689-691.)3 1168 1 2760 6204 t
( E)1 147(49. J.)1 249 2 720 6366 t
9 R f
(DMONDS)1116 6366 w
11 R f
(, ``Matching and a polyhedron with 0-1 vertices,'')7 2569 1 1506 6366 t
11 I f
( Nat. Bur.)2 543(J. Res.)1 342 2 4155 6366 t
(Standards)898 6496 w
11 B f
(69B)1382 6496 w
11 R f
(\(1965\), 125-130.)1 742 1 1594 6496 t
( E)1 115(50. J.)1 249 2 720 6658 t
9 R f
(DMONDS AND)1 628 1 1084 6658 t
11 R f
(E. L. J)2 331 1 1760 6658 t
9 R f
(OHNSON)2091 6658 w
11 R f
(, ``Matching: A well-solved class of integer linear pro-)8 2574 1 2466 6658 t
(grams,'' in)1 485 1 898 6788 t
11 I f
(Combinatorial Structures and their Applications)4 2156 1 1414 6788 t
11 R f
( New York,)2 519(, Gordon and Breach,)3 951 2 3570 6788 t
(1970, 89-92.)1 560 1 898 6918 t
( F)1 97(51. F.)1 268 2 720 7080 t
9 R f
(AVATA AND)1 540 1 1085 7080 t
11 R f
(R. W)1 240 1 1660 7080 t
9 R f
(ALKER)1900 7080 w
11 R f
( networks)1 438(, ``A study of the application of Kohonen-type neural)8 2402 2 2200 7080 t
(to the travelling salesman problem,'')4 1621 1 898 7210 t
11 I f
(Biol. Cybern.)1 591 1 2547 7210 t
11 B f
(64)3175 7210 w
11 R f
(\(1991\), 463-468.)1 742 1 3313 7210 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 55 536 764
%%EndPage: 96 96
%%Page: 97 97
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
97 pagesetup
11 R f
(- 97 -)2 238 1 2761 490 t
( F)1 99(52. C.-N.)1 423 2 720 850 t
9 R f
(IECHTER)1242 850 w
11 R f
(, ``A parallel tabu search algorithm for large traveling salesman problems,'')10 3418 1 1622 850 t
11 I f
(Disc. Applied Math.)2 887 1 898 980 t
11 B f
(51)1822 980 w
11 R f
(\(1994\), 243-267.)1 742 1 1960 980 t
( F)1 114( T.)1 146(53. S.)1 268 3 720 1142 t
9 R f
(ISCHER)1248 1142 w
11 R f
(, ``A note on the complexity of local search problems,'')9 2666 1 1568 1142 t
11 I f
(Inform. Process.)1 754 1 4286 1142 t
(Lett.)898 1272 w
11 B f
(53)1135 1272 w
11 R f
(\(1995\), 69-75.)1 632 1 1273 1272 t
( M. F)2 244(54. M.)1 304 2 720 1434 t
9 R f
(LOOD)1268 1434 w
11 R f
(, ``The traveling-salesman problem,'')3 1648 1 1518 1434 t
11 I f
(Operations Res.)1 709 1 3194 1434 t
11 B f
(4)3940 1434 w
11 R f
(\(1956\), 61-75.)1 632 1 4023 1434 t
( P. S. F)3 413(55. Y.)1 285 2 720 1596 t
9 R f
(OO AND)1 377 1 1418 1596 t
11 R f
(H. S)1 226 1 1852 1596 t
9 R f
(ZU)2078 1596 w
11 R f
( problems by divide-and-)3 1198(, ``Solving large-scale optimization)3 1644 2 2198 1596 t
(conquer neural networks,'' in)3 1312 1 898 1726 t
11 I f
( Joint Conference on Neural Networks)5 1717(Proc. Int.)1 424 2 2243 1726 t
11 R f
(, IEEE, Piscat-)2 656 1 4384 1726 t
(away, NJ, 1989, I:507-511.)3 1201 1 898 1856 t
( C. F)2 228(56. J.)1 249 2 720 2018 t
9 R f
(ORT)1197 2018 w
11 R f
( via self-organizing process: An application of)6 2067(, ``Solving a combinatorial problem)4 1596 2 1377 2018 t
(the Kohonen algorithm to the traveling salesman problem,'')7 2638 1 898 2148 t
11 I f
(Biol. Cybern)1 563 1 3564 2148 t
11 B f
(59)4164 2148 w
11 R f
(\(1988\), 33-40.)1 632 1 4302 2148 t
( L. F)2 213(57. M.)1 304 2 720 2310 t
9 R f
(REDMAN)1237 2310 w
11 R f
(, D. S. J)3 352 1 1627 2310 t
9 R f
(OHNSON)1979 2310 w
11 R f
(, L. A. M)3 415 1 2354 2310 t
9 R f
(C)2769 2310 w
11 R f
(G)2829 2310 w
9 R f
(EOCH)2908 2310 w
11 R f
(,)3153 2310 w
9 R f
(AND)3205 2310 w
11 R f
(G. O)1 215 1 3429 2310 t
9 R f
(STHEIMER)3644 2310 w
11 R f
(, ``Data structures for)3 946 1 4094 2310 t
(traveling salesmen,'')1 920 1 898 2440 t
11 I f
(J. Algorithms)1 594 1 1846 2440 t
11 B f
(18)2477 2440 w
11 R f
(\(1995\), 432-479.)1 742 1 2615 2440 t
( M. F)2 254(58. A.)1 285 2 720 2602 t
9 R f
(RIEZE)1259 2602 w
11 R f
( problems,'')1 543(, ``Worst-case analysis of algorithms for travelling salesman)7 2688 2 1514 2602 t
11 I f
(Meth-)4779 2602 w
(ods of Operations Research)3 1225 1 898 2732 t
11 B f
(32)2160 2732 w
11 R f
(\(1979\), 97-112.)1 687 1 2298 2732 t
( F)1 94(59. B.)1 280 2 720 2894 t
9 R f
(RITZKE AND)1 542 1 1094 2894 t
11 R f
(P. W)1 225 1 1668 2894 t
9 R f
(ILKE)1893 2894 w
11 R f
( A neural network for the traveling salesman prob-)8 2265(, ``FLEXMAP:)1 677 2 2098 2894 t
(lem with linear time and space complexity,'' in)7 2160 1 898 3024 t
11 I f
( Joint Conf. on Neural Networks)5 1485(Proc. Int.)1 430 2 3097 3024 t
11 R f
(,)5012 3024 w
(IEEE, Piscataway, NJ, 1991, 929-934.)4 1690 1 898 3154 t
( G)1 111(60. H.)1 285 2 720 3316 t
9 R f
(ABOW)1116 3316 w
11 R f
(,)1391 3316 w
11 I f
( Maximum Matching on Nonbipartite Graphs)5 2028(Implementations of Algorithms for)3 1533 2 1451 3316 t
11 R f
(,)5012 3316 w
(Ph.D Dissertation, Department of Computer Science, Stanford University, Stanford, CA,)9 4142 1 898 3446 t
(1973.)898 3576 w
( N. G)2 274(61. H.)1 285 2 720 3738 t
9 R f
(ABOW AND)1 510 1 1279 3738 t
11 R f
(R. E. T)2 354 1 1834 3738 t
9 R f
(ARJAN)2188 3738 w
11 R f
(, ``Faster scaling algorithms for general graph-matching)6 2562 1 2478 3738 t
(problems,'')898 3868 w
11 I f
(J. Assoc. Comput. Mach.)3 1098 1 1435 3868 t
11 B f
(38)2570 3868 w
11 R f
(\(1991\), 815-853.)1 742 1 2708 3868 t
( R. G)2 249(62. M.)1 304 2 720 4030 t
9 R f
(AREY)1273 4030 w
11 R f
(,)1518 4030 w
9 R f
(AND)1575 4030 w
11 R f
(D. S. J)2 308 1 1804 4030 t
9 R f
(OHNSON)2112 4030 w
11 R f
(,)2487 4030 w
11 I f
( Theory of)2 467(Computers and Intractability: A Guide to the)6 2024 2 2549 4030 t
(NP-Completeness)898 4160 w
11 R f
(, W. H. Freeman, San Francisco, 1979.)6 1712 1 1685 4160 t
( G)1 117(63. M.)1 304 2 720 4322 t
9 R f
(ENDREAU)1141 4322 w
11 R f
(, A. H)2 290 1 1571 4322 t
9 R f
(ERTZ)1861 4322 w
11 R f
(,)2086 4322 w
9 R f
(AND)2147 4322 w
11 R f
(G. L)1 212 1 2380 4322 t
9 R f
(APORTE)2592 4322 w
11 R f
( insertion and post-optimization proce-)4 1754(, ``New)1 344 2 2942 4322 t
(dures for the traveling salesman problem,'')5 1896 1 898 4452 t
11 I f
(Operations Res.)1 709 1 2822 4452 t
11 B f
(40)3568 4452 w
11 R f
(\(1992\), 1086-1094.)1 852 1 3706 4452 t
( G)1 107(64. F.)1 268 2 720 4614 t
9 R f
(LOVER)1095 4614 w
11 R f
( artificial intelligence,'')2 1041(, ``Future paths for integer programming and links to)8 2331 2 1395 4614 t
11 I f
(Com-)4796 4614 w
(puters & Ops. Res.)3 836 1 898 4744 t
11 B f
(13)1771 4744 w
11 R f
(\(1986\), 533-549.)1 742 1 1909 4744 t
( G)1 107(65. F.)1 268 2 720 4906 t
9 R f
(LOVER)1095 4906 w
11 R f
(, ``Tabu search \261 Part I,'')5 1111 1 1395 4906 t
11 I f
(ORSA J. Comput.)2 777 1 2534 4906 t
11 B f
(1)3348 4906 w
11 R f
(\(1989\), 190-206.)1 742 1 3431 4906 t
( G)1 107(66. F.)1 268 2 720 5068 t
9 R f
(LOVER)1095 5068 w
11 R f
(, ``Tabu search \261 Part II,'')5 1147 1 1395 5068 t
11 I f
(ORSA J. Comput.)2 777 1 2570 5068 t
11 B f
(2)3384 5068 w
11 R f
(\(1990\), 4-32.)1 577 1 3467 5068 t
( G)1 120(67. F.)1 268 2 720 5230 t
9 R f
(LOVER)1108 5230 w
11 R f
( embedded search neighborhoods for the traveling)6 2284(, ``Multilevel tabu search and)4 1348 2 1408 5230 t
( Business, University of Colorado, Boulder, CO,)6 2197(salesman problem,'' Manuscript, School of)4 1945 2 898 5360 t
(May 1991.)1 477 1 898 5490 t
( G)1 112(68. F.)1 268 2 720 5652 t
9 R f
(LOVER)1100 5652 w
11 R f
( traveling)1 424(, ``Ejection chains, reference structures and alternating path methods for)9 3216 2 1400 5652 t
( Manuscript, School of Business, University of Colorado, Boulder, CO,)9 3197(salesman problems,'')1 945 2 898 5782 t
(April 1992.)1 508 1 898 5912 t
( G)1 113( X.)1 140(69. M.)1 304 3 720 6074 t
9 R f
(OEMANS AND)1 604 1 1277 6074 t
11 R f
(D. B)1 215 1 1915 6074 t
9 R f
(ERTSIMAS)2130 6074 w
11 R f
(, ``Probabilistic analysis of the Held-Karp lower bound)7 2465 1 2575 6074 t
(for the Euclidean traveling salesman problem,'')5 2097 1 898 6204 t
11 I f
(Math. Oper. Res.)2 755 1 3023 6204 t
11 B f
(16)3815 6204 w
11 R f
(\(1991\), 72-89.)1 632 1 3953 6204 t
( E. G)2 260(70. D.)1 285 2 720 6366 t
9 R f
(OLDBERG)1265 6366 w
11 R f
(, ``Genetic Algorithms in Search, Optimization, and Machine Learning,'')8 3350 1 1690 6366 t
(Addison-Wesley, Reading, MA, 1989.)3 1696 1 898 6496 t
( L. G)2 234(71. B.)1 280 2 720 6658 t
9 R f
(OLDEN AND)1 525 1 1234 6658 t
11 R f
(C. C. S)2 326 1 1789 6658 t
9 R f
(KISCIM)2115 6658 w
11 R f
( to solve routing and location)5 1303(, ``Using simulated annealing)3 1307 2 2430 6658 t
(problems,'')898 6788 w
11 I f
(Naval Research Logistics Quarterly)3 1586 1 1435 6788 t
11 B f
(33)3058 6788 w
11 R f
(\(1986\), 266-279.)1 742 1 3196 6788 t
(72. B. L. G)3 534 1 720 6950 t
9 R f
(OLDEN AND)1 535 1 1254 6950 t
11 R f
(W. R. S)2 375 1 1829 6950 t
9 R f
(TEWART)2204 6950 w
11 R f
( in)1 127(, ``Empirical analysis of heuristics,'')4 1659 2 2579 6950 t
11 I f
(The Traveling)1 634 1 4406 6950 t
(Salesman Problem)1 838 1 898 7080 t
11 R f
( and D. B. Shmoys)4 875(, E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan,)11 2429 2 1736 7080 t
(\(eds.\), John Wiley & Sons, Chichester, 1985, 207-249.)7 2414 1 898 7210 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 55 536 764
%%EndPage: 97 97
%%Page: 98 98
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
98 pagesetup
11 R f
(- 98 -)2 238 1 2761 490 t
( G)1 118(73. M.)1 304 2 720 850 t
9 R f
(ORGES)1142 850 w
11 R f
(-S)1437 850 w
9 R f
(CHLEUTER)1535 850 w
11 R f
( An asynchronous parallel genetic optimization strat-)6 2403(, ``Asparagos:)1 632 2 2005 850 t
(egy,'' in)1 385 1 898 980 t
11 I f
( Conf. on Genetic Algorithms)4 1343(3rd Int.)1 344 2 1324 980 t
11 R f
(, J. D. Schaffer \(ed.\), Morgan-Kaufman, San)6 2029 1 3011 980 t
(Francisco, 1989, 422-427.)2 1152 1 898 1110 t
( G)1 113(74. M.)1 304 2 720 1272 t
9 R f
(ORGES)1137 1272 w
11 R f
(-S)1432 1272 w
9 R f
(CHLEUTER)1530 1272 w
11 R f
(,)2000 1272 w
11 I f
(Genetic Algorithms and Population Structures \261 A Massively Par-)8 2978 1 2062 1272 t
(allel Algorithm)1 671 1 898 1402 t
11 R f
(, Doctoral Dissertation, Fachbereich Informatik, Universit)5 2550 1 1569 1402 t
(. .)1 50 1 4119 1336 t
(at Dortmund, 1991.)2 863 1 4119 1402 t
( W. G)2 288(75. J.)1 249 2 720 1564 t
9 R f
(REENE AND)1 519 1 1257 1564 t
11 R f
(K. J. S)2 318 1 1815 1564 t
9 R f
(UPOWIT)2133 1564 w
11 R f
(, ``Simulated annealing without rejecting moves,'')5 2280 1 2483 1564 t
11 I f
(IEEE)4803 1564 w
(Trans. Comput.-Aided Design)2 1322 1 898 1694 t
11 B f
(5)2257 1694 w
11 R f
(\(1986\), 221-228.)1 742 1 2340 1694 t
( G)1 107(76. J.)1 249 2 720 1856 t
9 R f
(REFENSTETTE)1076 1856 w
11 R f
(, R. G)2 265 1 1686 1856 t
9 R f
(OPAL)1951 1856 w
11 R f
(, B. J. R)3 359 1 2186 1856 t
9 R f
(OSMAITA)2545 1856 w
11 R f
(,)2955 1856 w
9 R f
(AND)3007 1856 w
11 R f
(D.)3231 1856 w
9 R f
(VAN)3367 1856 w
11 R f
(G)3591 1856 w
9 R f
(UCHT)3670 1856 w
11 R f
(, ``Genetic algorithms for)3 1125 1 3915 1856 t
(the traveling salesman problem,'' in)4 1614 1 898 1986 t
11 I f
(Proc. Int. Conf. on Genetic Algorithms and their Appli-)8 2494 1 2546 1986 t
(cations)898 2116 w
11 R f
(, J. J. Grefenstette \(Ed.\), Lawrence Erlbaum Associates, Hillsdale, NJ, 1985, 160-168.)11 3783 1 1216 2116 t
(77. M. G)2 423 1 720 2278 t
9 R f
(RO)1143 2278 w
(..)1213 2191 w
(TSCHEL AND)1 570 1 1268 2278 t
11 R f
(O. H)1 226 1 1878 2278 t
9 R f
(OLLAND)2104 2278 w
11 R f
( salesman)1 443(, ``Solution of large-scale symmetric travelling)5 2123 2 2474 2278 t
(problems,'')898 2408 w
11 I f
(Math. Programming)1 905 1 1435 2408 t
11 B f
(141-202)2377 2408 w
11 R f
(\(1991\), .)1 376 1 2771 2408 t
( G)1 123(78. J.)1 249 2 720 2570 t
9 R f
(U)1092 2570 w
11 R f
( study of the traveling)4 1034(, ``Efficient local search with search space smoothing: A case)9 2849 2 1157 2570 t
(salesman problem \(TSP\),'')2 1187 1 898 2700 t
11 I f
(IEEE Trans. Systems, Man, and Cybernetics)5 1956 1 2113 2700 t
11 B f
(24)4106 2700 w
11 R f
(\(1994\), 728-735.)1 742 1 4244 2700 t
( H)1 121(79. M.)1 304 2 720 2862 t
9 R f
(EAP)1145 2862 w
11 R f
(, R. K)2 293 1 1315 2862 t
9 R f
(APUR)1608 2862 w
11 R f
(,)1848 2862 w
9 R f
(AND)1913 2862 w
11 R f
(A. M)1 248 1 2150 2862 t
9 R f
(OURAD)2398 2862 w
11 R f
(, ``A fault tolerant implementation of the traveling)7 2322 1 2718 2862 t
( Austin, TX, May)3 781(salesman problem,'' Technical Report, Dept. of EECS, University of Texas,)9 3361 2 898 2992 t
(1989.)898 3122 w
( H. H)2 254(80. K.)1 285 2 720 3284 t
9 R f
(ELBIG)1259 3284 w
11 R f
(-H)1524 3284 w
9 R f
(ANSEN AND)1 524 1 1639 3284 t
11 R f
(J. K)1 184 1 2197 3284 t
9 R f
(RARUP)2381 3284 w
11 R f
( of the Held-Karp algorithm for the)6 1591(, ``Improvements)1 768 2 2681 3284 t
(symmetric traveling salesman problem,'')3 1806 1 898 3414 t
11 I f
(Math. Programming)1 905 1 2732 3414 t
11 B f
(7)3674 3414 w
11 R f
(\(1974\), 87-96.)1 632 1 3757 3414 t
( H)1 137(81. M.)1 304 2 720 3576 t
9 R f
(ELD AND)1 423 1 1161 3576 t
11 R f
(R. M. K)2 423 1 1642 3576 t
9 R f
(ARP)2065 3576 w
11 R f
( and minimum spanning)3 1162(, ``The traveling-salesman problem)3 1638 2 2240 3576 t
(trees,'')898 3706 w
11 I f
(Operations Res.)1 709 1 1232 3706 t
11 B f
(18)1978 3706 w
11 R f
(\(1970\), 1138-1162.)1 852 1 2116 3706 t
( H)1 112(82. M.)1 304 2 720 3868 t
9 R f
(ELD AND)1 398 1 1136 3868 t
11 R f
( K)1 113(R. M.)1 261 2 1567 3868 t
9 R f
(ARP)1941 3868 w
11 R f
(, ``The traveling-salesman problem and minimum spanning trees:)7 2924 1 2116 3868 t
(Part II,'')1 377 1 898 3998 t
11 I f
(Math. Programming)1 905 1 1303 3998 t
11 B f
(1)2245 3998 w
11 R f
(\(1971\), 6-25.)1 577 1 2328 3998 t
( H)1 108(83. M.)1 304 2 720 4160 t
9 R f
(ELD)1132 4160 w
11 R f
(, P. W)2 279 1 1307 4160 t
9 R f
(OLFE)1586 4160 w
11 R f
(,)1811 4160 w
9 R f
(AND)1863 4160 w
11 R f
(H. P. C)2 329 1 2087 4160 t
9 R f
(ROWDER)2416 4160 w
11 R f
(, ``Validation of subgradient optimization,'')4 1944 1 2806 4160 t
11 I f
(Math.)4780 4160 w
(Programming)898 4290 w
11 B f
(6)1552 4290 w
11 R f
(\(1974\), 62-88.)1 632 1 1635 4290 t
( H. H)2 250(84. J.)1 249 2 720 4452 t
9 R f
(OLLAND)1219 4452 w
11 R f
(,)1589 4452 w
11 I f
( Natural and Artificial Systems)4 1387(Adaptation in)1 608 2 1649 4452 t
11 R f
(, University of Michigan Press,)4 1396 1 3644 4452 t
(Ann Arbor, 1975.)2 782 1 898 4582 t
( H)1 108(85. A.)1 285 2 720 4744 t
9 R f
(OMAIFAR)1113 4744 w
11 R f
( G)1 109(, S.)1 147 2 1528 4744 t
9 R f
(UAN)1784 4744 w
11 R f
(,)1979 4744 w
9 R f
(AND)2032 4744 w
11 R f
(G. L)1 204 1 2257 4744 t
9 R f
(IEPENS)2461 4744 w
11 R f
(, ``A new approach on the traveling salesman prob-)8 2274 1 2766 4744 t
(lem,'' in)1 384 1 898 4874 t
11 I f
(Proc. 5th Int. Conf. on Genetic Algorithms)6 1907 1 1315 4874 t
11 R f
(, S. Forrest \(Ed.\), Morgan Kaufman, San)6 1818 1 3222 4874 t
(Francisco, CA, 1993, 460-466.)3 1361 1 898 5004 t
( H)1 116(86. I.)1 242 2 720 5166 t
9 R f
(ONG)1078 5166 w
11 R f
(, A. B. K)3 427 1 1273 5166 t
9 R f
(AHNG)1700 5166 w
11 R f
(,)1960 5166 w
9 R f
(AND)2021 5166 w
11 R f
(B-R. M)1 348 1 2254 5166 t
9 R f
(OON)2602 5166 w
11 R f
(, ``Improved large-step Markov chain variants for)6 2243 1 2797 5166 t
( Science Department,)2 967(the symmetric TSP,'' Report No. UCLA CSD TR-950035, Computer)8 3175 2 898 5296 t
(University of California, Los Angelos, September, 1995.)6 2500 1 898 5426 t
( J. H)2 220(87. J.)1 249 2 720 5588 t
9 R f
(OPFIELD AND)1 595 1 1189 5588 t
11 R f
(D. W. T)2 375 1 1819 5588 t
9 R f
(ANK)2194 5588 w
11 R f
(, ```Neural' computation of decisions in optimization prob-)7 2651 1 2389 5588 t
(lems,'')898 5718 w
11 I f
(Biol. Cybern)1 563 1 1234 5718 t
11 B f
(52)1834 5718 w
11 R f
(\(1985\), 141-152.)1 742 1 1972 5718 t
( H)1 115(88. M.)1 304 2 720 5880 t
9 R f
(UANG)1139 5880 w
11 R f
(, F. R)2 264 1 1399 5880 t
9 R f
(OMEO)1663 5880 w
11 R f
(,)1928 5880 w
9 R f
(AND)1987 5880 w
11 R f
(A. S)1 205 1 2218 5880 t
9 R f
(ANGIOVANNI)2423 5880 w
11 R f
(-V)3003 5880 w
9 R f
(INCENTELLI)3118 5880 w
11 R f
(, ``An efficient general cooling)4 1397 1 3643 5880 t
(schedule for simulated annealing,'' in)4 1742 1 898 6010 t
11 I f
(Proc. IEEE Int. Conf. on Computer Aided Design)7 2324 1 2688 6010 t
11 R f
(,)5012 6010 w
(IEEE, Piscataway, NJ, 1986, 381-384.)4 1690 1 898 6140 t
( J)1 75(89. P.)1 268 2 720 6302 t
9 R f
(OG)1063 6302 w
11 R f
(, J. Y. S)3 364 1 1193 6302 t
9 R f
(UH)1557 6302 w
11 R f
(,)1687 6302 w
9 R f
(AND)1742 6302 w
11 R f
(D.)1969 6302 w
9 R f
(VAN)2108 6302 w
11 R f
(G)2335 6302 w
9 R f
(UCHT)2414 6302 w
11 R f
( the traveling)2 590(, ``Parallel genetic algorithms applied to)5 1791 2 2659 6302 t
( Indiana University,)2 924(salesman problem,'' Report No. 314, Computer Science Department,)7 3218 2 898 6432 t
(Bloomington, IN, 1990.)2 1058 1 898 6562 t
( S. J)2 191(90. D.)1 285 2 720 6724 t
9 R f
(OHNSON)1196 6724 w
11 R f
(, ``More approaches to the travelling salesman guide,'')7 2418 1 1571 6724 t
11 I f
(Nature)4018 6724 w
11 B f
(330)4361 6724 w
11 R f
(\(December)4556 6724 w
(10, 1987\), 525.)2 671 1 898 6854 t
( S. J)2 223(91. D.)1 285 2 720 7016 t
9 R f
(OHNSON)1228 7016 w
11 R f
( and the traveling salesman problem,'' in)6 1912(, ``Local optimization)2 996 2 1603 7016 t
11 I f
(Proc. 17th)1 483 1 4557 7016 t
( Automata, Languages, and Programming)4 1937(Colloq. on)1 487 2 898 7146 t
11 R f
(, Lecture Notes in Computer Science)5 1718 1 3322 7146 t
11 B f
(443)898 7276 w
11 R f
(, Springer-Verlag, Berlin, 1990, 446-461.)4 1824 1 1063 7276 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 48 536 764
%%EndPage: 98 98
%%Page: 99 99
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
99 pagesetup
11 R f
(- 99 -)2 238 1 2761 490 t
( S. J)2 193(92. D.)1 285 2 720 850 t
9 R f
(OHNSON)1198 850 w
11 R f
(, C. R. A)3 401 1 1573 850 t
9 R f
(RAGON)1974 850 w
11 R f
(, L. A. M)3 418 1 2294 850 t
9 R f
(C)2712 850 w
11 R f
(G)2772 850 w
9 R f
(EOCH)2851 850 w
11 R f
(,)3096 850 w
9 R f
(AND)3149 850 w
11 R f
(C. S)1 194 1 3374 850 t
9 R f
(CHEVON)3568 850 w
11 R f
( Sim-)1 246(, ``Optimization by)2 851 2 3943 850 t
( \(Graph Partitioning\),'')2 1072(ulated Annealing: An Experimental Evaluation, Part I)6 2522 2 898 980 t
11 I f
(Operations)4545 980 w
(Res.)898 1110 w
11 B f
(37)1121 1110 w
11 R f
(\(1989\), 865-892.)1 742 1 1259 1110 t
( S. J)2 193(93. D.)1 285 2 720 1272 t
9 R f
(OHNSON)1198 1272 w
11 R f
(, C. R. A)3 401 1 1573 1272 t
9 R f
(RAGON)1974 1272 w
11 R f
(, L. A. M)3 418 1 2294 1272 t
9 R f
(C)2712 1272 w
11 R f
(G)2772 1272 w
9 R f
(EOCH)2851 1272 w
11 R f
(,)3096 1272 w
9 R f
(AND)3149 1272 w
11 R f
(C. S)1 194 1 3374 1272 t
9 R f
(CHEVON)3568 1272 w
11 R f
( Sim-)1 246(, ``Optimization by)2 851 2 3943 1272 t
(ulated Annealing: An Experimental Evaluation, Part III \(The Traveling Salesman Problem\),'')10 4142 1 898 1402 t
(in preparation \(1996\).)2 960 1 898 1532 t
( S. J)2 225(94. D.)1 285 2 720 1694 t
9 R f
(OHNSON)1230 1694 w
11 R f
(, J. L. B)3 406 1 1605 1694 t
9 R f
(ENTLEY)2011 1694 w
11 R f
(, L. A. M)3 469 1 2361 1694 t
9 R f
(C)2830 1694 w
11 R f
(G)2890 1694 w
9 R f
(EOCH)2969 1694 w
11 R f
(,)3214 1694 w
9 R f
(AND)3284 1694 w
11 R f
(E. E. R)2 358 1 3526 1694 t
9 R f
(OTHBERG)3884 1694 w
11 R f
(, ``Near-optimal)1 731 1 4309 1694 t
(solutions to very large traveling salesman problems,'' in preparation.)8 3034 1 898 1824 t
( S. J)2 193(95. D.)1 285 2 720 1986 t
9 R f
(OHNSON)1198 1986 w
11 R f
( M)1 129(, L. A.)2 290 2 1573 1986 t
9 R f
(C)1992 1986 w
11 R f
(G)2052 1986 w
9 R f
(EOCH)2131 1986 w
11 R f
(,)2376 1986 w
9 R f
(AND)2430 1986 w
11 R f
(E. E. R)2 326 1 2656 1986 t
9 R f
(OTHBERG)2982 1986 w
11 R f
(, ``Asymptotic experimental analysis)3 1633 1 3407 1986 t
(for the Held-Karp traveling salesman bound,'')5 2100 1 898 2116 t
11 I f
(in)3039 2116 w
11 R f
( Symp. on)2 476(``Proceedings 7th ACM SIAM)3 1398 2 3166 2116 t
( York,)1 297(Discrete Algorithms,'' Society for Industrial and Applied Mathematics, Philadelphia)8 3845 2 898 2246 t
(1996.)898 2376 w
( S. J)2 193(96. D.)1 285 2 720 2538 t
9 R f
(OHNSON)1198 2538 w
11 R f
(, C. H. P)3 389 1 1573 2538 t
9 R f
(APADIMITRIOU)1962 2538 w
11 R f
(,)2622 2538 w
9 R f
(AND)2675 2538 w
11 R f
(M. Y)1 235 1 2900 2538 t
9 R f
(ANNAKAKIS)3135 2538 w
11 R f
(, ``How easy is local search?,'')5 1370 1 3670 2538 t
11 I f
(J. Comput. System Sci.)3 1003 1 898 2668 t
11 B f
(37)1938 2668 w
11 R f
(\(1988\), 79-100.)1 687 1 2076 2668 t
( J)1 78(97. A.)1 285 2 720 2830 t
9 R f
(OPPE)1083 2830 w
11 R f
(, H. R. A. C)4 558 1 1303 2830 t
9 R f
(ARDON)1861 2830 w
11 R f
(,)2181 2830 w
9 R f
(AND)2239 2830 w
11 R f
(J. C. B)2 317 1 2469 2830 t
9 R f
(IOCH)2786 2830 w
11 R f
( the traveling)2 596(, ``A neural network for solving)5 1438 2 3006 2830 t
(salesman problem on the basis of city adjacency in the tour,'' in)11 2969 1 898 2960 t
11 I f
( on)1 151(Proc. Int. Joint Conf.)3 980 2 3909 2960 t
(Neural Network)1 707 1 898 3090 t
11 R f
(, IEEE, Piscataway, NJ, 1990, III:961-964.)5 1885 1 1605 3090 t
( J)1 74(98. M.)1 304 2 720 3252 t
9 R f
(U)1098 3252 w
(..)1108 3165 w
(NGER)1163 3252 w
11 R f
(, G. R)2 271 1 1408 3252 t
9 R f
(EINELT)1679 3252 w
11 R f
(,)1994 3252 w
9 R f
(AND)2048 3252 w
11 R f
(G. R)1 213 1 2274 3252 t
9 R f
(INALDI)2487 3252 w
11 R f
(, ``The Traveling Salesman Problem,'' Report No.)6 2243 1 2797 3252 t
( Informatik, Universit)2 992(92.113, Angewandte Mathematik und)3 1712 2 898 3382 t
(. .)1 50 1 3602 3316 t
(at zu K)2 347 1 3602 3382 t
(. .)1 50 1 3949 3316 t
(oln, Cologne, Germany,)2 1091 1 3949 3382 t
(1994.)898 3512 w
( M. K)2 277(99. R.)1 280 2 720 3674 t
9 R f
(ARP)1277 3674 w
11 R f
( traveling-salesman in)2 988(, ``Probabilistic analysis of partitioning algorithms for the)7 2600 2 1452 3674 t
(the plane,'')1 499 1 898 3804 t
11 I f
(Math. Oper. Res.)2 755 1 1425 3804 t
11 B f
(2)2217 3804 w
11 R f
(\(1977\), 209-224.)1 742 1 2300 3804 t
( K)1 124(100. W.)1 364 2 720 3966 t
9 R f
(ERN)1208 3966 w
11 R f
( the Euclidean TSP,'')3 1001(, ``A probabilistic analysis of the switching algorithm for)8 2651 2 1388 3966 t
11 I f
(Math. Programming)1 905 1 953 4096 t
11 B f
(44)1895 4096 w
11 R f
(\(1989\), 213-219.)1 742 1 2033 4096 t
( W. K)2 266(101. B.)1 335 2 720 4258 t
9 R f
(ERNIGHAN AND)1 688 1 1321 4258 t
11 R f
(S. L)1 185 1 2037 4258 t
9 R f
(IN)2222 4258 w
11 R f
( Graphs,'')1 445(, ``An Efficient Heuristic Procedure for Partitioning)6 2278 2 2317 4258 t
11 I f
(Bell Syst. Tech. J.)3 783 1 953 4388 t
11 B f
(49)1773 4388 w
11 R f
(\(1970\), 291-307.)1 742 1 1911 4388 t
( K)1 107(102. S.)1 323 2 720 4550 t
9 R f
(IRKPATRICK)1150 4550 w
11 R f
(, private communication \(1982\).)3 1420 1 1690 4550 t
( K)1 132(103. S.)1 323 2 720 4712 t
9 R f
(IRKPATRICK)1175 4712 w
11 R f
(, ``Optimization by simulated annealing: Quantitative studies,'')6 2943 1 1715 4712 t
11 I f
(J. Stat.)1 329 1 4711 4712 t
(Physics)953 4842 w
11 B f
(34)1325 4842 w
11 R f
(\(1984\), 976-986.)1 742 1 1463 4842 t
( K)1 131(104. S.)1 323 2 720 5004 t
9 R f
(IRKPATRICK)1174 5004 w
11 R f
(, C. D. G)3 472 1 1714 5004 t
9 R f
(ELATT)2186 5004 w
11 R f
(, J)1 123 1 2471 5004 t
9 R f
(R)2594 5004 w
11 R f
(,)2654 5004 w
9 R f
(AND)2729 5004 w
11 R f
(M. P. V)2 399 1 2976 5004 t
9 R f
(ECCHI)3375 5004 w
11 R f
( Simulated)1 500(, ``Optimization by)2 895 2 3645 5004 t
(Annealing,'')953 5134 w
11 I f
(Science)1538 5134 w
11 B f
(220)1908 5134 w
11 R f
(\(13 May 1983\), 671-680.)3 1109 1 2101 5134 t
( K)1 131(105. S.)1 323 2 720 5296 t
9 R f
(IRKPATRICK AND)1 782 1 1174 5296 t
11 R f
(G. T)1 226 1 2008 5296 t
9 R f
(OULOUSE)2234 5296 w
11 R f
(, ``Configuration space and the travelling salesman)6 2386 1 2654 5296 t
(problem,'')953 5426 w
11 I f
(J. Physique)1 506 1 1447 5426 t
11 B f
(46)1990 5426 w
11 R f
(\(1985\), 1277-1292.)1 852 1 2128 5426 t
( K)1 129(106. J.)1 304 2 720 5588 t
9 R f
(NOX)1153 5588 w
11 R f
(,)1348 5588 w
11 I f
( traveling salesman problem)3 1325(The application of tabu search to the symmetric)7 2261 2 1426 5588 t
11 R f
(,)5012 5588 w
( Administration, University of Colorado, Boul-)5 2113(Ph.D. Dissertation, College of Business and)5 1974 2 953 5718 t
(der, CO, 1989.)2 652 1 953 5848 t
( K)1 113(107. J.)1 304 2 720 6010 t
9 R f
(NOX)1137 6010 w
11 R f
( traveling salesman problem,'')3 1363(, ``Tabu search performance on the symmetric)6 2066 2 1332 6010 t
11 I f
(Com-)4796 6010 w
(puters & Ops. Res.)3 836 1 953 6140 t
11 B f
(21)1826 6140 w
11 R f
(\(1994\), 867-876.)1 742 1 1964 6140 t
( K)1 123(108. J.)1 304 2 720 6302 t
9 R f
(NOX AND)1 429 1 1147 6302 t
11 R f
(F. G)1 213 1 1620 6302 t
9 R f
(LOVER)1833 6302 w
11 R f
( testing of traveling salesman heuristics derived)6 2196(, ``Comparative)1 711 2 2133 6302 t
(from tabu search, genetic algorithms and simulated annealing,'' Technical Report, Center)10 4087 1 953 6432 t
(for Applied Artificial Intelligence, University of Colorado, September, 1989.)8 3389 1 953 6562 t
( K)1 107(109. T.)1 328 2 720 6724 t
9 R f
(OHONEN)1155 6724 w
11 R f
(,)1535 6724 w
11 I f
(Self-Organization and Associative Memory)3 1902 1 1591 6724 t
11 R f
(, Springer-Verlag, Berlin, 1988.)3 1402 1 3493 6724 t
( K)1 130(110. B.)1 335 2 720 6886 t
9 R f
(ORTE)1185 6886 w
11 R f
( combinatorial optimization,'' talk at the 13th International)7 2765(, ``Applications of)2 855 2 1420 6886 t
(Mathematical Programming Symposium, Tokyo, 1988.)4 2439 1 953 7016 t
( K)1 111(111. W.)1 364 2 720 7178 t
9 R f
(RAUTH AND)1 532 1 1195 7178 t
11 R f
(M. M)1 257 1 1760 7178 t
9 R f
(E)2017 7178 w
11 R f
(\302)2033 7156 w
9 R f
(ZARD)2079 7178 w
11 R f
(, ``The cavity method and the travelling-salesman problem,'')7 2716 1 2324 7178 t
11 I f
(Europhys. Lett.)1 677 1 953 7308 t
11 B f
(8)1667 7308 w
11 R f
(\(1989\), 213-218.)1 742 1 1750 7308 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 45 536 764
%%EndPage: 99 99
%%Page: 100 100
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
100 pagesetup
11 R f
(- 100 -)2 293 1 2733 490 t
( W. K)2 314(112. M.)1 359 2 720 850 t
9 R f
(RENTEL)1393 850 w
11 R f
(, ``Structure in locally optimal solutions,'')5 1983 1 1738 850 t
11 I f
(in)3774 850 w
11 R f
(``Proceedings 30th Ann.)2 1127 1 3913 850 t
( Science,'' IEEE Computer Society, Los Angeles, Calif.,)7 2499(Symp. on Foundations of Computer)4 1588 2 953 980 t
(1989, 216-221.)1 670 1 953 1110 t
( W. K)2 266(113. M.)1 359 2 720 1272 t
9 R f
(RENTEL)1345 1272 w
11 R f
(, private communication \(1994\).)3 1420 1 1690 1272 t
( L)1 121(114. J.)1 304 2 720 1434 t
9 R f
(AM)1145 1434 w
11 R f
(,)1290 1434 w
11 I f
( Simulated Annealing Schedule)3 1452(An Efficient)1 549 2 1372 1434 t
11 R f
(, Ph.D. Dissertation, Department of)4 1667 1 3373 1434 t
(Computer Science, Yale University, New Haven, CT, 1988.)7 2638 1 953 1564 t
( L)1 105(115. J.)1 304 2 720 1726 t
9 R f
(AM AND)1 373 1 1129 1726 t
11 R f
(J.-M. D)1 350 1 1540 1726 t
9 R f
(ELOSME)1890 1726 w
11 R f
( efficient simulated annealing schedule: implementation)5 2518(, ``An)1 272 2 2250 1726 t
(and evaluation,'' manuscript \(1988\).)3 1607 1 953 1856 t
( L)1 109( L.)1 136(116. E.)1 328 3 720 2018 t
9 R f
(AWLER)1293 2018 w
11 R f
(,)1613 2018 w
11 I f
(Combinatorial Optimization: Networks and Matroids)4 2415 1 1683 2018 t
11 R f
(, Holt, Rinehart, and)3 942 1 4098 2018 t
(Winston, New York, 1976.)3 1192 1 953 2148 t
( L. L)2 220(117. E.)1 328 2 720 2310 t
9 R f
(AWLER)1268 2310 w
11 R f
(, J. K. L)3 360 1 1588 2310 t
9 R f
(ENSTRA)1948 2310 w
11 R f
(, A. H. G. R)4 539 1 2298 2310 t
9 R f
(INNOOY)2837 2310 w
11 R f
(K)3221 2310 w
9 R f
(AN)3300 2310 w
11 R f
(,)3430 2310 w
9 R f
(AND)3482 2310 w
11 R f
(D. B. S)2 329 1 3706 2310 t
9 R f
(HMOYS)4035 2310 w
11 R f
(,)4360 2310 w
11 I f
(The Traveling)1 623 1 4417 2310 t
(Salesman Problem)1 827 1 953 2440 t
11 R f
(, John Wiley & Sons, Chichester, 1985.)6 1746 1 1780 2440 t
( L)1 96(118. J.)1 304 2 720 2602 t
9 R f
(EE AND)1 329 1 1120 2602 t
11 R f
(M. Y. C)2 365 1 1478 2602 t
9 R f
(HOI)1843 2602 w
11 R f
( and the traveling sales-)4 1051(, ``Optimization by multicanonical annealing)4 1986 2 2003 2602 t
(man problem,'')1 683 1 953 2732 t
11 I f
(Physical Review E)2 817 1 1664 2732 t
11 B f
(50)2518 2732 w
11 R f
(\(1994\), R651-R654.)1 890 1 2656 2732 t
( L)1 119(119. J.)1 304 2 720 2894 t
9 R f
(EE)1143 2894 w
11 R f
( Entropic sampling,'')2 988(, ``New Monte-Carlo algorithm:)3 1488 2 1253 2894 t
11 I f
(Phys. Rev. Lett.)2 738 1 3782 2894 t
11 B f
(71)4557 2894 w
11 R f
(\(1993\),)4720 2894 w
(211-214, 2353.)1 670 1 953 3024 t
( L)1 95(120. J.)1 304 2 720 3186 t
9 R f
(EE)1119 3186 w
11 R f
(, private communication \(1995\).)3 1420 1 1229 3186 t
( L)1 114(121. S.)1 323 2 720 3348 t
9 R f
(IN)1157 3348 w
11 R f
(, ``Computer solutions of the traveling salesman problem,'')7 2751 1 1252 3348 t
11 I f
(Bell Syst. Tech. J.)3 843 1 4050 3348 t
11 B f
(44)4930 3348 w
11 R f
(\(1965\), 2245-2269.)1 852 1 953 3478 t
( L)1 120(122. S.)1 323 2 720 3640 t
9 R f
(IN AND)1 338 1 1163 3640 t
11 R f
(B. W. K)2 420 1 1554 3640 t
9 R f
(ERNIGHAN)1974 3640 w
11 R f
(, ``An Effective Heuristic Algorithm for the Traveling-)7 2596 1 2444 3640 t
(Salesman Problem,'')1 922 1 953 3770 t
11 I f
(Operations Res.)1 709 1 1903 3770 t
11 B f
(21)2649 3770 w
11 R f
(\(1973\), 498-516.)1 742 1 2787 3770 t
( L)1 95(123. G.)1 340 2 720 3932 t
9 R f
(UEKER)1155 3932 w
11 R f
(, manuscript, Princeton University, 1976.)4 1817 1 1455 3932 t
( M)1 129(124. K.-T.)1 471 2 720 4094 t
9 R f
(AK AND)1 351 1 1320 4094 t
11 R f
( M)1 130(A. J.)1 209 2 1702 4094 t
9 R f
(ORTON)2041 4094 w
11 R f
(, ``A modified Lin-Kernighan traveling salesman heuristic,'')6 2689 1 2351 4094 t
11 I f
(Operations Res. Lett.)2 937 1 953 4224 t
11 B f
(13)1927 4224 w
11 R f
(\(1993\), 127-132.)1 742 1 2065 4224 t
( M)1 136(125. M.)1 359 2 720 4386 t
9 R f
(ALEK)1215 4386 w
11 R f
(, M. G)2 311 1 1455 4386 t
9 R f
(URUSWAMY)1766 4386 w
11 R f
(,)2301 4386 w
9 R f
(AND)2363 4386 w
11 R f
(M. P)1 227 1 2597 4386 t
9 R f
(ANDYA)2824 4386 w
11 R f
(, ``Serial and parallel simulated annealing)5 1891 1 3149 4386 t
(and tabu search algorithms for the traveling salesman problem,'')8 2935 1 953 4516 t
11 I f
( Res.)1 225(Ann. Operations)1 740 2 3928 4516 t
11 B f
(21)4930 4516 w
11 R f
(\(1989\), 59-84.)1 632 1 953 4646 t
( C. M)2 260(126. O.)1 340 2 720 4808 t
9 R f
(ARTIN AND)1 495 1 1320 4808 t
11 R f
( O)1 110(S. W.)1 251 2 1845 4808 t
9 R f
(TTO)2206 4808 w
11 R f
(, ``Combining simulated annealing with local search heuris-)7 2659 1 2381 4808 t
(tics,'')953 4938 w
11 I f
( Optimization)1 606(in Meta-Heuristics in Combinatorial)3 1628 2 1237 4938 t
11 R f
(, G. Laporte and I.H. Osman \(eds.\),)6 1569 1 3471 4938 t
(Annals of Operations Research, Vol. 60, Balzer Scientific Publishers, Amsterdam, 1995.)10 3903 1 953 5068 t
( M)1 131(127. O.)1 340 2 720 5230 t
9 R f
(ARTIN)1191 5230 w
11 R f
(, S. W. O)3 427 1 1466 5230 t
9 R f
(TTO)1893 5230 w
11 R f
(,)2068 5230 w
9 R f
(AND)2124 5230 w
11 R f
(E. W. F)2 354 1 2352 5230 t
9 R f
(ELTEN)2706 5230 w
11 R f
(, ``Large-step Markov chains for the traveling)6 2049 1 2991 5230 t
(salesman problem,'')1 896 1 953 5360 t
11 I f
(Complex Systems)1 765 1 1877 5360 t
11 B f
(5)2679 5360 w
11 R f
(\(1991\), 299-326.)1 742 1 2762 5360 t
( M)1 145(128. O.)1 340 2 720 5522 t
9 R f
(ARTIN)1205 5522 w
11 R f
(, S. W. O)3 469 1 1480 5522 t
9 R f
(TTO)1949 5522 w
11 R f
(,)2124 5522 w
9 R f
(AND)2194 5522 w
11 R f
(E. W. F)2 384 1 2437 5522 t
9 R f
(ELTEN)2821 5522 w
11 R f
(, ``Large-step Markov chains for the TSP)6 1934 1 3106 5522 t
(incorporating local search heuristics,'')3 1687 1 953 5652 t
11 I f
(Operations Res. Lett.)2 937 1 2668 5652 t
11 B f
(11)3642 5652 w
11 R f
(\(1992\), 219-224.)1 742 1 3780 5652 t
( M)1 131(129. W.)1 364 2 720 5814 t
9 R f
(ETROPOLIS)1215 5814 w
11 R f
(, A. R)2 275 1 1700 5814 t
9 R f
(OSENBLUTH)1975 5814 w
11 R f
(, M. R)2 294 1 2510 5814 t
9 R f
(OSENBLUTH)2804 5814 w
11 R f
(, A. T)2 268 1 3339 5814 t
9 R f
(ELLER)3607 5814 w
11 R f
(,)3887 5814 w
9 R f
(AND)3943 5814 w
11 R f
(E. T)1 195 1 4171 5814 t
9 R f
(ELLER)4366 5814 w
11 R f
(, ``Equa-)1 394 1 4646 5814 t
( machines,'')1 557(tion of state calculations by fast computing)6 1991 2 953 5944 t
11 I f
(J. Chem. Phys.)2 687 1 3544 5944 t
11 B f
(21)4268 5944 w
11 R f
(\(1953\), 1087-)1 619 1 4421 5944 t
(1092.)953 6074 w
( M)1 132(130. D.)1 340 2 720 6236 t
9 R f
(ITRA)1192 6236 w
11 R f
(, F. R)2 260 1 1402 6236 t
9 R f
(OMEO)1662 6236 w
11 R f
(,)1927 6236 w
9 R f
(AND)1984 6236 w
11 R f
(A. S)1 203 1 2213 6236 t
9 R f
(ANGIOVANNI)2416 6236 w
11 R f
(-V)2996 6236 w
9 R f
(INCENTELLI)3111 6236 w
11 R f
(, ``Convergence and finite-time)3 1404 1 3636 6236 t
(behavior of simulated annealing,'')3 1512 1 953 6366 t
11 I f
(J. Advan. Appl. Prob.)3 952 1 2493 6366 t
11 B f
(18)3482 6366 w
11 R f
(\(1986\), 747-771.)1 742 1 3620 6366 t
( M)1 128(131. H.)1 340 2 720 6528 t
9 R f
(U)1188 6528 w
(..)1198 6441 w
(HLENBEIN)1253 6528 w
11 R f
( and space \261 The parallel genetic algorithm,'' in)8 2131(, ``Evolution in time)3 907 2 1703 6528 t
11 I f
(Foun-)4772 6528 w
(dations of Genetic Algorithms)3 1340 1 953 6658 t
11 R f
( Mateo, 1991, 316-)3 853(, G. Rawlins \(Ed.\), Morgen-Kaufman, San)5 1894 2 2293 6658 t
(337.)953 6788 w
( M)1 126(132. H.)1 340 2 720 6950 t
9 R f
(U)1186 6950 w
(..)1196 6863 w
(HLENBEIN)1251 6950 w
11 R f
(, private communication \(1995\).)3 1420 1 1701 6950 t
( M)1 162(133. H.)1 340 2 720 7112 t
9 R f
(U)1222 7112 w
(..)1232 7025 w
(HLENBEIN AND)1 704 1 1287 7112 t
11 R f
(J. K)1 214 1 2055 7112 t
9 R f
(INDERMANN)2269 7112 w
11 R f
( and learning \261)3 767(, ``The dynamics of evolution)4 1454 2 2819 7112 t
(Towards genetic neural networks,'' in)4 1784 1 953 7242 t
11 I f
(Connectionism in Perspective)2 1368 1 2793 7242 t
11 R f
( Pfeiffer \(Ed.\),)2 693(, R.)1 186 2 4161 7242 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 51 536 764
%%EndPage: 100 100
%%Page: 101 101
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
101 pagesetup
11 R f
(- 101 -)2 293 1 2733 490 t
(North-Holland, Amsterdam, 1989, 173-198.)3 1940 1 953 850 t
( M)1 148(134. H.)1 340 2 720 1012 t
9 R f
(U)1208 1012 w
(..)1218 925 w
(HLENBEIN)1273 1012 w
11 R f
(, M. G)2 333 1 1723 1012 t
9 R f
(ORGES)2056 1012 w
11 R f
(-S)2351 1012 w
9 R f
(CHLEUTER)2449 1012 w
11 R f
(,)2919 1012 w
9 R f
(AND)2992 1012 w
11 R f
(O. K)1 237 1 3238 1012 t
9 R f
(RA)3475 1012 w
(..)3545 925 w
(MER)3600 1012 w
11 R f
(, ``Evolution algorithms in)3 1245 1 3795 1012 t
(combinatorial optimization,'')1 1295 1 953 1142 t
11 I f
(Parallel Comput.)1 766 1 2276 1142 t
11 B f
(7)3079 1142 w
11 R f
(\(1988\), 65-85.)1 632 1 3162 1142 t
( N)1 132(135. S.)1 323 2 720 1304 t
9 R f
(AHAR)1175 1304 w
11 R f
(, S. S)2 286 1 1430 1304 t
9 R f
(AHNI)1716 1304 w
11 R f
(,)1941 1304 w
9 R f
(AND)2017 1304 w
11 R f
(E. S)1 210 1 2265 1304 t
9 R f
(HRAGOWITZ)2475 1304 w
11 R f
( with simulated annealing,'')3 1312(, ``Experiments)1 708 2 3020 1304 t
( University of Minnesota, Minneapolis,)4 1797(Report No. 84-36, Computer Science Department,)5 2290 2 953 1434 t
(MN, December, 1984.)2 985 1 953 1564 t
( O)1 107(136. I.)1 297 2 720 1726 t
9 R f
(LIVER)1124 1726 w
11 R f
( S)1 91(, D.)1 163 2 1389 1726 t
9 R f
(MITH)1643 1726 w
11 R f
(,)1873 1726 w
9 R f
(AND)1925 1726 w
11 R f
(J. H)1 179 1 2149 1726 t
9 R f
(OLLAND)2328 1726 w
11 R f
(, ``A study of permutation crossover operators on the)8 2342 1 2698 1726 t
( in)1 124(traveling salesman problem,'')2 1336 2 953 1856 t
11 I f
(Proc. 2nd Int. Conf. on Genetic Algorithms)6 1967 1 2451 1856 t
11 R f
(, J. J. Grefen-)3 622 1 4418 1856 t
(stette \(Ed.\), Lawrence Erlbaum Associates, Hillsdale, NJ, 1987, 224-230.)8 3227 1 953 1986 t
( L. O)2 238(137. H.)1 340 2 720 2148 t
9 R f
(NG AND)1 352 1 1298 2148 t
11 R f
(J. B. M)2 337 1 1682 2148 t
9 R f
(OORE)2019 2148 w
11 R f
(, ``Worst-case analysis of two travelling salesman heuristics,'')7 2776 1 2264 2148 t
11 I f
(Operations Res. Lett.)2 937 1 953 2278 t
11 B f
(2)1927 2278 w
11 R f
(\(1984\), 273-277.)1 742 1 2010 2278 t
( O)1 108(138. I.)1 297 2 720 2440 t
9 R f
(R)1125 2440 w
11 R f
(,)1185 2440 w
11 I f
( to the Logistics)3 709(Traveling Salesman-Type Combinatorial Problems and their Relation)6 3089 2 1242 2440 t
( Banking)1 404(of Regional Blood)2 824 2 953 2570 t
11 R f
(, Ph.D. Thesis, Department of Industrial Engineering and Man-)8 2859 1 2181 2570 t
(agement Sciences, Northwestern University, Evanston, IL, 1976.)6 2854 1 953 2700 t
( P)1 98(139. M.)1 359 2 720 2862 t
9 R f
(ADBERG AND)1 597 1 1177 2862 t
11 R f
(G. R)1 218 1 1811 2862 t
9 R f
(INALDI)2029 2862 w
11 R f
(, ``Optimization of a 532-city symmetric traveling salesman)7 2701 1 2339 2862 t
(problem by branch and cut,'')4 1277 1 953 2992 t
11 I f
(Operations Res. Lett.)2 937 1 2258 2992 t
11 B f
(6)3232 2992 w
11 R f
(\(1987\), 1-7.)1 522 1 3315 2992 t
( P)1 106(140. M.)1 359 2 720 3154 t
9 R f
(ADBERG AND)1 604 1 1185 3154 t
11 R f
(G. R)1 225 1 1833 3154 t
9 R f
(INALDI)2058 3154 w
11 R f
( algorithm for the resolution of large-)6 1744(, ``A branch-and-cut)2 928 2 2368 3154 t
(scale symmetric traveling salesman problems,'')4 2095 1 953 3284 t
11 I f
(SIAM Review)1 593 1 3076 3284 t
11 B f
(33)3706 3284 w
11 R f
(\(1991\), 60-100.)1 687 1 3844 3284 t
( H. P)2 257(141. C.)1 335 2 720 3446 t
9 R f
(APADIMITRIOU)1312 3446 w
11 R f
( the traveling)2 614(, ``The complexity of the Lin-Kernighan heuristic for)7 2454 2 1972 3446 t
(salesman problem,'')1 896 1 953 3576 t
11 I f
(SIAM J. Comput.)2 758 1 1877 3576 t
11 B f
(21)2672 3576 w
11 R f
(\(1992\), 450-465.)1 742 1 2810 3576 t
( H. P)2 227(142. C.)1 335 2 720 3738 t
9 R f
(APADIMITRIOU AND)1 879 1 1282 3738 t
11 R f
(K. S)1 198 1 2190 3738 t
9 R f
(TEIGLITZ)2388 3738 w
11 R f
(, ``On the complexity of local search for the travel-)9 2252 1 2788 3738 t
(ing salesman problem,'')2 1065 1 953 3868 t
11 I f
(SIAM J. Comput.)2 758 1 2046 3868 t
11 B f
(6)2841 3868 w
11 R f
(\(1977\), 76-83.)1 632 1 2924 3868 t
( P)1 98( H.)1 142(143. C.)1 335 3 720 4030 t
9 R f
(APADIMITRIOU AND)1 886 1 1295 4030 t
11 R f
(K. S)1 205 1 2217 4030 t
9 R f
(TEIGLITZ)2422 4030 w
11 R f
(, ``Some examples of difficult traveling salesman)6 2218 1 2822 4030 t
(problems,'')953 4160 w
11 I f
(Operations Res.)1 709 1 1490 4160 t
11 B f
(26)2236 4160 w
11 R f
(\(1978\), 434-443.)1 742 1 2374 4160 t
( H. P)2 251(144. C.)1 335 2 720 4322 t
9 R f
(APADIMITRIOU AND)1 891 1 1306 4322 t
11 R f
(U. V. V)2 375 1 2238 4322 t
9 R f
(AZIRANI)2613 4322 w
11 R f
(, ``On two geometric problems related to the)7 2057 1 2983 4322 t
(travelling salesman problem,'')2 1345 1 953 4452 t
11 I f
(J. Algorithms)1 594 1 2326 4452 t
11 B f
(5)2957 4452 w
11 R f
(\(1984\), 231-246.)1 742 1 3040 4452 t
( G. P)2 289(145. A.)1 340 2 720 4614 t
9 R f
(ERCUS AND)1 540 1 1349 4614 t
11 R f
(O. C. M)2 429 1 1950 4614 t
9 R f
(ARTIN)2379 4614 w
11 R f
(, ``Finite size and dimensional dependence in the)7 2386 1 2654 4614 t
(Euclidean traveling salesman problem,'')3 1780 1 953 4744 t
11 I f
(Phys. Rev. Lett.)2 688 1 2761 4744 t
11 R f
(, to appear.)2 488 1 3449 4744 t
( P)1 103(146. C.)1 335 2 720 4906 t
9 R f
(ETERSON)1158 4906 w
11 R f
( to combinatorial optimization: Benchmark)4 1957(, ``Parallel distributed approaches)3 1520 2 1563 4906 t
(studies on traveling salesman problem,'')4 1786 1 953 5036 t
11 I f
(Neural Computation)1 910 1 2767 5036 t
11 B f
(2)3714 5036 w
11 R f
(\(1990\), 261-269.)1 742 1 3797 5036 t
( P)1 108(147. C.)1 335 2 720 5198 t
9 R f
(ETERSON AND)1 641 1 1163 5198 t
11 R f
(B. S)1 210 1 1850 5198 t
9 R f
(O)2060 5198 w
(..)2070 5111 w
(DERBERG)2125 5198 w
11 R f
( for mapping optimization problems)4 1666(, ``A new method)3 829 2 2545 5198 t
(onto neural networks,'')2 1027 1 953 5328 t
11 I f
(International Journal of Neural Systems)4 1774 1 2008 5328 t
11 B f
(1)3819 5328 w
11 R f
(\(1989\), 3-22.)1 577 1 3902 5328 t
( K. P)2 241(148. L.)1 328 2 720 5490 t
9 R f
(LATZMAN AND)1 667 1 1289 5490 t
11 R f
(J. J. B)2 290 1 1993 5490 t
9 R f
(ARTHOLDI)2283 5490 w
11 R f
(, III, ``Spacefilling curves and the planar travelling)7 2297 1 2743 5490 t
(salesman problem,'')1 896 1 953 5620 t
11 I f
(J. Assoc. Comput. Mach.)3 1098 1 1877 5620 t
11 B f
(36)3012 5620 w
11 R f
(\(1989\), 719-737.)1 742 1 3150 5620 t
( P)1 95(149. C.)1 335 2 720 5782 t
9 R f
(OTTS AND)1 448 1 1150 5782 t
11 R f
(S.)1632 5782 w
9 R f
(VAN DE)1 372 1 1756 5782 t
11 R f
(V)2185 5782 w
9 R f
(ELDE)2264 5782 w
11 R f
(, ``Dynasearch\320Iterative local improvement by dynamic)5 2546 1 2494 5782 t
(programming: Part I, The traveling salesman problem,'' manuscript \(1995\).)8 3330 1 953 5912 t
(150. J.-V. P)2 549 1 720 6074 t
9 R f
(OTVIN)1269 6074 w
11 R f
(, ``The traveling salesman problem: a neural network perspective,'')8 3065 1 1549 6074 t
11 I f
(ORSA J.)1 385 1 4655 6074 t
(Comput.)953 6204 w
11 B f
(5)1367 6204 w
11 R f
(\(1993\), 328-347.)1 742 1 1450 6204 t
( R)1 137(151. G.)1 340 2 720 6366 t
9 R f
(EINELT)1197 6366 w
11 R f
( library,'')1 456(, ``TSPLIB\320A traveling salesman problem)4 2067 2 1512 6366 t
11 I f
(ORSA J. Comput.)2 849 1 4099 6366 t
11 B f
(3)4985 6366 w
11 R f
(\(1991\), 376-384.)1 742 1 953 6496 t
( R)1 115(152. G.)1 340 2 720 6658 t
9 R f
(EINELT)1175 6658 w
11 R f
( large geometric traveling salesman problems,'')5 2167(, ``Fast heuristics for)3 955 2 1490 6658 t
11 I f
(ORSA J.)1 386 1 4654 6658 t
(Comput.)953 6788 w
11 B f
(4)1367 6788 w
11 R f
(\(1992\), 206-217.)1 742 1 1450 6788 t
( R)1 111(153. G.)1 340 2 720 6950 t
9 R f
(EINELT)1171 6950 w
11 R f
(,)1486 6950 w
11 I f
( Applica-)1 416(The Traveling Salesman Problem: Computational Solutions for TSP)7 3073 2 1551 6950 t
(tions)953 7080 w
11 R f
(, Lecture Notes in Computer Science 840, Springer-Verlag, Berlin, 1994.)9 3218 1 1168 7080 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 68 536 764
%%EndPage: 101 101
%%Page: 102 102
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
102 pagesetup
11 R f
(- 102 -)2 293 1 2733 490 t
( T. R)2 225(154. W.)1 364 2 720 850 t
9 R f
(HEE AND)1 394 1 1309 850 t
11 R f
(M. T)1 222 1 1732 850 t
9 R f
(ALAGRAND)1954 850 w
11 R f
(, ``A sharp deviation inequality for the stochastic traveling)8 2581 1 2459 850 t
(salesman problem,'')1 896 1 953 980 t
11 I f
(Annals of Probability)2 950 1 1877 980 t
11 B f
(17)2864 980 w
11 R f
(\(1988\), 1-8.)1 522 1 3002 980 t
( R)1 160(155. N.)1 340 2 720 1142 t
9 R f
(OBERTSON AND)1 751 1 1220 1142 t
11 R f
(P. D. S)2 431 1 2057 1142 t
9 R f
(EYMOUR)2488 1142 w
11 R f
( tree-)1 286(, ``Graph Minors X. Obstructions to)5 1876 2 2878 1142 t
(decomposition,'')953 1272 w
11 I f
(J. Combinatorial Theory Ser. B)4 1390 1 1729 1272 t
11 B f
(52)3165 1272 w
11 R f
(\(1991\), 153-190.)1 742 1 3303 1272 t
( R)1 102(156. A.)1 340 2 720 1434 t
9 R f
(OHE)1162 1434 w
11 R f
(, private communication \(1995\).)3 1420 1 1347 1434 t
( J. R)2 209(157. D.)1 340 2 720 1596 t
9 R f
(OSENKRANTZ)1269 1596 w
11 R f
(, R. E. S)3 383 1 1869 1596 t
9 R f
(TEARNS)2252 1596 w
11 R f
(,)2602 1596 w
9 R f
(AND)2657 1596 w
11 R f
(P. M. L)2 347 1 2884 1596 t
9 R f
(EWIS)3231 1596 w
11 R f
( ``An analysis of several heuris-)5 1429(, II,)1 160 2 3451 1596 t
(tics for the traveling salesman problem,'')5 1812 1 953 1726 t
11 I f
(SIAM J. Comput.)2 758 1 2793 1726 t
11 B f
(6)3588 1726 w
11 R f
(\(1977\), 563-581.)1 742 1 3671 1726 t
( R)1 118(158. Y.)1 340 2 720 1888 t
9 R f
(OSSIER)1178 1888 w
11 R f
(, M. T)2 309 1 1488 1888 t
9 R f
(ROYON)1797 1888 w
11 R f
(,)2117 1888 w
9 R f
(AND)2184 1888 w
11 R f
(T. M. L)2 378 1 2424 1888 t
9 R f
(IEBLING)2802 1888 w
11 R f
(, ``Probabilistic exchange algorithms and)4 1878 1 3162 1888 t
(Euclidean traveling salesman problems,'')3 1823 1 953 2018 t
11 I f
(OR Spektrum)1 588 1 2804 2018 t
11 B f
(8)3429 2018 w
11 R f
(\(1986\), 151-164.)1 742 1 3512 2018 t
( S)1 106(159. S.)1 323 2 720 2180 t
9 R f
(AHNI AND)1 459 1 1149 2180 t
11 R f
(T. G)1 218 1 1652 2180 t
9 R f
(ONZALEZ)1870 2180 w
11 R f
( problems,'')1 554(, ``P-complete approximation)2 1329 2 2285 2180 t
11 I f
(J. Assoc. Comput.)2 827 1 4213 2180 t
(Mach.)953 2310 w
11 B f
(23)1267 2310 w
11 R f
(\(1976\), 555-565.)1 742 1 1405 2310 t
( S)1 93(160. B.)1 335 2 720 2472 t
9 R f
(CHNETZLER)1148 2472 w
11 R f
( eme)1 137( \301)1 45( pour le probl)3 608( de relaxation)2 603( ethode)1 252( \302)1 40( et une m)3 416( echange)1 317( \302)1 40( d')1 122( erateurs)1 305( \302)1 40(, ``Des op)2 442 13 1673 2472 t
(du voyageur de commerce,'')3 1295 1 953 2602 t
11 I f
(Recherche Operationelle/Operations Research)2 2059 1 2288 2602 t
11 B f
(26)4386 2602 w
11 R f
(\(1992\), 57-)1 505 1 4535 2602 t
(81.)953 2732 w
( B. S)2 238(161. D.)1 340 2 720 2894 t
9 R f
(HMOYS AND)1 552 1 1298 2894 t
11 R f
(D. P. W)2 374 1 1887 2894 t
9 R f
(ILLIAMSON)2261 2894 w
11 R f
( TSP bound: A mono-)4 1015(, ``Analyzing the Held-Karp)3 1269 2 2756 2894 t
(tonicity property with applications,'')3 1619 1 953 3024 t
11 I f
(Inform. Process. Lett.)2 958 1 2600 3024 t
11 B f
(35)3595 3024 w
11 R f
(\(1990\), 281-285.)1 742 1 3733 3024 t
( W. S)2 253(162. M.)1 359 2 720 3186 t
9 R f
(IMMEN)1332 3186 w
11 R f
( salesman)1 433(, ``Parameter sensitivity on the elastic net approach to the traveling)10 2965 2 1642 3186 t
(problem,'')953 3316 w
11 I f
(Neural Computation)1 910 1 1447 3316 t
11 B f
(3)2394 3316 w
11 R f
(\(1991\), 363-374.)1 742 1 2477 3316 t
( D. S)2 229(163. D.)1 340 2 720 3478 t
9 R f
(LEATOR AND)1 575 1 1289 3478 t
11 R f
(R. E. T)2 324 1 1894 3478 t
9 R f
(ARJAN)2218 3478 w
11 R f
( trees,'')1 337(, ``Self-adjusting binary search)3 1365 2 2508 3478 t
11 I f
(J. Assoc. Comput.)2 799 1 4241 3478 t
(Mach.)953 3608 w
11 B f
(32)1267 3608 w
11 R f
(\(1985\), 652-686.)1 742 1 1405 3608 t
( S)1 90(164. T.)1 328 2 720 3770 t
9 R f
(TARKWEATHER)1138 3770 w
11 R f
(, S. M)2 272 1 1823 3770 t
9 R f
(C)2095 3770 w
11 R f
(D)2155 3770 w
9 R f
(ANIEL)2234 3770 w
11 R f
(, K. M)2 289 1 2504 3770 t
9 R f
(ATHIAS)2793 3770 w
11 R f
( W)1 132(, D.)1 163 2 3123 3770 t
9 R f
(HITLEY)3418 3770 w
11 R f
(,)3743 3770 w
9 R f
(AND)3795 3770 w
11 R f
(C. W)1 234 1 4019 3770 t
9 R f
(HITLEY)4253 3770 w
11 R f
(, ``A com-)2 462 1 4578 3770 t
(parison of genetic sequencing operators,'' in)5 2036 1 953 3900 t
11 I f
(Proc. 4th Int. Conf. on Genetic Algorithms)6 1979 1 3033 3900 t
11 R f
(,)5012 3900 w
(R. K. Belew and L. B. Booker \(Eds.\), Morgan Kaufman, San Francisco, CA, 1991, 69-76.)14 3966 1 953 4030 t
( M. S)2 264(165. J.)1 304 2 720 4192 t
9 R f
(TEELE)1288 4192 w
11 R f
( the TSP,'')2 503(, ``Complete convergence of short paths and Karp's algorithm for)9 2974 2 1563 4192 t
11 I f
(Math. Oper. Res.)2 755 1 953 4322 t
11 B f
(6)1745 4322 w
11 R f
(\(1989\), 374-378.)1 742 1 1828 4322 t
( S)1 104(166. K.)1 340 2 720 4484 t
9 R f
(TEIGLITZ AND)1 632 1 1164 4484 t
11 R f
(P. W)1 235 1 1838 4484 t
9 R f
(EINER)2073 4484 w
11 R f
( the)1 177(, ``Some improved algorithms for computer solution of)7 2525 2 2338 4484 t
(traveling salesman problem,'')2 1322 1 953 4614 t
11 I f
(in)2307 4614 w
11 R f
( Ann. Allerton Conf. on Communication,)5 1834(``Proceedings 6th)1 781 2 2425 4614 t
( Coordinated Sci-)2 800(Control, and Computing,'' Department of Electrical Engineering and the)8 3287 2 953 4744 t
(ence Laboratory, University of Illinois, Urbana, Ill., 1968, 814-821.)8 2978 1 953 4874 t
( S)1 95(167. D.)1 340 2 720 5036 t
9 R f
(TEIN)1155 5036 w
11 R f
(,)1360 5036 w
11 I f
(Scheduling Dial-a-Ride Transportation Systems: An Asymptotic Approach)6 3305 1 1421 5036 t
11 R f
(, Ph.D.)1 314 1 4726 5036 t
(Dissertation, Harvard University, Cambridge, MA, 1977.)5 2517 1 953 5166 t
( Y. S)2 247(168. J.)1 304 2 720 5328 t
9 R f
(UH AND)1 359 1 1271 5328 t
11 R f
(D.)1669 5328 w
9 R f
(VAN)1815 5328 w
11 R f
(G)2049 5328 w
9 R f
(UCHT)2128 5328 w
11 R f
(, ``Distributed genetic algorithms,'' Report No. 225, Com-)7 2667 1 2373 5328 t
(puter Science Department, Indiana University, Bloomington, IN, 1987a.)7 3176 1 953 5458 t
( Y. S)2 241(169. J.)1 304 2 720 5620 t
9 R f
(UH AND)1 357 1 1265 5620 t
11 R f
(D.)1659 5620 w
9 R f
(VAN)1803 5620 w
11 R f
(G)2035 5620 w
9 R f
(UCHT)2114 5620 w
11 R f
(, ``Incorporating heuristic information into genetic search,'')6 2681 1 2359 5620 t
(in)953 5750 w
11 I f
(Proc. 2nd Int. Conf. on Genetic Algorithms)6 1973 1 1078 5750 t
11 R f
(, J. J. Grefenstette \(Ed.\), Lawrence Erlbaum)6 1989 1 3051 5750 t
(Associates, Hillsdale, NJ, 1987b, 100-107.)4 1881 1 953 5880 t
( T)1 129(170. M.)1 359 2 720 6042 t
9 R f
(ROYON)1208 6042 w
11 R f
(,)1528 6042 w
11 I f
( emes)1 173( \301)1 45( Asymptotiques pour trois Probl)4 1555( esultats)1 297( \302)1 40(Quelques Heuristiques et R)3 1311 6 1619 6042 t
(d'Optimisation Combinatoire)1 1319 1 953 6172 t
11 R f
( de Lausanne,)2 630( erale)1 171( \302)1 40( ed)1 63( \302)1 40( No. 754, Ecole Polytechnique F)5 1495( ese)1 94( \301)1 45(, Th)1 190 9 2272 6172 t
(Lausanne, Switzerland, 1988.)2 1303 1 953 6302 t
( L. J. U)3 392(171. N.)1 340 2 720 6464 t
9 R f
(LDER)1452 6464 w
11 R f
( L. A)2 274(, E. H.)2 328 2 1687 6464 t
9 R f
(ARTS)2289 6464 w
11 R f
(, H.-J. B)2 416 1 2519 6464 t
9 R f
(ANDELT)2935 6464 w
11 R f
(, P. J. M.)3 465 1 3295 6464 t
9 R f
(VAN)3810 6464 w
11 R f
(L)4055 6464 w
9 R f
(AARHOVEN)4122 6464 w
11 R f
(,)4627 6464 w
9 R f
(AND)4700 6464 w
11 R f
(E.)4945 6464 w
(P)953 6594 w
9 R f
(ESCH)1015 6594 w
11 R f
(, ``Genetic local search algorithms for the traveling salesman problem,'' in)10 3357 1 1245 6594 t
11 I f
(Proc. 1st)1 404 1 4636 6594 t
( from Nature)2 602(Int. Workshop on Parallel Problem Solving)5 1989 2 953 6724 t
11 R f
(, H. P. Schwefel and R. M)6 1254 1 3544 6724 t
(. .)1 50 1 4798 6658 t
(anner)4798 6724 w
(\(Eds.\), Lecture Notes in Computer Science, Vol. 496, Springer, Berlin, 1991, 109-116.)11 3821 1 953 6854 t
( I. V)2 241(172. A.)1 340 2 720 7016 t
9 R f
(AKHUTINSKY AND)1 829 1 1301 7016 t
11 R f
(B. L. G)2 374 1 2179 7016 t
9 R f
(OLDEN)2553 7016 w
11 R f
( hierarchical strategy for solving traveling)5 1954(, ``A)1 228 2 2858 7016 t
(salesman problems using elastic nets,'')4 1719 1 953 7146 t
11 I f
(J. Heuristics)1 556 1 2700 7146 t
11 R f
(, to appear.)2 488 1 3256 7146 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 61 536 764
%%EndPage: 102 102
%%Page: 103 103
%%PageBoundingBox: (atend)
DpostDict begin
/saveobj save def
mark
103 pagesetup
11 R f
(- 103 -)2 293 1 2733 490 t
( L. V)2 230(173. C.)1 335 2 720 850 t
9 R f
(ALENZUELA AND)1 753 1 1285 850 t
11 R f
(A. J. J)2 277 1 2066 850 t
9 R f
(ONES)2343 850 w
11 R f
( genetic)1 345(, ``Evolutionary divide and conquer \(I\): A novel)7 2117 2 2578 850 t
(approach to the TSP,'')3 995 1 953 980 t
11 I f
(Evolutionary Computation)1 1178 1 1976 980 t
11 B f
(1)3191 980 w
11 R f
(\(1994\), 313-333.)1 742 1 3274 980 t
( E. V)2 298(174. D.)1 340 2 720 1142 t
9 R f
(AN DEN)1 377 1 1358 1142 t
11 R f
(B)1797 1142 w
9 R f
(OUT AND)1 437 1 1871 1142 t
11 R f
(T. K. M)2 426 1 2371 1142 t
9 R f
(ILLER)2797 1142 w
11 R f
(, III, ``Improving the performance of the)6 1988 1 3052 1142 t
( through normalization and annealing,'')4 1864(Hopfield-Tank neural network)2 1399 2 953 1272 t
11 I f
(Biol. Cybern.)1 620 1 4273 1272 t
11 B f
(62)4930 1272 w
11 R f
(\(1989\), 129-139.)1 742 1 953 1402 t
(175. J.)1 304 1 720 1564 t
9 R f
(VAN)1077 1564 w
11 R f
(L)1326 1564 w
9 R f
(EEUWEN AND)1 624 1 1393 1564 t
11 R f
(A. A. S)2 384 1 2071 1564 t
9 R f
(CHOONE)2455 1564 w
11 R f
(, ``Untangling a traveling salesman tour in the)7 2210 1 2830 1564 t
(plane,'' Report No. RUU-CS-80-11, Department of Computer Science, University of)9 4087 1 953 1694 t
(Utrecht, Utrecht, The Netherlands, 1980.)4 1799 1 953 1824 t
( G. A. V)3 377(176. M.)1 359 2 720 1986 t
9 R f
(ERHOEVEN)1456 1986 w
11 R f
( L. A)2 232(, E. H.)2 286 2 1941 1986 t
9 R f
(ARTS)2459 1986 w
11 R f
(, E. V)2 260 1 2689 1986 t
9 R f
(AN DE)1 279 1 2949 1986 t
11 R f
(S)3257 1986 w
9 R f
(LUIS)3319 1986 w
11 R f
(,)3519 1986 w
9 R f
(AND)3571 1986 w
11 R f
(R. J. M. V)3 465 1 3795 1986 t
9 R f
(AESSENS)4260 1986 w
11 R f
(, ``Paral-)1 390 1 4650 1986 t
( and the travelling salesman problem,'' in)6 1937(lel local search)2 693 2 953 2116 t
11 I f
(Parallel Problem Solving from)3 1412 1 3628 2116 t
(Nature 2)1 389 1 953 2246 t
11 R f
(, North-Holland, Amsterdam, 1992, 543-552.)4 1996 1 1342 2246 t
( G. A. V)3 410(177. M.)1 359 2 720 2408 t
9 R f
(ERHOEVEN)1489 2408 w
11 R f
(, E. H. L. A)4 564 1 1974 2408 t
9 R f
(ARTS)2538 2408 w
11 R f
(,)2768 2408 w
9 R f
(AND)2831 2408 w
11 R f
(P. C. J. S)3 445 1 3066 2408 t
9 R f
(WINKELS)3511 2408 w
11 R f
(, ``A parallel 2-opt algo-)4 1124 1 3916 2408 t
(rithm for the traveling salesman problem,'')5 2063 1 953 2538 t
11 I f
(Future Generation Computing Systems)3 1816 1 3077 2538 t
11 B f
(11)4930 2538 w
11 R f
(\(1995\), 175-182.)1 742 1 953 2668 t
( G. A. V)3 395(178. M.)1 359 2 720 2830 t
9 R f
(ERHOEVEN)1474 2830 w
11 R f
(, P. C. J. S)4 489 1 1959 2830 t
9 R f
(WINKELS)2448 2830 w
11 R f
(,)2853 2830 w
9 R f
(AND)2910 2830 w
11 R f
(E. H. L. A)3 478 1 3139 2830 t
9 R f
(ARTS)3617 2830 w
11 R f
(, ``Parallel local search for)4 1193 1 3847 2830 t
(the traveling salesman,'' manuscript \(1995\).)4 1946 1 953 2960 t
( W)1 138(179. P.)1 323 2 720 3122 t
9 R f
(EINER)1181 3122 w
11 R f
(, S. L. S)3 380 1 1446 3122 t
9 R f
(AVAGE)1826 3122 w
11 R f
(,)2141 3122 w
9 R f
(AND)2199 3122 w
11 R f
(A. B)1 217 1 2430 3122 t
9 R f
(AGCHI)2647 3122 w
11 R f
(, ``Neighborhood search algorithms for finding)5 2108 1 2932 3122 t
(optimal traveling salesman tours must be inefficient,'')6 2529 1 953 3252 t
11 I f
(in)3533 3252 w
11 R f
(``Proceedings 5th Ann. ACM)3 1370 1 3670 3252 t
( Computing Machinery, New York, 1973,)5 1861(Symp. on Theory of Computing,'' Association for)6 2226 2 953 3382 t
(207-213.)953 3512 w
( W)1 144(180. D.)1 340 2 720 3674 t
9 R f
(HITLEY)1204 3674 w
11 R f
( S)1 104(, T.)1 164 2 1529 3674 t
9 R f
(TARKWEATHER)1797 3674 w
11 R f
(,)2482 3674 w
9 R f
(AND)2547 3674 w
11 R f
(D. F)1 211 1 2784 3674 t
9 R f
(UQUAY)2995 3674 w
11 R f
(, ``Scheduling problems and traveling)4 1720 1 3320 3674 t
( genetic edge recombination operator,'' in)5 1931(salesman: The)1 649 2 953 3804 t
11 I f
(Proc. 3rd Int. Conf. on Genetic)5 1462 1 3578 3804 t
(Algorithms)953 3934 w
11 R f
(, J. D. Schaffer \(Ed.\), Morgan Kaufman, San Francisco, CA, 1989, 133-140.)11 3357 1 1443 3934 t
( V. W)2 298(181. G.)1 340 2 720 4096 t
9 R f
(ILSON AND)1 499 1 1358 4096 t
11 R f
(G. S. P)2 347 1 1901 4096 t
9 R f
(AWLEY)2248 4096 w
11 R f
(, ``On the stability of the traveling salesman problem)8 2467 1 2573 4096 t
(algorithm of Hopfield and Tank,'')4 1504 1 953 4226 t
11 I f
(Biol. Cybern.)1 591 1 2485 4226 t
11 B f
(58)3113 4226 w
11 R f
(\(1988\), 63-70.)1 632 1 3251 4226 t
( W)1 134(182. L.)1 328 2 720 4388 t
9 R f
(OLSEY)1182 4388 w
11 R f
( bound,'')1 407(, ``Heuristic analysis, linear programming, and branch and)7 2589 2 1472 4388 t
11 I f
(Math. Prog.)1 540 1 4500 4388 t
(Stud.)953 4518 w
11 B f
(13)1214 4518 w
11 R f
(\(1980\), 121-134.)1 742 1 1352 4518 t
( X)1 113(183. X.)1 340 2 720 4680 t
9 R f
(U AND)1 289 1 1173 4680 t
11 R f
(W. T. T)2 361 1 1496 4680 t
9 R f
(SAI)1857 4680 w
11 R f
( traveling salesman problem,'')3 1363(, ``Effective neural algorithms for the)5 1675 2 2002 4680 t
11 I f
(Neural Networks)1 750 1 953 4810 t
11 B f
(4)1740 4810 w
11 R f
(\(1991\), 193-205.)1 742 1 1823 4810 t
cleartomark
showpage
saveobj restore
end
%%PageBoundingBox: 83 295 536 764
%%EndPage: 103 103
%%Trailer
DpostDict begin
done
end
%%Pages: 103
%%DocumentFonts: Times-Bold Courier Times-Italic Times-Roman Times-Roman Symbol
